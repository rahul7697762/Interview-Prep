module.exports = {

"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored['react-ssr'].ReactJsxDevRuntime; //# sourceMappingURL=react-jsx-dev-runtime.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/image-external.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    getImageProps: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    getImageProps: function() {
        return getImageProps;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-ssr] (ecmascript)");
const _getimgprops = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/get-img-props.js [app-ssr] (ecmascript)");
const _imagecomponent = __turbopack_context__.r("[project]/node_modules/next/dist/client/image-component.js [app-ssr] (ecmascript)");
const _imageloader = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/image-loader.js [app-ssr] (ecmascript)"));
function getImageProps(imgProps) {
    const { props } = (0, _getimgprops.getImgProps)(imgProps, {
        defaultLoader: _imageloader.default,
        // This is replaced by webpack define plugin
        imgConf: ("TURBOPACK compile-time value", JSON.parse('{"deviceSizes":[640,750,828,1080,1200,1920,2048,3840],"imageSizes":[16,32,48,64,96,128,256,384],"path":"/_next/image","loader":"default","dangerouslyAllowSVG":false,"unoptimized":false,"domains":[],"remotePatterns":[]}'))
    });
    // Normally we don't care about undefined props because we pass to JSX,
    // but this exported function could be used by the end user for anything
    // so we delete undefined props to clean it up a little.
    for (const [key, value] of Object.entries(props)){
        if (value === undefined) {
            delete props[key];
        }
    }
    return {
        props
    };
}
const _default = _imagecomponent.Image; //# sourceMappingURL=image-external.js.map
}}),
"[project]/node_modules/next/image.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/shared/lib/image-external.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/next/navigation.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/client/components/navigation.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
;
;
;
;
}}),
"[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/zod/v3/helpers/util.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ZodParsedType": (()=>ZodParsedType),
    "getParsedType": (()=>getParsedType),
    "objectUtil": (()=>objectUtil),
    "util": (()=>util)
});
var util;
(function(util) {
    util.assertEqual = (_)=>{};
    function assertIs(_arg) {}
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items)=>{
        const obj = {};
        for (const item of items){
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = (obj)=>{
        const validKeys = util.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys){
            filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
    };
    util.objectValues = (obj)=>{
        return util.objectKeys(obj).map(function(e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
     ? (obj)=>Object.keys(obj) // eslint-disable-line ban/ban
     : (object)=>{
        const keys = [];
        for(const key in object){
            if (Object.prototype.hasOwnProperty.call(object, key)) {
                keys.push(key);
            }
        }
        return keys;
    };
    util.find = (arr, checker)=>{
        for (const item of arr){
            if (checker(item)) return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function" ? (val)=>Number.isInteger(val) // eslint-disable-line ban/ban
     : (val)=>typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array.map((val)=>typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util.joinValues = joinValues;
    util.jsonStringifyReplacer = (_, value)=>{
        if (typeof value === "bigint") {
            return value.toString();
        }
        return value;
    };
})(util || (util = {}));
var objectUtil;
(function(objectUtil) {
    objectUtil.mergeShapes = (first, second)=>{
        return {
            ...first,
            ...second
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
]);
const getParsedType = (data)=>{
    const t = typeof data;
    switch(t){
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};
}}),
"[project]/node_modules/zod/v3/ZodError.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ZodError": (()=>ZodError),
    "ZodIssueCode": (()=>ZodIssueCode),
    "quotelessJson": (()=>quotelessJson)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/helpers/util.js [app-ssr] (ecmascript)");
;
const ZodIssueCode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
]);
const quotelessJson = (obj)=>{
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    get errors() {
        return this.issues;
    }
    constructor(issues){
        super();
        this.issues = [];
        this.addIssue = (sub)=>{
            this.issues = [
                ...this.issues,
                sub
            ];
        };
        this.addIssues = (subs = [])=>{
            this.issues = [
                ...this.issues,
                ...subs
            ];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            // eslint-disable-next-line ban/ban
            Object.setPrototypeOf(this, actualProto);
        } else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    format(_mapper) {
        const mapper = _mapper || function(issue) {
            return issue.message;
        };
        const fieldErrors = {
            _errors: []
        };
        const processError = (error)=>{
            for (const issue of error.issues){
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                } else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                } else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                } else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                } else {
                    let curr = fieldErrors;
                    let i = 0;
                    while(i < issue.path.length){
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                        // if (typeof el === "string") {
                        //   curr[el] = curr[el] || { _errors: [] };
                        // } else if (typeof el === "number") {
                        //   const errorArray: any = [];
                        //   errorArray._errors = [];
                        //   curr[el] = curr[el] || errorArray;
                        // }
                        } else {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    static assert(value) {
        if (!(value instanceof ZodError)) {
            throw new Error(`Not a ZodError: ${value}`);
        }
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue)=>issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues){
            if (sub.path.length > 0) {
                const firstEl = sub.path[0];
                fieldErrors[firstEl] = fieldErrors[firstEl] || [];
                fieldErrors[firstEl].push(mapper(sub));
            } else {
                formErrors.push(mapper(sub));
            }
        }
        return {
            formErrors,
            fieldErrors
        };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues)=>{
    const error = new ZodError(issues);
    return error;
};
}}),
"[project]/node_modules/zod/v3/locales/en.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/ZodError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/helpers/util.js [app-ssr] (ecmascript)");
;
;
const errorMap = (issue, _ctx)=>{
    let message;
    switch(issue.code){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type:
            if (issue.received === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].undefined) {
                message = "Required";
            } else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].jsonStringifyReplacer)}`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].unrecognized_keys:
            message = `Unrecognized key(s) in object: ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].joinValues(issue.keys, ", ")}`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_union:
            message = `Invalid input`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].joinValues(issue.options)}`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_enum_value:
            message = `Invalid enum value. Expected ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_return_type:
            message = `Invalid function return type`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_date:
            message = `Invalid date`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") {
                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                    }
                } else if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                } else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].assertNever(issue.validation);
                }
            } else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            } else {
                message = "Invalid";
            }
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "bigint") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
            else message = "Invalid input";
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else message = "Invalid input";
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].custom:
            message = `Invalid input`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].assertNever(issue);
    }
    return {
        message
    };
};
const __TURBOPACK__default__export__ = errorMap;
}}),
"[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getErrorMap": (()=>getErrorMap),
    "setErrorMap": (()=>setErrorMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/locales/en.js [app-ssr] (ecmascript)");
;
let overrideErrorMap = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"];
;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}
}}),
"[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "defaultErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]),
    "getErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getErrorMap"]),
    "setErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setErrorMap"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/locales/en.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "defaultErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["defaultErrorMap"]),
    "getErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["getErrorMap"]),
    "setErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["setErrorMap"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript) <exports>");
}}),
"[project]/node_modules/zod/v3/helpers/parseUtil.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DIRTY": (()=>DIRTY),
    "EMPTY_PATH": (()=>EMPTY_PATH),
    "INVALID": (()=>INVALID),
    "OK": (()=>OK),
    "ParseStatus": (()=>ParseStatus),
    "addIssueToContext": (()=>addIssueToContext),
    "isAborted": (()=>isAborted),
    "isAsync": (()=>isAsync),
    "isDirty": (()=>isDirty),
    "isValid": (()=>isValid),
    "makeIssue": (()=>makeIssue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/locales/en.js [app-ssr] (ecmascript)");
;
;
const makeIssue = (params)=>{
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [
        ...path,
        ...issueData.path || []
    ];
    const fullIssue = {
        ...issueData,
        path: fullPath
    };
    if (issueData.message !== undefined) {
        return {
            ...issueData,
            path: fullPath,
            message: issueData.message
        };
    }
    let errorMessage = "";
    const maps = errorMaps.filter((m)=>!!m).slice().reverse();
    for (const map of maps){
        errorMessage = map(fullIssue, {
            data,
            defaultError: errorMessage
        }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: errorMessage
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const overrideMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getErrorMap"])();
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            overrideMap,
            overrideMap === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] ? undefined : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]
        ].filter((x)=>!!x)
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor(){
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid") this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted") this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results){
            if (s.status === "aborted") return INVALID;
            if (s.status === "dirty") status.dirty();
            arrayValue.push(s.value);
        }
        return {
            status: status.value,
            value: arrayValue
        };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs){
            const key = await pair.key;
            const value = await pair.value;
            syncPairs.push({
                key,
                value
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs){
            const { key, value } = pair;
            if (key.status === "aborted") return INVALID;
            if (value.status === "aborted") return INVALID;
            if (key.status === "dirty") status.dirty();
            if (value.status === "dirty") status.dirty();
            if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
                finalObject[key.value] = value.value;
            }
        }
        return {
            status: status.value,
            value: finalObject
        };
    }
}
const INVALID = Object.freeze({
    status: "aborted"
});
const DIRTY = (value)=>({
        status: "dirty",
        value
    });
const OK = (value)=>({
        status: "valid",
        value
    });
const isAborted = (x)=>x.status === "aborted";
const isDirty = (x)=>x.status === "dirty";
const isValid = (x)=>x.status === "valid";
const isAsync = (x)=>typeof Promise !== "undefined" && x instanceof Promise;
}}),
"[project]/node_modules/zod/v3/helpers/typeAliases.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
}}),
"[project]/node_modules/zod/v3/locales/en.js [app-ssr] (ecmascript) <export default as defaultErrorMap>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "defaultErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/locales/en.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/zod/v3/helpers/errorUtil.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "errorUtil": (()=>errorUtil)
});
var errorUtil;
(function(errorUtil) {
    errorUtil.errToObj = (message)=>typeof message === "string" ? {
            message
        } : message || {};
    // biome-ignore lint:
    errorUtil.toString = (message)=>typeof message === "string" ? message : message?.message;
})(errorUtil || (errorUtil = {}));
}}),
"[project]/node_modules/zod/v3/types.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BRAND": (()=>BRAND),
    "NEVER": (()=>NEVER),
    "Schema": (()=>ZodType),
    "ZodAny": (()=>ZodAny),
    "ZodArray": (()=>ZodArray),
    "ZodBigInt": (()=>ZodBigInt),
    "ZodBoolean": (()=>ZodBoolean),
    "ZodBranded": (()=>ZodBranded),
    "ZodCatch": (()=>ZodCatch),
    "ZodDate": (()=>ZodDate),
    "ZodDefault": (()=>ZodDefault),
    "ZodDiscriminatedUnion": (()=>ZodDiscriminatedUnion),
    "ZodEffects": (()=>ZodEffects),
    "ZodEnum": (()=>ZodEnum),
    "ZodFirstPartyTypeKind": (()=>ZodFirstPartyTypeKind),
    "ZodFunction": (()=>ZodFunction),
    "ZodIntersection": (()=>ZodIntersection),
    "ZodLazy": (()=>ZodLazy),
    "ZodLiteral": (()=>ZodLiteral),
    "ZodMap": (()=>ZodMap),
    "ZodNaN": (()=>ZodNaN),
    "ZodNativeEnum": (()=>ZodNativeEnum),
    "ZodNever": (()=>ZodNever),
    "ZodNull": (()=>ZodNull),
    "ZodNullable": (()=>ZodNullable),
    "ZodNumber": (()=>ZodNumber),
    "ZodObject": (()=>ZodObject),
    "ZodOptional": (()=>ZodOptional),
    "ZodPipeline": (()=>ZodPipeline),
    "ZodPromise": (()=>ZodPromise),
    "ZodReadonly": (()=>ZodReadonly),
    "ZodRecord": (()=>ZodRecord),
    "ZodSchema": (()=>ZodType),
    "ZodSet": (()=>ZodSet),
    "ZodString": (()=>ZodString),
    "ZodSymbol": (()=>ZodSymbol),
    "ZodTransformer": (()=>ZodEffects),
    "ZodTuple": (()=>ZodTuple),
    "ZodType": (()=>ZodType),
    "ZodUndefined": (()=>ZodUndefined),
    "ZodUnion": (()=>ZodUnion),
    "ZodUnknown": (()=>ZodUnknown),
    "ZodVoid": (()=>ZodVoid),
    "any": (()=>anyType),
    "array": (()=>arrayType),
    "bigint": (()=>bigIntType),
    "boolean": (()=>booleanType),
    "coerce": (()=>coerce),
    "custom": (()=>custom),
    "date": (()=>dateType),
    "datetimeRegex": (()=>datetimeRegex),
    "discriminatedUnion": (()=>discriminatedUnionType),
    "effect": (()=>effectsType),
    "enum": (()=>enumType),
    "function": (()=>functionType),
    "instanceof": (()=>instanceOfType),
    "intersection": (()=>intersectionType),
    "late": (()=>late),
    "lazy": (()=>lazyType),
    "literal": (()=>literalType),
    "map": (()=>mapType),
    "nan": (()=>nanType),
    "nativeEnum": (()=>nativeEnumType),
    "never": (()=>neverType),
    "null": (()=>nullType),
    "nullable": (()=>nullableType),
    "number": (()=>numberType),
    "object": (()=>objectType),
    "oboolean": (()=>oboolean),
    "onumber": (()=>onumber),
    "optional": (()=>optionalType),
    "ostring": (()=>ostring),
    "pipeline": (()=>pipelineType),
    "preprocess": (()=>preprocessType),
    "promise": (()=>promiseType),
    "record": (()=>recordType),
    "set": (()=>setType),
    "strictObject": (()=>strictObjectType),
    "string": (()=>stringType),
    "symbol": (()=>symbolType),
    "transformer": (()=>effectsType),
    "tuple": (()=>tupleType),
    "undefined": (()=>undefinedType),
    "union": (()=>unionType),
    "unknown": (()=>unknownType),
    "void": (()=>voidType)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/ZodError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__defaultErrorMap$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/locales/en.js [app-ssr] (ecmascript) <export default as defaultErrorMap>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/helpers/errorUtil.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/helpers/parseUtil.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/helpers/util.js [app-ssr] (ecmascript)");
;
;
;
;
;
class ParseInputLazyPath {
    constructor(parent, value, path, key){
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (Array.isArray(this._key)) {
                this._cachedPath.push(...this._path, ...this._key);
            } else {
                this._cachedPath.push(...this._path, this._key);
            }
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValid"])(result)) {
        return {
            success: true,
            data: result.value
        };
    } else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        return {
            success: false,
            get error () {
                if (this._error) return this._error;
                const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodError"](ctx.common.issues);
                this._error = error;
                return this._error;
            }
        };
    }
};
function processCreateParams(params) {
    if (!params) return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap) return {
        errorMap: errorMap,
        description
    };
    const customMap = (iss, ctx)=>{
        const { message } = params;
        if (iss.code === "invalid_enum_value") {
            return {
                message: message ?? ctx.defaultError
            };
        }
        if (typeof ctx.data === "undefined") {
            return {
                message: message ?? required_error ?? ctx.defaultError
            };
        }
        if (iss.code !== "invalid_type") return {
            message: ctx.defaultError
        };
        return {
            message: message ?? invalid_type_error ?? ctx.defaultError
        };
    };
    return {
        errorMap: customMap,
        description
    };
}
class ZodType {
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParsedType"])(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParsedType"])(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
        };
    }
    _processInputParams(input) {
        return {
            status: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"](),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParsedType"])(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent
            }
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAsync"])(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        const ctx = {
            common: {
                issues: [],
                async: params?.async ?? false,
                contextualErrorMap: params?.errorMap
            },
            path: params?.path || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParsedType"])(data)
        };
        const result = this._parseSync({
            data,
            path: ctx.path,
            parent: ctx
        });
        return handleResult(ctx, result);
    }
    "~validate"(data) {
        const ctx = {
            common: {
                issues: [],
                async: !!this["~standard"].async
            },
            path: [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParsedType"])(data)
        };
        if (!this["~standard"].async) {
            try {
                const result = this._parseSync({
                    data,
                    path: [],
                    parent: ctx
                });
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValid"])(result) ? {
                    value: result.value
                } : {
                    issues: ctx.common.issues
                };
            } catch (err) {
                if (err?.message?.toLowerCase()?.includes("encountered")) {
                    this["~standard"].async = true;
                }
                ctx.common = {
                    issues: [],
                    async: true
                };
            }
        }
        return this._parseAsync({
            data,
            path: [],
            parent: ctx
        }).then((result)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValid"])(result) ? {
                value: result.value
            } : {
                issues: ctx.common.issues
            });
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params?.errorMap,
                async: true
            },
            path: params?.path || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParsedType"])(data)
        };
        const maybeAsyncResult = this._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
        const result = await ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAsync"])(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val)=>{
            if (typeof message === "string" || typeof message === "undefined") {
                return {
                    message
                };
            } else if (typeof message === "function") {
                return message(val);
            } else {
                return message;
            }
        };
        return this._refinement((val, ctx)=>{
            const result = check(val);
            const setError = ()=>ctx.addIssue({
                    code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].custom,
                    ...getIssueProperties(val)
                });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data)=>{
                    if (!data) {
                        setError();
                        return false;
                    } else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            } else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx)=>{
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
                return false;
            } else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "refinement",
                refinement
            }
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    constructor(def){
        /** Alias of safeParseAsync */ this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
            version: 1,
            vendor: "zod",
            validate: (data)=>this["~validate"](data)
        };
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([
            this,
            option
        ], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "transform",
                transform
            }
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def)
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    readonly() {
        return ZodReadonly.create(this);
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[0-9a-z]+$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
// const uuidRegex =
//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
const nanoidRegex = /^[a-z0-9_-]{21}$/i;
const jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
//old email regex
// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
// eslint-disable-next-line
// const emailRegex =
//   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
// const emailRegex =
//   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
// const emailRegex =
//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
// const emailRegex =
//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
// faster, simpler, safer
const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
const ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
// const ipv6Regex =
// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
const ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
const ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript
const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
// https://base64.guru/standards/base64url
const base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
// simple
// const dateRegexSource = `\\d{4}-\\d{2}-\\d{2}`;
// no leap year validation
// const dateRegexSource = `\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\d|2\\d))`;
// with leap year validation
const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
const dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
    let secondsRegexSource = `[0-5]\\d`;
    if (args.precision) {
        secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
    } else if (args.precision == null) {
        secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
    }
    const secondsQuantifier = args.precision ? "+" : "?"; // require seconds if precision is nonzero
    return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
    return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
    const opts = [];
    opts.push(args.local ? `Z?` : `Z`);
    if (args.offset) opts.push(`([+-]\\d{2}:?\\d{2})`);
    regex = `${regex}(${opts.join("|")})`;
    return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
    }
    return false;
}
function isValidJWT(jwt, alg) {
    if (!jwtRegex.test(jwt)) return false;
    try {
        const [header] = jwt.split(".");
        if (!header) return false;
        // Convert base64url to base64
        const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
        const decoded = JSON.parse(atob(base64));
        if (typeof decoded !== "object" || decoded === null) return false;
        if ("typ" in decoded && decoded?.typ !== "JWT") return false;
        if (!decoded.alg) return false;
        if (alg && decoded.alg !== alg) return false;
        return true;
    } catch  {
        return false;
    }
}
function isValidCidr(ip, version) {
    if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
        return true;
    }
    return false;
}
class ZodString extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].string) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].string,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        const status = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"]();
        let ctx = undefined;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message
                        });
                    } else if (tooSmall) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message
                        });
                    }
                    status.dirty();
                }
            } else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "email",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "emoji") {
                if (!emojiRegex) {
                    emojiRegex = new RegExp(_emojiRegex, "u");
                }
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "emoji",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "uuid",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "nanoid") {
                if (!nanoidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "nanoid",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "cuid",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "cuid2",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "ulid",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "url") {
                try {
                    new URL(input.data);
                } catch  {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "url",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "regex",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "trim") {
                input.data = input.data.trim();
            } else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        validation: {
                            includes: check.value,
                            position: check.position
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "toLowerCase") {
                input.data = input.data.toLowerCase();
            } else if (check.kind === "toUpperCase") {
                input.data = input.data.toUpperCase();
            } else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        validation: {
                            startsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        validation: {
                            endsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        validation: "datetime",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "date") {
                const regex = dateRegex;
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        validation: "date",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "time") {
                const regex = timeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        validation: "time",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "duration") {
                if (!durationRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "duration",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "ip",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "jwt") {
                if (!isValidJWT(input.data, check.alg)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "jwt",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cidr") {
                if (!isValidCidr(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "cidr",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "base64") {
                if (!base64Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "base64",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "base64url") {
                if (!base64urlRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        validation: "base64url",
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _regex(regex, validation, message) {
        return this.refinement((data)=>regex.test(data), {
            validation,
            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_string,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    email(message) {
        return this._addCheck({
            kind: "email",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    url(message) {
        return this._addCheck({
            kind: "url",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    emoji(message) {
        return this._addCheck({
            kind: "emoji",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    uuid(message) {
        return this._addCheck({
            kind: "uuid",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    nanoid(message) {
        return this._addCheck({
            kind: "nanoid",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    cuid(message) {
        return this._addCheck({
            kind: "cuid",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    cuid2(message) {
        return this._addCheck({
            kind: "cuid2",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    ulid(message) {
        return this._addCheck({
            kind: "ulid",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    base64(message) {
        return this._addCheck({
            kind: "base64",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    base64url(message) {
        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames
        return this._addCheck({
            kind: "base64url",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    jwt(options) {
        return this._addCheck({
            kind: "jwt",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(options)
        });
    }
    ip(options) {
        return this._addCheck({
            kind: "ip",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(options)
        });
    }
    cidr(options) {
        return this._addCheck({
            kind: "cidr",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(options)
        });
    }
    datetime(options) {
        if (typeof options === "string") {
            return this._addCheck({
                kind: "datetime",
                precision: null,
                offset: false,
                local: false,
                message: options
            });
        }
        return this._addCheck({
            kind: "datetime",
            precision: typeof options?.precision === "undefined" ? null : options?.precision,
            offset: options?.offset ?? false,
            local: options?.local ?? false,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(options?.message)
        });
    }
    date(message) {
        return this._addCheck({
            kind: "date",
            message
        });
    }
    time(options) {
        if (typeof options === "string") {
            return this._addCheck({
                kind: "time",
                precision: null,
                message: options
            });
        }
        return this._addCheck({
            kind: "time",
            precision: typeof options?.precision === "undefined" ? null : options?.precision,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(options?.message)
        });
    }
    duration(message) {
        return this._addCheck({
            kind: "duration",
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options?.position,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(options?.message)
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message)
        });
    }
    /**
     * Equivalent to `.min(1)`
     */ nonempty(message) {
        return this.min(1, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message));
    }
    trim() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "trim"
                }
            ]
        });
    }
    toLowerCase() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "toLowerCase"
                }
            ]
        });
    }
    toUpperCase() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "toUpperCase"
                }
            ]
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch)=>ch.kind === "datetime");
    }
    get isDate() {
        return !!this._def.checks.find((ch)=>ch.kind === "date");
    }
    get isTime() {
        return !!this._def.checks.find((ch)=>ch.kind === "time");
    }
    get isDuration() {
        return !!this._def.checks.find((ch)=>ch.kind === "duration");
    }
    get isEmail() {
        return !!this._def.checks.find((ch)=>ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch)=>ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch)=>ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "uuid");
    }
    get isNANOID() {
        return !!this._def.checks.find((ch)=>ch.kind === "nanoid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch)=>ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch)=>ch.kind === "ip");
    }
    get isCIDR() {
        return !!this._def.checks.find((ch)=>ch.kind === "cidr");
    }
    get isBase64() {
        return !!this._def.checks.find((ch)=>ch.kind === "base64");
    }
    get isBase64url() {
        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames
        return !!this._def.checks.find((ch)=>ch.kind === "base64url");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params)=>{
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: params?.coerce ?? false,
        ...processCreateParams(params)
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / 10 ** decCount;
}
class ZodNumber extends ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].number) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].number,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        let ctx = undefined;
        const status = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"]();
        for (const check of this._def.checks){
            if (check.kind === "int") {
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].not_finite,
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch)=>ch.kind === "int" || ch.kind === "multipleOf" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].isInteger(ch.value));
    }
    get isFinite() {
        let max = null;
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
                return true;
            } else if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            } else if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params)=>{
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: params?.coerce || false,
        ...processCreateParams(params)
    });
};
class ZodBigInt extends ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) {
            try {
                input.data = BigInt(input.data);
            } catch  {
                return this._getInvalidInput(input);
            }
        }
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].bigint) {
            return this._getInvalidInput(input);
        }
        let ctx = undefined;
        const status = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"]();
        for (const check of this._def.checks){
            if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
            expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].bigint,
            received: ctx.parsedType
        });
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
    }
    gte(value, message) {
        return this.setLimit("min", value, true, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params)=>{
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: params?.coerce ?? false,
        ...processCreateParams(params)
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].boolean) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].boolean,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(input.data);
    }
}
ZodBoolean.create = (params)=>{
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: params?.coerce || false,
        ...processCreateParams(params)
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].date) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].date,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        if (Number.isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_date
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        const status = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"]();
        let ctx = undefined;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime())
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params)=>{
    return new ZodDate({
        checks: [],
        coerce: params?.coerce || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].symbol) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].symbol,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(input.data);
    }
}
ZodSymbol.create = (params)=>{
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].undefined) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].undefined,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(input.data);
    }
}
ZodUndefined.create = (params)=>{
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].null) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].null,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(input.data);
    }
}
ZodNull.create = (params)=>{
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
    });
};
class ZodAny extends ZodType {
    constructor(){
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(input.data);
    }
}
ZodAny.create = (params)=>{
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
    });
};
class ZodUnknown extends ZodType {
    constructor(){
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(input.data);
    }
}
ZodUnknown.create = (params)=>{
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
            expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].never,
            received: ctx.parsedType
        });
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
    }
}
ZodNever.create = (params)=>{
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].undefined) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].void,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(input.data);
    }
}
ZodVoid.create = (params)=>{
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].array) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].array,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                    code: tooBig ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small,
                    minimum: tooSmall ? def.exactLength.value : undefined,
                    maximum: tooBig ? def.exactLength.value : undefined,
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                    code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                    code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all([
                ...ctx.data
            ].map((item, i)=>{
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result)=>{
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"].mergeArray(status, result);
            });
        }
        const result = [
            ...ctx.data
        ].map((item, i)=>{
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"].mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: {
                value: minLength,
                message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
            }
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: {
                value: maxLength,
                message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
            }
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: {
                value: len,
                message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
            }
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params)=>{
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for(const key in schema.shape){
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: ()=>newShape
        });
    } else if (schema instanceof ZodArray) {
        return new ZodArray({
            ...schema._def,
            type: deepPartialify(schema.element)
        });
    } else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item)=>deepPartialify(item)));
    } else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor(){
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */ this.nonstrict = this.passthrough;
        // extend<
        //   Augmentation extends ZodRawShape,
        //   NewOutput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   }>,
        //   NewInput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }>
        // >(
        //   augmentation: Augmentation
        // ): ZodObject<
        //   extendShape<T, Augmentation>,
        //   UnknownKeys,
        //   Catchall,
        //   NewOutput,
        //   NewInput
        // > {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: () => ({
        //       ...this._def.shape(),
        //       ...augmentation,
        //     }),
        //   }) as any;
        // }
        /**
         * @deprecated Use `.extend` instead
         *  */ this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null) return this._cached;
        const shape = this._def.shape();
        const keys = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectKeys(shape);
        this._cached = {
            shape,
            keys
        };
        return this._cached;
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].object) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].object,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
            for(const key in ctx.data){
                if (!shapeKeys.includes(key)) {
                    extraKeys.push(key);
                }
            }
        }
        const pairs = [];
        for (const key of shapeKeys){
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: {
                    status: "valid",
                    value: key
                },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys){
                    pairs.push({
                        key: {
                            status: "valid",
                            value: key
                        },
                        value: {
                            status: "valid",
                            value: ctx.data[key]
                        }
                    });
                }
            } else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].unrecognized_keys,
                        keys: extraKeys
                    });
                    status.dirty();
                }
            } else if (unknownKeys === "strip") {} else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        } else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys){
                const value = ctx.data[key];
                pairs.push({
                    key: {
                        status: "valid",
                        value: key
                    },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve().then(async ()=>{
                const syncPairs = [];
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    syncPairs.push({
                        key,
                        value,
                        alwaysSet: pair.alwaysSet
                    });
                }
                return syncPairs;
            }).then((syncPairs)=>{
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"].mergeObjectSync(status, syncPairs);
            });
        } else {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"].mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...message !== undefined ? {
                errorMap: (issue, ctx)=>{
                    const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;
                    if (issue.code === "unrecognized_keys") return {
                        message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].errToObj(message).message ?? defaultError
                    };
                    return {
                        message: defaultError
                    };
                }
            } : {}
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip"
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough"
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: ()=>({
                    ...this._def.shape(),
                    ...augmentation
                })
        });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */ merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: ()=>({
                    ...this._def.shape(),
                    ...merging._def.shape()
                }),
            typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({
            [key]: schema
        });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index
        });
    }
    pick(mask) {
        const shape = {};
        for (const key of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectKeys(mask)){
            if (mask[key] && this.shape[key]) {
                shape[key] = this.shape[key];
            }
        }
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    omit(mask) {
        const shape = {};
        for (const key of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectKeys(this.shape)){
            if (!mask[key]) {
                shape[key] = this.shape[key];
            }
        }
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    /**
     * @deprecated
     */ deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        for (const key of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectKeys(this.shape)){
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
                newShape[key] = fieldSchema;
            } else {
                newShape[key] = fieldSchema.optional();
            }
        }
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    required(mask) {
        const newShape = {};
        for (const key of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectKeys(this.shape)){
            if (mask && !mask[key]) {
                newShape[key] = this.shape[key];
            } else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while(newField instanceof ZodOptional){
                    newField = newField._def.innerType;
                }
                newShape[key] = newField;
            }
        }
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    keyof() {
        return createZodEnum(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.strictCreate = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.lazycreate = (shape, params)=>{
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results){
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results){
                if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            // return invalid
            const unionErrors = results.map((result)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodError"](result.ctx.common.issues));
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_union,
                unionErrors
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option)=>{
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx
                    }),
                    ctx: childCtx
                };
            })).then(handleResults);
        } else {
            let dirty = undefined;
            const issues = [];
            for (const option of options){
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                });
                if (result.status === "valid") {
                    return result;
                } else if (result.status === "dirty" && !dirty) {
                    dirty = {
                        result,
                        ctx: childCtx
                    };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodError"](issues));
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_union,
                unionErrors
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params)=>{
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
    });
};
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////                                 //////////
//////////      ZodDiscriminatedUnion      //////////
//////////                                 //////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
const getDiscriminator = (type)=>{
    if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
    } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
    } else if (type instanceof ZodLiteral) {
        return [
            type.value
        ];
    } else if (type instanceof ZodEnum) {
        return type.options;
    } else if (type instanceof ZodNativeEnum) {
        // eslint-disable-next-line ban/ban
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectValues(type.enum);
    } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
    } else if (type instanceof ZodUndefined) {
        return [
            undefined
        ];
    } else if (type instanceof ZodNull) {
        return [
            null
        ];
    } else if (type instanceof ZodOptional) {
        return [
            undefined,
            ...getDiscriminator(type.unwrap())
        ];
    } else if (type instanceof ZodNullable) {
        return [
            null,
            ...getDiscriminator(type.unwrap())
        ];
    } else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
    } else {
        return [];
    }
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].object) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].object,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [
                    discriminator
                ]
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        } else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */ static create(discriminator, options, params) {
        // Get all the valid discriminator values
        const optionsMap = new Map();
        // try {
        for (const type of options){
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues.length) {
                throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues){
                if (optionsMap.has(value)) {
                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                }
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params)
        });
    }
}
function mergeValues(a, b) {
    const aType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParsedType"])(a);
    const bType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParsedType"])(b);
    if (a === b) {
        return {
            valid: true,
            data: a
        };
    } else if (aType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].object && bType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].object) {
        const bKeys = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectKeys(b);
        const sharedKeys = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);
        const newObj = {
            ...a,
            ...b
        };
        for (const key of sharedKeys){
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return {
                    valid: false
                };
            }
            newObj[key] = sharedValue.data;
        }
        return {
            valid: true,
            data: newObj
        };
    } else if (aType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].array && bType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].array) {
        if (a.length !== b.length) {
            return {
                valid: false
            };
        }
        const newArray = [];
        for(let index = 0; index < a.length; index++){
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return {
                    valid: false
                };
            }
            newArray.push(sharedValue.data);
        }
        return {
            valid: true,
            data: newArray
        };
    } else if (aType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].date && bType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].date && +a === +b) {
        return {
            valid: true,
            data: a
        };
    } else {
        return {
            valid: false
        };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAborted"])(parsedLeft) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAborted"])(parsedRight)) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                    code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_intersection_types
                });
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isDirty"])(parsedLeft) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isDirty"])(parsedRight)) {
                status.dirty();
            }
            return {
                status: status.value,
                value: merged.data
            };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                })
            ]).then(([left, right])=>handleParsed(left, right));
        } else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }));
        }
    }
}
ZodIntersection.create = (left, right, params)=>{
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].array) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].array,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        if (ctx.data.length < this._def.items.length) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            status.dirty();
        }
        const items = [
            ...ctx.data
        ].map((item, itemIndex)=>{
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema) return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x)=>!!x); // filter nulls
        if (ctx.common.async) {
            return Promise.all(items).then((results)=>{
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"].mergeArray(status, results);
            });
        } else {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"].mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest
        });
    }
}
ZodTuple.create = (schemas, params)=>{
    if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].object) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].object,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for(const key in ctx.data){
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
                alwaysSet: key in ctx.data
            });
        }
        if (ctx.common.async) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"].mergeObjectAsync(status, pairs);
        } else {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"].mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third)
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second)
        });
    }
}
class ZodMap extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].map) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].map,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [
            ...ctx.data.entries()
        ].map(([key, value], index)=>{
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [
                    index,
                    "key"
                ])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [
                    index,
                    "value"
                ]))
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async ()=>{
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return {
                    status: status.value,
                    value: finalMap
                };
            });
        } else {
            const finalMap = new Map();
            for (const pair of pairs){
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return {
                status: status.value,
                value: finalMap
            };
        }
    }
}
ZodMap.create = (keyType, valueType, params)=>{
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].set) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].set,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                    code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                    code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements){
                if (element.status === "aborted") return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                if (element.status === "dirty") status.dirty();
                parsedSet.add(element.value);
            }
            return {
                status: status.value,
                value: parsedSet
            };
        }
        const elements = [
            ...ctx.data.values()
        ].map((item, i)=>valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements)=>finalizeSet(elements));
        } else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: {
                value: minSize,
                message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
            }
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: {
                value: maxSize,
                message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$errorUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["errorUtil"].toString(message)
            }
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params)=>{
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
    });
};
class ZodFunction extends ZodType {
    constructor(){
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].function) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].function,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        function makeArgsIssue(args, error) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["makeIssue"])({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getErrorMap"])(),
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__defaultErrorMap$3e$__["defaultErrorMap"]
                ].filter((x)=>!!x),
                issueData: {
                    code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_arguments,
                    argumentsError: error
                }
            });
        }
        function makeReturnsIssue(returns, error) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["makeIssue"])({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getErrorMap"])(),
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$locales$2f$en$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__default__as__defaultErrorMap$3e$__["defaultErrorMap"]
                ].filter((x)=>!!x),
                issueData: {
                    code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_return_type,
                    returnTypeError: error
                }
            });
        }
        const params = {
            errorMap: ctx.common.contextualErrorMap
        };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(async function(...args) {
                const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodError"]([]);
                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e)=>{
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await Reflect.apply(fn, this, parsedArgs);
                const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e)=>{
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        } else {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(function(...args) {
                const parsedArgs = me._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodError"]([
                        makeArgsIssue(args, parsedArgs.error)
                    ]);
                }
                const result = Reflect.apply(fn, this, parsedArgs.data);
                const parsedReturns = me._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodError"]([
                        makeReturnsIssue(result, parsedReturns.error)
                    ]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params)
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
}
ZodLazy.create = (getter, params)=>{
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                received: ctx.data,
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_literal,
                expected: this._def.value
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        return {
            status: "valid",
            value: input.data
        };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params)=>{
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
    });
}
class ZodEnum extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].joinValues(expectedValues),
                received: ctx.parsedType,
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        if (!this._cache) {
            this._cache = new Set(this._def.values);
        }
        if (!this._cache.has(input.data)) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                received: ctx.data,
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_enum_value,
                options: expectedValues
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    extract(values, newDef = this._def) {
        return ZodEnum.create(values, {
            ...this._def,
            ...newDef
        });
    }
    exclude(values, newDef = this._def) {
        return ZodEnum.create(this.options.filter((opt)=>!values.includes(opt)), {
            ...this._def,
            ...newDef
        });
    }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    _parse(input) {
        const nativeEnumValues = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].string && ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].number) {
            const expectedValues = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectValues(nativeEnumValues);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].joinValues(expectedValues),
                received: ctx.parsedType,
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        if (!this._cache) {
            this._cache = new Set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].getValidEnumValues(this._def.values));
        }
        if (!this._cache.has(input.data)) {
            const expectedValues = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].objectValues(nativeEnumValues);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                received: ctx.data,
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_enum_value,
                options: expectedValues
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
ZodNativeEnum.create = (values, params)=>{
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].promise && ctx.common.async === false) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].promise,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        const promisified = ctx.parsedType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].promise ? ctx.data : Promise.resolve(ctx.data);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(promisified.then((data)=>{
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap
            });
        }));
    }
}
ZodPromise.create = (schema, params)=>{
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
            addIssue: (arg)=>{
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                } else {
                    status.dirty();
                }
            },
            get path () {
                return ctx.path;
            }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.async) {
                return Promise.resolve(processed).then(async (processed)=>{
                    if (status.value === "aborted") return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                    const result = await this._def.schema._parseAsync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx
                    });
                    if (result.status === "aborted") return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                    if (result.status === "dirty") return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DIRTY"])(result.value);
                    if (status.value === "dirty") return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DIRTY"])(result.value);
                    return result;
                });
            } else {
                if (status.value === "aborted") return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                const result = this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx
                });
                if (result.status === "aborted") return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                if (result.status === "dirty") return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DIRTY"])(result.value);
                if (status.value === "dirty") return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DIRTY"])(result.value);
                return result;
            }
        }
        if (effect.type === "refinement") {
            const executeRefinement = (acc)=>{
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inner.status === "aborted") return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                if (inner.status === "dirty") status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return {
                    status: status.value,
                    value: inner.value
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((inner)=>{
                    if (inner.status === "aborted") return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                    if (inner.status === "dirty") status.dirty();
                    return executeRefinement(inner.value).then(()=>{
                        return {
                            status: status.value,
                            value: inner.value
                        };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValid"])(base)) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return {
                    status: status.value,
                    value: result
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((base)=>{
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValid"])(base)) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({
                            status: status.value,
                            value: result
                        }));
                });
            }
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"].assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params)=>{
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params)=>{
    return new ZodEffects({
        schema,
        effect: {
            type: "preprocess",
            transform: preprocess
        },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
    });
};
;
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].undefined) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(undefined);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params)=>{
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].null) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"])(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params)=>{
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params)=>{
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : ()=>params.default,
        ...processCreateParams(params)
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        // newCtx is used to not collect issues from inner types in ctx
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: []
            }
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx
            }
        });
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAsync"])(result)) {
            return result.then((result)=>{
                return {
                    status: "valid",
                    value: result.status === "valid" ? result.value : this._def.catchValue({
                        get error () {
                            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodError"](newCtx.common.issues);
                        },
                        input: newCtx.data
                    })
                };
            });
        } else {
            return {
                status: "valid",
                value: result.status === "valid" ? result.value : this._def.catchValue({
                    get error () {
                        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodError"](newCtx.common.issues);
                    },
                    input: newCtx.data
                })
            };
        }
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params)=>{
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : ()=>params.catch,
        ...processCreateParams(params)
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].nan) {
            const ctx = this._getOrReturnCtx(input);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"])(ctx, {
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"].invalid_type,
                expected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"].nan,
                received: ctx.parsedType
            });
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
        }
        return {
            status: "valid",
            value: input.data
        };
    }
}
ZodNaN.create = (params)=>{
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async ()=>{
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inResult.status === "aborted") return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
                if (inResult.status === "dirty") {
                    status.dirty();
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DIRTY"])(inResult.value);
                } else {
                    return this._def.out._parseAsync({
                        data: inResult.value,
                        path: ctx.path,
                        parent: ctx
                    });
                }
            };
            return handleAsync();
        } else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
            if (inResult.status === "aborted") return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value
                };
            } else {
                return this._def.out._parseSync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx
                });
            }
        }
    }
    static create(a, b) {
        return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
    }
}
class ZodReadonly extends ZodType {
    _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValid"])(data)) {
                data.value = Object.freeze(data.value);
            }
            return data;
        };
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAsync"])(result) ? result.then((data)=>freeze(data)) : freeze(result);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodReadonly.create = (type, params)=>{
    return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
    });
};
////////////////////////////////////////
////////////////////////////////////////
//////////                    //////////
//////////      z.custom      //////////
//////////                    //////////
////////////////////////////////////////
////////////////////////////////////////
function cleanParams(params, data) {
    const p = typeof params === "function" ? params(data) : typeof params === "string" ? {
        message: params
    } : params;
    const p2 = typeof p === "string" ? {
        message: p
    } : p;
    return p2;
}
function custom(check, _params = {}, /**
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */ fatal) {
    if (check) return ZodAny.create().superRefine((data, ctx)=>{
        const r = check(data);
        if (r instanceof Promise) {
            return r.then((r)=>{
                if (!r) {
                    const params = cleanParams(_params, data);
                    const _fatal = params.fatal ?? fatal ?? true;
                    ctx.addIssue({
                        code: "custom",
                        ...params,
                        fatal: _fatal
                    });
                }
            });
        }
        if (!r) {
            const params = cleanParams(_params, data);
            const _fatal = params.fatal ?? fatal ?? true;
            ctx.addIssue({
                code: "custom",
                ...params,
                fatal: _fatal
            });
        }
        return;
    });
    return ZodAny.create();
}
;
const late = {
    object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
// requires TS 4.4+
class Class {
    constructor(..._){}
}
const instanceOfType = (// const instanceOfType = <T extends new (...args: any[]) => any>(
cls, params = {
    message: `Input not instance of ${cls.name}`
})=>custom((data)=>data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = ()=>stringType().optional();
const onumber = ()=>numberType().optional();
const oboolean = ()=>booleanType().optional();
const coerce = {
    string: (arg)=>ZodString.create({
            ...arg,
            coerce: true
        }),
    number: (arg)=>ZodNumber.create({
            ...arg,
            coerce: true
        }),
    boolean: (arg)=>ZodBoolean.create({
            ...arg,
            coerce: true
        }),
    bigint: (arg)=>ZodBigInt.create({
            ...arg,
            coerce: true
        }),
    date: (arg)=>ZodDate.create({
            ...arg,
            coerce: true
        })
};
;
const NEVER = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"];
}}),
"[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BRAND": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BRAND"]),
    "DIRTY": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DIRTY"]),
    "EMPTY_PATH": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EMPTY_PATH"]),
    "INVALID": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["INVALID"]),
    "NEVER": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NEVER"]),
    "OK": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OK"]),
    "ParseStatus": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ParseStatus"]),
    "Schema": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Schema"]),
    "ZodAny": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodAny"]),
    "ZodArray": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodArray"]),
    "ZodBigInt": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodBigInt"]),
    "ZodBoolean": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodBoolean"]),
    "ZodBranded": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodBranded"]),
    "ZodCatch": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodCatch"]),
    "ZodDate": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodDate"]),
    "ZodDefault": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodDefault"]),
    "ZodDiscriminatedUnion": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodDiscriminatedUnion"]),
    "ZodEffects": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodEffects"]),
    "ZodEnum": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodEnum"]),
    "ZodError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodError"]),
    "ZodFirstPartyTypeKind": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodFirstPartyTypeKind"]),
    "ZodFunction": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodFunction"]),
    "ZodIntersection": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIntersection"]),
    "ZodIssueCode": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodIssueCode"]),
    "ZodLazy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodLazy"]),
    "ZodLiteral": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodLiteral"]),
    "ZodMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodMap"]),
    "ZodNaN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodNaN"]),
    "ZodNativeEnum": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodNativeEnum"]),
    "ZodNever": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodNever"]),
    "ZodNull": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodNull"]),
    "ZodNullable": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodNullable"]),
    "ZodNumber": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodNumber"]),
    "ZodObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodObject"]),
    "ZodOptional": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodOptional"]),
    "ZodParsedType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodParsedType"]),
    "ZodPipeline": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodPipeline"]),
    "ZodPromise": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodPromise"]),
    "ZodReadonly": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodReadonly"]),
    "ZodRecord": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodRecord"]),
    "ZodSchema": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodSchema"]),
    "ZodSet": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodSet"]),
    "ZodString": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodString"]),
    "ZodSymbol": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodSymbol"]),
    "ZodTransformer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodTransformer"]),
    "ZodTuple": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodTuple"]),
    "ZodType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodType"]),
    "ZodUndefined": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodUndefined"]),
    "ZodUnion": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodUnion"]),
    "ZodUnknown": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodUnknown"]),
    "ZodVoid": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodVoid"]),
    "addIssueToContext": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addIssueToContext"]),
    "any": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["any"]),
    "array": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["array"]),
    "bigint": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bigint"]),
    "boolean": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["boolean"]),
    "coerce": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["coerce"]),
    "custom": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["custom"]),
    "date": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["date"]),
    "datetimeRegex": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["datetimeRegex"]),
    "defaultErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultErrorMap"]),
    "discriminatedUnion": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["discriminatedUnion"]),
    "effect": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["effect"]),
    "enum": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["enum"]),
    "function": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["function"]),
    "getErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getErrorMap"]),
    "getParsedType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParsedType"]),
    "instanceof": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["instanceof"]),
    "intersection": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["intersection"]),
    "isAborted": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAborted"]),
    "isAsync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAsync"]),
    "isDirty": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isDirty"]),
    "isValid": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValid"]),
    "late": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["late"]),
    "lazy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lazy"]),
    "literal": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["literal"]),
    "makeIssue": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["makeIssue"]),
    "map": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["map"]),
    "nan": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nan"]),
    "nativeEnum": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nativeEnum"]),
    "never": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["never"]),
    "null": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["null"]),
    "nullable": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nullable"]),
    "number": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["number"]),
    "object": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["object"]),
    "objectUtil": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["objectUtil"]),
    "oboolean": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["oboolean"]),
    "onumber": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["onumber"]),
    "optional": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["optional"]),
    "ostring": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ostring"]),
    "pipeline": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pipeline"]),
    "preprocess": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["preprocess"]),
    "promise": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["promise"]),
    "quotelessJson": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["quotelessJson"]),
    "record": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["record"]),
    "set": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"]),
    "setErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setErrorMap"]),
    "strictObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["strictObject"]),
    "string": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["string"]),
    "symbol": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["symbol"]),
    "transformer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["transformer"]),
    "tuple": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tuple"]),
    "undefined": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["undefined"]),
    "union": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["union"]),
    "unknown": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unknown"]),
    "util": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["util"]),
    "void": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["void"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$parseUtil$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/helpers/parseUtil.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$typeAliases$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/helpers/typeAliases.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$helpers$2f$util$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/helpers/util.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$ZodError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/ZodError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BRAND": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BRAND"]),
    "DIRTY": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DIRTY"]),
    "EMPTY_PATH": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["EMPTY_PATH"]),
    "INVALID": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["INVALID"]),
    "NEVER": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["NEVER"]),
    "OK": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["OK"]),
    "ParseStatus": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ParseStatus"]),
    "Schema": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Schema"]),
    "ZodAny": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodAny"]),
    "ZodArray": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodArray"]),
    "ZodBigInt": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodBigInt"]),
    "ZodBoolean": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodBoolean"]),
    "ZodBranded": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodBranded"]),
    "ZodCatch": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodCatch"]),
    "ZodDate": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodDate"]),
    "ZodDefault": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodDefault"]),
    "ZodDiscriminatedUnion": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodDiscriminatedUnion"]),
    "ZodEffects": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodEffects"]),
    "ZodEnum": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodEnum"]),
    "ZodError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodError"]),
    "ZodFirstPartyTypeKind": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodFirstPartyTypeKind"]),
    "ZodFunction": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodFunction"]),
    "ZodIntersection": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodIntersection"]),
    "ZodIssueCode": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodIssueCode"]),
    "ZodLazy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodLazy"]),
    "ZodLiteral": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodLiteral"]),
    "ZodMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodMap"]),
    "ZodNaN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodNaN"]),
    "ZodNativeEnum": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodNativeEnum"]),
    "ZodNever": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodNever"]),
    "ZodNull": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodNull"]),
    "ZodNullable": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodNullable"]),
    "ZodNumber": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodNumber"]),
    "ZodObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodObject"]),
    "ZodOptional": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodOptional"]),
    "ZodParsedType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodParsedType"]),
    "ZodPipeline": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodPipeline"]),
    "ZodPromise": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodPromise"]),
    "ZodReadonly": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodReadonly"]),
    "ZodRecord": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodRecord"]),
    "ZodSchema": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodSchema"]),
    "ZodSet": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodSet"]),
    "ZodString": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodString"]),
    "ZodSymbol": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodSymbol"]),
    "ZodTransformer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodTransformer"]),
    "ZodTuple": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodTuple"]),
    "ZodType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodType"]),
    "ZodUndefined": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodUndefined"]),
    "ZodUnion": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodUnion"]),
    "ZodUnknown": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodUnknown"]),
    "ZodVoid": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ZodVoid"]),
    "addIssueToContext": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["addIssueToContext"]),
    "any": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["any"]),
    "array": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["array"]),
    "bigint": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["bigint"]),
    "boolean": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["boolean"]),
    "coerce": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["coerce"]),
    "custom": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["custom"]),
    "date": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["date"]),
    "datetimeRegex": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["datetimeRegex"]),
    "defaultErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["defaultErrorMap"]),
    "discriminatedUnion": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["discriminatedUnion"]),
    "effect": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["effect"]),
    "enum": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["enum"]),
    "function": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["function"]),
    "getErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["getErrorMap"]),
    "getParsedType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["getParsedType"]),
    "instanceof": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["instanceof"]),
    "intersection": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["intersection"]),
    "isAborted": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isAborted"]),
    "isAsync": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isAsync"]),
    "isDirty": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isDirty"]),
    "isValid": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isValid"]),
    "late": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["late"]),
    "lazy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["lazy"]),
    "literal": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["literal"]),
    "makeIssue": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["makeIssue"]),
    "map": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["map"]),
    "nan": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["nan"]),
    "nativeEnum": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["nativeEnum"]),
    "never": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["never"]),
    "null": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["null"]),
    "nullable": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["nullable"]),
    "number": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["number"]),
    "object": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["object"]),
    "objectUtil": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["objectUtil"]),
    "oboolean": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["oboolean"]),
    "onumber": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["onumber"]),
    "optional": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["optional"]),
    "ostring": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ostring"]),
    "pipeline": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["pipeline"]),
    "preprocess": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["preprocess"]),
    "promise": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["promise"]),
    "quotelessJson": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["quotelessJson"]),
    "record": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["record"]),
    "set": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["set"]),
    "setErrorMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["setErrorMap"]),
    "strictObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["strictObject"]),
    "string": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["string"]),
    "symbol": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["symbol"]),
    "transformer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["transformer"]),
    "tuple": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["tuple"]),
    "undefined": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["undefined"]),
    "union": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["union"]),
    "unknown": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["unknown"]),
    "util": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["util"]),
    "void": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["void"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript) <exports>");
}}),
"[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript) <export * as z>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "z": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/external.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/clsx/dist/clsx.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "clsx": (()=>clsx),
    "default": (()=>__TURBOPACK__default__export__)
});
function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e) n += e;
    else if ("object" == typeof e) if (Array.isArray(e)) {
        var o = e.length;
        for(t = 0; t < o; t++)e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else for(f in e)e[f] && (n && (n += " "), n += f);
    return n;
}
function clsx() {
    for(var e, t, f = 0, n = "", o = arguments.length; f < o; f++)(e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
}
const __TURBOPACK__default__export__ = clsx;
}}),
"[project]/node_modules/tailwind-merge/dist/bundle-mjs.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTailwindMerge": (()=>createTailwindMerge),
    "extendTailwindMerge": (()=>extendTailwindMerge),
    "fromTheme": (()=>fromTheme),
    "getDefaultConfig": (()=>getDefaultConfig),
    "mergeConfigs": (()=>mergeConfigs),
    "twJoin": (()=>twJoin),
    "twMerge": (()=>twMerge),
    "validators": (()=>validators)
});
const CLASS_PART_SEPARATOR = '-';
const createClassGroupUtils = (config)=>{
    const classMap = createClassMap(config);
    const { conflictingClassGroups, conflictingClassGroupModifiers } = config;
    const getClassGroupId = (className)=>{
        const classParts = className.split(CLASS_PART_SEPARATOR);
        // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.
        if (classParts[0] === '' && classParts.length !== 1) {
            classParts.shift();
        }
        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
    };
    const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier)=>{
        const conflicts = conflictingClassGroups[classGroupId] || [];
        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
            return [
                ...conflicts,
                ...conflictingClassGroupModifiers[classGroupId]
            ];
        }
        return conflicts;
    };
    return {
        getClassGroupId,
        getConflictingClassGroupIds
    };
};
const getGroupRecursive = (classParts, classPartObject)=>{
    if (classParts.length === 0) {
        return classPartObject.classGroupId;
    }
    const currentClassPart = classParts[0];
    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;
    if (classGroupFromNextClassPart) {
        return classGroupFromNextClassPart;
    }
    if (classPartObject.validators.length === 0) {
        return undefined;
    }
    const classRest = classParts.join(CLASS_PART_SEPARATOR);
    return classPartObject.validators.find(({ validator })=>validator(classRest))?.classGroupId;
};
const arbitraryPropertyRegex = /^\[(.+)\]$/;
const getGroupIdForArbitraryProperty = (className)=>{
    if (arbitraryPropertyRegex.test(className)) {
        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
        const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));
        if (property) {
            // I use two dots here because one dot is used as prefix for class groups in plugins
            return 'arbitrary..' + property;
        }
    }
};
/**
 * Exported for testing only
 */ const createClassMap = (config)=>{
    const { theme, classGroups } = config;
    const classMap = {
        nextPart: new Map(),
        validators: []
    };
    for(const classGroupId in classGroups){
        processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);
    }
    return classMap;
};
const processClassesRecursively = (classGroup, classPartObject, classGroupId, theme)=>{
    classGroup.forEach((classDefinition)=>{
        if (typeof classDefinition === 'string') {
            const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);
            classPartObjectToEdit.classGroupId = classGroupId;
            return;
        }
        if (typeof classDefinition === 'function') {
            if (isThemeGetter(classDefinition)) {
                processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
                return;
            }
            classPartObject.validators.push({
                validator: classDefinition,
                classGroupId
            });
            return;
        }
        Object.entries(classDefinition).forEach(([key, classGroup])=>{
            processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);
        });
    });
};
const getPart = (classPartObject, path)=>{
    let currentClassPartObject = classPartObject;
    path.split(CLASS_PART_SEPARATOR).forEach((pathPart)=>{
        if (!currentClassPartObject.nextPart.has(pathPart)) {
            currentClassPartObject.nextPart.set(pathPart, {
                nextPart: new Map(),
                validators: []
            });
        }
        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
    });
    return currentClassPartObject;
};
const isThemeGetter = (func)=>func.isThemeGetter;
// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance
const createLruCache = (maxCacheSize)=>{
    if (maxCacheSize < 1) {
        return {
            get: ()=>undefined,
            set: ()=>{}
        };
    }
    let cacheSize = 0;
    let cache = new Map();
    let previousCache = new Map();
    const update = (key, value)=>{
        cache.set(key, value);
        cacheSize++;
        if (cacheSize > maxCacheSize) {
            cacheSize = 0;
            previousCache = cache;
            cache = new Map();
        }
    };
    return {
        get (key) {
            let value = cache.get(key);
            if (value !== undefined) {
                return value;
            }
            if ((value = previousCache.get(key)) !== undefined) {
                update(key, value);
                return value;
            }
        },
        set (key, value) {
            if (cache.has(key)) {
                cache.set(key, value);
            } else {
                update(key, value);
            }
        }
    };
};
const IMPORTANT_MODIFIER = '!';
const MODIFIER_SEPARATOR = ':';
const MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;
const createParseClassName = (config)=>{
    const { prefix, experimentalParseClassName } = config;
    /**
   * Parse class name into parts.
   *
   * Inspired by `splitAtTopLevelOnly` used in Tailwind CSS
   * @see https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js
   */ let parseClassName = (className)=>{
        const modifiers = [];
        let bracketDepth = 0;
        let parenDepth = 0;
        let modifierStart = 0;
        let postfixModifierPosition;
        for(let index = 0; index < className.length; index++){
            let currentCharacter = className[index];
            if (bracketDepth === 0 && parenDepth === 0) {
                if (currentCharacter === MODIFIER_SEPARATOR) {
                    modifiers.push(className.slice(modifierStart, index));
                    modifierStart = index + MODIFIER_SEPARATOR_LENGTH;
                    continue;
                }
                if (currentCharacter === '/') {
                    postfixModifierPosition = index;
                    continue;
                }
            }
            if (currentCharacter === '[') {
                bracketDepth++;
            } else if (currentCharacter === ']') {
                bracketDepth--;
            } else if (currentCharacter === '(') {
                parenDepth++;
            } else if (currentCharacter === ')') {
                parenDepth--;
            }
        }
        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
        const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);
        const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;
        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;
        return {
            modifiers,
            hasImportantModifier,
            baseClassName,
            maybePostfixModifierPosition
        };
    };
    if (prefix) {
        const fullPrefix = prefix + MODIFIER_SEPARATOR;
        const parseClassNameOriginal = parseClassName;
        parseClassName = (className)=>className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {
                isExternal: true,
                modifiers: [],
                hasImportantModifier: false,
                baseClassName: className,
                maybePostfixModifierPosition: undefined
            };
    }
    if (experimentalParseClassName) {
        const parseClassNameOriginal = parseClassName;
        parseClassName = (className)=>experimentalParseClassName({
                className,
                parseClassName: parseClassNameOriginal
            });
    }
    return parseClassName;
};
const stripImportantModifier = (baseClassName)=>{
    if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {
        return baseClassName.substring(0, baseClassName.length - 1);
    }
    /**
   * In Tailwind CSS v3 the important modifier was at the start of the base class name. This is still supported for legacy reasons.
   * @see https://github.com/dcastil/tailwind-merge/issues/513#issuecomment-2614029864
   */ if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {
        return baseClassName.substring(1);
    }
    return baseClassName;
};
/**
 * Sorts modifiers according to following schema:
 * - Predefined modifiers are sorted alphabetically
 * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it
 */ const createSortModifiers = (config)=>{
    const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map((modifier)=>[
            modifier,
            true
        ]));
    const sortModifiers = (modifiers)=>{
        if (modifiers.length <= 1) {
            return modifiers;
        }
        const sortedModifiers = [];
        let unsortedModifiers = [];
        modifiers.forEach((modifier)=>{
            const isPositionSensitive = modifier[0] === '[' || orderSensitiveModifiers[modifier];
            if (isPositionSensitive) {
                sortedModifiers.push(...unsortedModifiers.sort(), modifier);
                unsortedModifiers = [];
            } else {
                unsortedModifiers.push(modifier);
            }
        });
        sortedModifiers.push(...unsortedModifiers.sort());
        return sortedModifiers;
    };
    return sortModifiers;
};
const createConfigUtils = (config)=>({
        cache: createLruCache(config.cacheSize),
        parseClassName: createParseClassName(config),
        sortModifiers: createSortModifiers(config),
        ...createClassGroupUtils(config)
    });
const SPLIT_CLASSES_REGEX = /\s+/;
const mergeClassList = (classList, configUtils)=>{
    const { parseClassName, getClassGroupId, getConflictingClassGroupIds, sortModifiers } = configUtils;
    /**
   * Set of classGroupIds in following format:
   * `{importantModifier}{variantModifiers}{classGroupId}`
   * @example 'float'
   * @example 'hover:focus:bg-color'
   * @example 'md:!pr'
   */ const classGroupsInConflict = [];
    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
    let result = '';
    for(let index = classNames.length - 1; index >= 0; index -= 1){
        const originalClassName = classNames[index];
        const { isExternal, modifiers, hasImportantModifier, baseClassName, maybePostfixModifierPosition } = parseClassName(originalClassName);
        if (isExternal) {
            result = originalClassName + (result.length > 0 ? ' ' + result : result);
            continue;
        }
        let hasPostfixModifier = !!maybePostfixModifierPosition;
        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
        if (!classGroupId) {
            if (!hasPostfixModifier) {
                // Not a Tailwind class
                result = originalClassName + (result.length > 0 ? ' ' + result : result);
                continue;
            }
            classGroupId = getClassGroupId(baseClassName);
            if (!classGroupId) {
                // Not a Tailwind class
                result = originalClassName + (result.length > 0 ? ' ' + result : result);
                continue;
            }
            hasPostfixModifier = false;
        }
        const variantModifier = sortModifiers(modifiers).join(':');
        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
        const classId = modifierId + classGroupId;
        if (classGroupsInConflict.includes(classId)) {
            continue;
        }
        classGroupsInConflict.push(classId);
        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
        for(let i = 0; i < conflictGroups.length; ++i){
            const group = conflictGroups[i];
            classGroupsInConflict.push(modifierId + group);
        }
        // Tailwind class not in conflict
        result = originalClassName + (result.length > 0 ? ' ' + result : result);
    }
    return result;
};
/**
 * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.
 *
 * Specifically:
 * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js
 * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts
 *
 * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)
 */ function twJoin() {
    let index = 0;
    let argument;
    let resolvedValue;
    let string = '';
    while(index < arguments.length){
        if (argument = arguments[index++]) {
            if (resolvedValue = toValue(argument)) {
                string && (string += ' ');
                string += resolvedValue;
            }
        }
    }
    return string;
}
const toValue = (mix)=>{
    if (typeof mix === 'string') {
        return mix;
    }
    let resolvedValue;
    let string = '';
    for(let k = 0; k < mix.length; k++){
        if (mix[k]) {
            if (resolvedValue = toValue(mix[k])) {
                string && (string += ' ');
                string += resolvedValue;
            }
        }
    }
    return string;
};
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
    let configUtils;
    let cacheGet;
    let cacheSet;
    let functionToCall = initTailwindMerge;
    function initTailwindMerge(classList) {
        const config = createConfigRest.reduce((previousConfig, createConfigCurrent)=>createConfigCurrent(previousConfig), createConfigFirst());
        configUtils = createConfigUtils(config);
        cacheGet = configUtils.cache.get;
        cacheSet = configUtils.cache.set;
        functionToCall = tailwindMerge;
        return tailwindMerge(classList);
    }
    function tailwindMerge(classList) {
        const cachedResult = cacheGet(classList);
        if (cachedResult) {
            return cachedResult;
        }
        const result = mergeClassList(classList, configUtils);
        cacheSet(classList, result);
        return result;
    }
    return function callTailwindMerge() {
        return functionToCall(twJoin.apply(null, arguments));
    };
}
const fromTheme = (key)=>{
    const themeGetter = (theme)=>theme[key] || [];
    themeGetter.isThemeGetter = true;
    return themeGetter;
};
const arbitraryValueRegex = /^\[(?:(\w[\w-]*):)?(.+)\]$/i;
const arbitraryVariableRegex = /^\((?:(\w[\w-]*):)?(.+)\)$/i;
const fractionRegex = /^\d+\/\d+$/;
const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\(.+\)$/;
// Shadow always begins with x and y offset separated by underscore optionally prepended by inset
const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
const isFraction = (value)=>fractionRegex.test(value);
const isNumber = (value)=>!!value && !Number.isNaN(Number(value));
const isInteger = (value)=>!!value && Number.isInteger(Number(value));
const isPercent = (value)=>value.endsWith('%') && isNumber(value.slice(0, -1));
const isTshirtSize = (value)=>tshirtUnitRegex.test(value);
const isAny = ()=>true;
const isLengthOnly = (value)=>// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);
const isNever = ()=>false;
const isShadow = (value)=>shadowRegex.test(value);
const isImage = (value)=>imageRegex.test(value);
const isAnyNonArbitrary = (value)=>!isArbitraryValue(value) && !isArbitraryVariable(value);
const isArbitrarySize = (value)=>getIsArbitraryValue(value, isLabelSize, isNever);
const isArbitraryValue = (value)=>arbitraryValueRegex.test(value);
const isArbitraryLength = (value)=>getIsArbitraryValue(value, isLabelLength, isLengthOnly);
const isArbitraryNumber = (value)=>getIsArbitraryValue(value, isLabelNumber, isNumber);
const isArbitraryPosition = (value)=>getIsArbitraryValue(value, isLabelPosition, isNever);
const isArbitraryImage = (value)=>getIsArbitraryValue(value, isLabelImage, isImage);
const isArbitraryShadow = (value)=>getIsArbitraryValue(value, isLabelShadow, isShadow);
const isArbitraryVariable = (value)=>arbitraryVariableRegex.test(value);
const isArbitraryVariableLength = (value)=>getIsArbitraryVariable(value, isLabelLength);
const isArbitraryVariableFamilyName = (value)=>getIsArbitraryVariable(value, isLabelFamilyName);
const isArbitraryVariablePosition = (value)=>getIsArbitraryVariable(value, isLabelPosition);
const isArbitraryVariableSize = (value)=>getIsArbitraryVariable(value, isLabelSize);
const isArbitraryVariableImage = (value)=>getIsArbitraryVariable(value, isLabelImage);
const isArbitraryVariableShadow = (value)=>getIsArbitraryVariable(value, isLabelShadow, true);
// Helpers
const getIsArbitraryValue = (value, testLabel, testValue)=>{
    const result = arbitraryValueRegex.exec(value);
    if (result) {
        if (result[1]) {
            return testLabel(result[1]);
        }
        return testValue(result[2]);
    }
    return false;
};
const getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false)=>{
    const result = arbitraryVariableRegex.exec(value);
    if (result) {
        if (result[1]) {
            return testLabel(result[1]);
        }
        return shouldMatchNoLabel;
    }
    return false;
};
// Labels
const isLabelPosition = (label)=>label === 'position' || label === 'percentage';
const isLabelImage = (label)=>label === 'image' || label === 'url';
const isLabelSize = (label)=>label === 'length' || label === 'size' || label === 'bg-size';
const isLabelLength = (label)=>label === 'length';
const isLabelNumber = (label)=>label === 'number';
const isLabelFamilyName = (label)=>label === 'family-name';
const isLabelShadow = (label)=>label === 'shadow';
const validators = /*#__PURE__*/ Object.defineProperty({
    __proto__: null,
    isAny,
    isAnyNonArbitrary,
    isArbitraryImage,
    isArbitraryLength,
    isArbitraryNumber,
    isArbitraryPosition,
    isArbitraryShadow,
    isArbitrarySize,
    isArbitraryValue,
    isArbitraryVariable,
    isArbitraryVariableFamilyName,
    isArbitraryVariableImage,
    isArbitraryVariableLength,
    isArbitraryVariablePosition,
    isArbitraryVariableShadow,
    isArbitraryVariableSize,
    isFraction,
    isInteger,
    isNumber,
    isPercent,
    isTshirtSize
}, Symbol.toStringTag, {
    value: 'Module'
});
const getDefaultConfig = ()=>{
    /**
   * Theme getters for theme variable namespaces
   * @see https://tailwindcss.com/docs/theme#theme-variable-namespaces
   */ /***/ const themeColor = fromTheme('color');
    const themeFont = fromTheme('font');
    const themeText = fromTheme('text');
    const themeFontWeight = fromTheme('font-weight');
    const themeTracking = fromTheme('tracking');
    const themeLeading = fromTheme('leading');
    const themeBreakpoint = fromTheme('breakpoint');
    const themeContainer = fromTheme('container');
    const themeSpacing = fromTheme('spacing');
    const themeRadius = fromTheme('radius');
    const themeShadow = fromTheme('shadow');
    const themeInsetShadow = fromTheme('inset-shadow');
    const themeTextShadow = fromTheme('text-shadow');
    const themeDropShadow = fromTheme('drop-shadow');
    const themeBlur = fromTheme('blur');
    const themePerspective = fromTheme('perspective');
    const themeAspect = fromTheme('aspect');
    const themeEase = fromTheme('ease');
    const themeAnimate = fromTheme('animate');
    /**
   * Helpers to avoid repeating the same scales
   *
   * We use functions that create a new array every time they're called instead of static arrays.
   * This ensures that users who modify any scale by mutating the array (e.g. with `array.push(element)`) don't accidentally mutate arrays in other parts of the config.
   */ /***/ const scaleBreak = ()=>[
            'auto',
            'avoid',
            'all',
            'avoid-page',
            'page',
            'left',
            'right',
            'column'
        ];
    const scalePosition = ()=>[
            'center',
            'top',
            'bottom',
            'left',
            'right',
            'top-left',
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            'left-top',
            'top-right',
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            'right-top',
            'bottom-right',
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            'right-bottom',
            'bottom-left',
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            'left-bottom'
        ];
    const scalePositionWithArbitrary = ()=>[
            ...scalePosition(),
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleOverflow = ()=>[
            'auto',
            'hidden',
            'clip',
            'visible',
            'scroll'
        ];
    const scaleOverscroll = ()=>[
            'auto',
            'contain',
            'none'
        ];
    const scaleUnambiguousSpacing = ()=>[
            isArbitraryVariable,
            isArbitraryValue,
            themeSpacing
        ];
    const scaleInset = ()=>[
            isFraction,
            'full',
            'auto',
            ...scaleUnambiguousSpacing()
        ];
    const scaleGridTemplateColsRows = ()=>[
            isInteger,
            'none',
            'subgrid',
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleGridColRowStartAndEnd = ()=>[
            'auto',
            {
                span: [
                    'full',
                    isInteger,
                    isArbitraryVariable,
                    isArbitraryValue
                ]
            },
            isInteger,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleGridColRowStartOrEnd = ()=>[
            isInteger,
            'auto',
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleGridAutoColsRows = ()=>[
            'auto',
            'min',
            'max',
            'fr',
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleAlignPrimaryAxis = ()=>[
            'start',
            'end',
            'center',
            'between',
            'around',
            'evenly',
            'stretch',
            'baseline',
            'center-safe',
            'end-safe'
        ];
    const scaleAlignSecondaryAxis = ()=>[
            'start',
            'end',
            'center',
            'stretch',
            'center-safe',
            'end-safe'
        ];
    const scaleMargin = ()=>[
            'auto',
            ...scaleUnambiguousSpacing()
        ];
    const scaleSizing = ()=>[
            isFraction,
            'auto',
            'full',
            'dvw',
            'dvh',
            'lvw',
            'lvh',
            'svw',
            'svh',
            'min',
            'max',
            'fit',
            ...scaleUnambiguousSpacing()
        ];
    const scaleColor = ()=>[
            themeColor,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleBgPosition = ()=>[
            ...scalePosition(),
            isArbitraryVariablePosition,
            isArbitraryPosition,
            {
                position: [
                    isArbitraryVariable,
                    isArbitraryValue
                ]
            }
        ];
    const scaleBgRepeat = ()=>[
            'no-repeat',
            {
                repeat: [
                    '',
                    'x',
                    'y',
                    'space',
                    'round'
                ]
            }
        ];
    const scaleBgSize = ()=>[
            'auto',
            'cover',
            'contain',
            isArbitraryVariableSize,
            isArbitrarySize,
            {
                size: [
                    isArbitraryVariable,
                    isArbitraryValue
                ]
            }
        ];
    const scaleGradientStopPosition = ()=>[
            isPercent,
            isArbitraryVariableLength,
            isArbitraryLength
        ];
    const scaleRadius = ()=>[
            // Deprecated since Tailwind CSS v4.0.0
            '',
            'none',
            'full',
            themeRadius,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleBorderWidth = ()=>[
            '',
            isNumber,
            isArbitraryVariableLength,
            isArbitraryLength
        ];
    const scaleLineStyle = ()=>[
            'solid',
            'dashed',
            'dotted',
            'double'
        ];
    const scaleBlendMode = ()=>[
            'normal',
            'multiply',
            'screen',
            'overlay',
            'darken',
            'lighten',
            'color-dodge',
            'color-burn',
            'hard-light',
            'soft-light',
            'difference',
            'exclusion',
            'hue',
            'saturation',
            'color',
            'luminosity'
        ];
    const scaleMaskImagePosition = ()=>[
            isNumber,
            isPercent,
            isArbitraryVariablePosition,
            isArbitraryPosition
        ];
    const scaleBlur = ()=>[
            // Deprecated since Tailwind CSS v4.0.0
            '',
            'none',
            themeBlur,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleRotate = ()=>[
            'none',
            isNumber,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleScale = ()=>[
            'none',
            isNumber,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleSkew = ()=>[
            isNumber,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleTranslate = ()=>[
            isFraction,
            'full',
            ...scaleUnambiguousSpacing()
        ];
    return {
        cacheSize: 500,
        theme: {
            animate: [
                'spin',
                'ping',
                'pulse',
                'bounce'
            ],
            aspect: [
                'video'
            ],
            blur: [
                isTshirtSize
            ],
            breakpoint: [
                isTshirtSize
            ],
            color: [
                isAny
            ],
            container: [
                isTshirtSize
            ],
            'drop-shadow': [
                isTshirtSize
            ],
            ease: [
                'in',
                'out',
                'in-out'
            ],
            font: [
                isAnyNonArbitrary
            ],
            'font-weight': [
                'thin',
                'extralight',
                'light',
                'normal',
                'medium',
                'semibold',
                'bold',
                'extrabold',
                'black'
            ],
            'inset-shadow': [
                isTshirtSize
            ],
            leading: [
                'none',
                'tight',
                'snug',
                'normal',
                'relaxed',
                'loose'
            ],
            perspective: [
                'dramatic',
                'near',
                'normal',
                'midrange',
                'distant',
                'none'
            ],
            radius: [
                isTshirtSize
            ],
            shadow: [
                isTshirtSize
            ],
            spacing: [
                'px',
                isNumber
            ],
            text: [
                isTshirtSize
            ],
            'text-shadow': [
                isTshirtSize
            ],
            tracking: [
                'tighter',
                'tight',
                'normal',
                'wide',
                'wider',
                'widest'
            ]
        },
        classGroups: {
            // --------------
            // --- Layout ---
            // --------------
            /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */ aspect: [
                {
                    aspect: [
                        'auto',
                        'square',
                        isFraction,
                        isArbitraryValue,
                        isArbitraryVariable,
                        themeAspect
                    ]
                }
            ],
            /**
       * Container
       * @see https://tailwindcss.com/docs/container
       * @deprecated since Tailwind CSS v4.0.0
       */ container: [
                'container'
            ],
            /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */ columns: [
                {
                    columns: [
                        isNumber,
                        isArbitraryValue,
                        isArbitraryVariable,
                        themeContainer
                    ]
                }
            ],
            /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */ 'break-after': [
                {
                    'break-after': scaleBreak()
                }
            ],
            /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */ 'break-before': [
                {
                    'break-before': scaleBreak()
                }
            ],
            /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */ 'break-inside': [
                {
                    'break-inside': [
                        'auto',
                        'avoid',
                        'avoid-page',
                        'avoid-column'
                    ]
                }
            ],
            /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */ 'box-decoration': [
                {
                    'box-decoration': [
                        'slice',
                        'clone'
                    ]
                }
            ],
            /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */ box: [
                {
                    box: [
                        'border',
                        'content'
                    ]
                }
            ],
            /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */ display: [
                'block',
                'inline-block',
                'inline',
                'flex',
                'inline-flex',
                'table',
                'inline-table',
                'table-caption',
                'table-cell',
                'table-column',
                'table-column-group',
                'table-footer-group',
                'table-header-group',
                'table-row-group',
                'table-row',
                'flow-root',
                'grid',
                'inline-grid',
                'contents',
                'list-item',
                'hidden'
            ],
            /**
       * Screen Reader Only
       * @see https://tailwindcss.com/docs/display#screen-reader-only
       */ sr: [
                'sr-only',
                'not-sr-only'
            ],
            /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */ float: [
                {
                    float: [
                        'right',
                        'left',
                        'none',
                        'start',
                        'end'
                    ]
                }
            ],
            /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */ clear: [
                {
                    clear: [
                        'left',
                        'right',
                        'both',
                        'none',
                        'start',
                        'end'
                    ]
                }
            ],
            /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */ isolation: [
                'isolate',
                'isolation-auto'
            ],
            /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */ 'object-fit': [
                {
                    object: [
                        'contain',
                        'cover',
                        'fill',
                        'none',
                        'scale-down'
                    ]
                }
            ],
            /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */ 'object-position': [
                {
                    object: scalePositionWithArbitrary()
                }
            ],
            /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */ overflow: [
                {
                    overflow: scaleOverflow()
                }
            ],
            /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */ 'overflow-x': [
                {
                    'overflow-x': scaleOverflow()
                }
            ],
            /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */ 'overflow-y': [
                {
                    'overflow-y': scaleOverflow()
                }
            ],
            /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */ overscroll: [
                {
                    overscroll: scaleOverscroll()
                }
            ],
            /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */ 'overscroll-x': [
                {
                    'overscroll-x': scaleOverscroll()
                }
            ],
            /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */ 'overscroll-y': [
                {
                    'overscroll-y': scaleOverscroll()
                }
            ],
            /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */ position: [
                'static',
                'fixed',
                'absolute',
                'relative',
                'sticky'
            ],
            /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ inset: [
                {
                    inset: scaleInset()
                }
            ],
            /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ 'inset-x': [
                {
                    'inset-x': scaleInset()
                }
            ],
            /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ 'inset-y': [
                {
                    'inset-y': scaleInset()
                }
            ],
            /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ start: [
                {
                    start: scaleInset()
                }
            ],
            /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ end: [
                {
                    end: scaleInset()
                }
            ],
            /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ top: [
                {
                    top: scaleInset()
                }
            ],
            /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ right: [
                {
                    right: scaleInset()
                }
            ],
            /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ bottom: [
                {
                    bottom: scaleInset()
                }
            ],
            /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ left: [
                {
                    left: scaleInset()
                }
            ],
            /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */ visibility: [
                'visible',
                'invisible',
                'collapse'
            ],
            /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */ z: [
                {
                    z: [
                        isInteger,
                        'auto',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // ------------------------
            // --- Flexbox and Grid ---
            // ------------------------
            /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */ basis: [
                {
                    basis: [
                        isFraction,
                        'full',
                        'auto',
                        themeContainer,
                        ...scaleUnambiguousSpacing()
                    ]
                }
            ],
            /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */ 'flex-direction': [
                {
                    flex: [
                        'row',
                        'row-reverse',
                        'col',
                        'col-reverse'
                    ]
                }
            ],
            /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */ 'flex-wrap': [
                {
                    flex: [
                        'nowrap',
                        'wrap',
                        'wrap-reverse'
                    ]
                }
            ],
            /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */ flex: [
                {
                    flex: [
                        isNumber,
                        isFraction,
                        'auto',
                        'initial',
                        'none',
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */ grow: [
                {
                    grow: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */ shrink: [
                {
                    shrink: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */ order: [
                {
                    order: [
                        isInteger,
                        'first',
                        'last',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */ 'grid-cols': [
                {
                    'grid-cols': scaleGridTemplateColsRows()
                }
            ],
            /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */ 'col-start-end': [
                {
                    col: scaleGridColRowStartAndEnd()
                }
            ],
            /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */ 'col-start': [
                {
                    'col-start': scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */ 'col-end': [
                {
                    'col-end': scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */ 'grid-rows': [
                {
                    'grid-rows': scaleGridTemplateColsRows()
                }
            ],
            /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */ 'row-start-end': [
                {
                    row: scaleGridColRowStartAndEnd()
                }
            ],
            /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */ 'row-start': [
                {
                    'row-start': scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */ 'row-end': [
                {
                    'row-end': scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */ 'grid-flow': [
                {
                    'grid-flow': [
                        'row',
                        'col',
                        'dense',
                        'row-dense',
                        'col-dense'
                    ]
                }
            ],
            /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */ 'auto-cols': [
                {
                    'auto-cols': scaleGridAutoColsRows()
                }
            ],
            /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */ 'auto-rows': [
                {
                    'auto-rows': scaleGridAutoColsRows()
                }
            ],
            /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */ gap: [
                {
                    gap: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */ 'gap-x': [
                {
                    'gap-x': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */ 'gap-y': [
                {
                    'gap-y': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */ 'justify-content': [
                {
                    justify: [
                        ...scaleAlignPrimaryAxis(),
                        'normal'
                    ]
                }
            ],
            /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */ 'justify-items': [
                {
                    'justify-items': [
                        ...scaleAlignSecondaryAxis(),
                        'normal'
                    ]
                }
            ],
            /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */ 'justify-self': [
                {
                    'justify-self': [
                        'auto',
                        ...scaleAlignSecondaryAxis()
                    ]
                }
            ],
            /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */ 'align-content': [
                {
                    content: [
                        'normal',
                        ...scaleAlignPrimaryAxis()
                    ]
                }
            ],
            /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */ 'align-items': [
                {
                    items: [
                        ...scaleAlignSecondaryAxis(),
                        {
                            baseline: [
                                '',
                                'last'
                            ]
                        }
                    ]
                }
            ],
            /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */ 'align-self': [
                {
                    self: [
                        'auto',
                        ...scaleAlignSecondaryAxis(),
                        {
                            baseline: [
                                '',
                                'last'
                            ]
                        }
                    ]
                }
            ],
            /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */ 'place-content': [
                {
                    'place-content': scaleAlignPrimaryAxis()
                }
            ],
            /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */ 'place-items': [
                {
                    'place-items': [
                        ...scaleAlignSecondaryAxis(),
                        'baseline'
                    ]
                }
            ],
            /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */ 'place-self': [
                {
                    'place-self': [
                        'auto',
                        ...scaleAlignSecondaryAxis()
                    ]
                }
            ],
            // Spacing
            /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */ p: [
                {
                    p: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */ px: [
                {
                    px: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */ py: [
                {
                    py: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */ ps: [
                {
                    ps: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */ pe: [
                {
                    pe: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */ pt: [
                {
                    pt: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */ pr: [
                {
                    pr: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */ pb: [
                {
                    pb: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */ pl: [
                {
                    pl: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */ m: [
                {
                    m: scaleMargin()
                }
            ],
            /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */ mx: [
                {
                    mx: scaleMargin()
                }
            ],
            /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */ my: [
                {
                    my: scaleMargin()
                }
            ],
            /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */ ms: [
                {
                    ms: scaleMargin()
                }
            ],
            /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */ me: [
                {
                    me: scaleMargin()
                }
            ],
            /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */ mt: [
                {
                    mt: scaleMargin()
                }
            ],
            /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */ mr: [
                {
                    mr: scaleMargin()
                }
            ],
            /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */ mb: [
                {
                    mb: scaleMargin()
                }
            ],
            /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */ ml: [
                {
                    ml: scaleMargin()
                }
            ],
            /**
       * Space Between X
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ 'space-x': [
                {
                    'space-x': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ 'space-x-reverse': [
                'space-x-reverse'
            ],
            /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ 'space-y': [
                {
                    'space-y': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ 'space-y-reverse': [
                'space-y-reverse'
            ],
            // --------------
            // --- Sizing ---
            // --------------
            /**
       * Size
       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height
       */ size: [
                {
                    size: scaleSizing()
                }
            ],
            /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */ w: [
                {
                    w: [
                        themeContainer,
                        'screen',
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */ 'min-w': [
                {
                    'min-w': [
                        themeContainer,
                        'screen',
                        /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ 'none',
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */ 'max-w': [
                {
                    'max-w': [
                        themeContainer,
                        'screen',
                        'none',
                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ 'prose',
                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ {
                            screen: [
                                themeBreakpoint
                            ]
                        },
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */ h: [
                {
                    h: [
                        'screen',
                        'lh',
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */ 'min-h': [
                {
                    'min-h': [
                        'screen',
                        'lh',
                        'none',
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */ 'max-h': [
                {
                    'max-h': [
                        'screen',
                        'lh',
                        ...scaleSizing()
                    ]
                }
            ],
            // ------------------
            // --- Typography ---
            // ------------------
            /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */ 'font-size': [
                {
                    text: [
                        'base',
                        themeText,
                        isArbitraryVariableLength,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */ 'font-smoothing': [
                'antialiased',
                'subpixel-antialiased'
            ],
            /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */ 'font-style': [
                'italic',
                'not-italic'
            ],
            /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */ 'font-weight': [
                {
                    font: [
                        themeFontWeight,
                        isArbitraryVariable,
                        isArbitraryNumber
                    ]
                }
            ],
            /**
       * Font Stretch
       * @see https://tailwindcss.com/docs/font-stretch
       */ 'font-stretch': [
                {
                    'font-stretch': [
                        'ultra-condensed',
                        'extra-condensed',
                        'condensed',
                        'semi-condensed',
                        'normal',
                        'semi-expanded',
                        'expanded',
                        'extra-expanded',
                        'ultra-expanded',
                        isPercent,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */ 'font-family': [
                {
                    font: [
                        isArbitraryVariableFamilyName,
                        isArbitraryValue,
                        themeFont
                    ]
                }
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-normal': [
                'normal-nums'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-ordinal': [
                'ordinal'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-slashed-zero': [
                'slashed-zero'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-figure': [
                'lining-nums',
                'oldstyle-nums'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-spacing': [
                'proportional-nums',
                'tabular-nums'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-fraction': [
                'diagonal-fractions',
                'stacked-fractions'
            ],
            /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */ tracking: [
                {
                    tracking: [
                        themeTracking,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */ 'line-clamp': [
                {
                    'line-clamp': [
                        isNumber,
                        'none',
                        isArbitraryVariable,
                        isArbitraryNumber
                    ]
                }
            ],
            /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */ leading: [
                {
                    leading: [
                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ themeLeading,
                        ...scaleUnambiguousSpacing()
                    ]
                }
            ],
            /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */ 'list-image': [
                {
                    'list-image': [
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */ 'list-style-position': [
                {
                    list: [
                        'inside',
                        'outside'
                    ]
                }
            ],
            /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */ 'list-style-type': [
                {
                    list: [
                        'disc',
                        'decimal',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */ 'text-alignment': [
                {
                    text: [
                        'left',
                        'center',
                        'right',
                        'justify',
                        'start',
                        'end'
                    ]
                }
            ],
            /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://v3.tailwindcss.com/docs/placeholder-color
       */ 'placeholder-color': [
                {
                    placeholder: scaleColor()
                }
            ],
            /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */ 'text-color': [
                {
                    text: scaleColor()
                }
            ],
            /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */ 'text-decoration': [
                'underline',
                'overline',
                'line-through',
                'no-underline'
            ],
            /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */ 'text-decoration-style': [
                {
                    decoration: [
                        ...scaleLineStyle(),
                        'wavy'
                    ]
                }
            ],
            /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */ 'text-decoration-thickness': [
                {
                    decoration: [
                        isNumber,
                        'from-font',
                        'auto',
                        isArbitraryVariable,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */ 'text-decoration-color': [
                {
                    decoration: scaleColor()
                }
            ],
            /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */ 'underline-offset': [
                {
                    'underline-offset': [
                        isNumber,
                        'auto',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */ 'text-transform': [
                'uppercase',
                'lowercase',
                'capitalize',
                'normal-case'
            ],
            /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */ 'text-overflow': [
                'truncate',
                'text-ellipsis',
                'text-clip'
            ],
            /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */ 'text-wrap': [
                {
                    text: [
                        'wrap',
                        'nowrap',
                        'balance',
                        'pretty'
                    ]
                }
            ],
            /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */ indent: [
                {
                    indent: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */ 'vertical-align': [
                {
                    align: [
                        'baseline',
                        'top',
                        'middle',
                        'bottom',
                        'text-top',
                        'text-bottom',
                        'sub',
                        'super',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */ whitespace: [
                {
                    whitespace: [
                        'normal',
                        'nowrap',
                        'pre',
                        'pre-line',
                        'pre-wrap',
                        'break-spaces'
                    ]
                }
            ],
            /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */ break: [
                {
                    break: [
                        'normal',
                        'words',
                        'all',
                        'keep'
                    ]
                }
            ],
            /**
       * Overflow Wrap
       * @see https://tailwindcss.com/docs/overflow-wrap
       */ wrap: [
                {
                    wrap: [
                        'break-word',
                        'anywhere',
                        'normal'
                    ]
                }
            ],
            /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */ hyphens: [
                {
                    hyphens: [
                        'none',
                        'manual',
                        'auto'
                    ]
                }
            ],
            /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */ content: [
                {
                    content: [
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // -------------------
            // --- Backgrounds ---
            // -------------------
            /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */ 'bg-attachment': [
                {
                    bg: [
                        'fixed',
                        'local',
                        'scroll'
                    ]
                }
            ],
            /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */ 'bg-clip': [
                {
                    'bg-clip': [
                        'border',
                        'padding',
                        'content',
                        'text'
                    ]
                }
            ],
            /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */ 'bg-origin': [
                {
                    'bg-origin': [
                        'border',
                        'padding',
                        'content'
                    ]
                }
            ],
            /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */ 'bg-position': [
                {
                    bg: scaleBgPosition()
                }
            ],
            /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */ 'bg-repeat': [
                {
                    bg: scaleBgRepeat()
                }
            ],
            /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */ 'bg-size': [
                {
                    bg: scaleBgSize()
                }
            ],
            /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */ 'bg-image': [
                {
                    bg: [
                        'none',
                        {
                            linear: [
                                {
                                    to: [
                                        't',
                                        'tr',
                                        'r',
                                        'br',
                                        'b',
                                        'bl',
                                        'l',
                                        'tl'
                                    ]
                                },
                                isInteger,
                                isArbitraryVariable,
                                isArbitraryValue
                            ],
                            radial: [
                                '',
                                isArbitraryVariable,
                                isArbitraryValue
                            ],
                            conic: [
                                isInteger,
                                isArbitraryVariable,
                                isArbitraryValue
                            ]
                        },
                        isArbitraryVariableImage,
                        isArbitraryImage
                    ]
                }
            ],
            /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */ 'bg-color': [
                {
                    bg: scaleColor()
                }
            ],
            /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-from-pos': [
                {
                    from: scaleGradientStopPosition()
                }
            ],
            /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-via-pos': [
                {
                    via: scaleGradientStopPosition()
                }
            ],
            /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-to-pos': [
                {
                    to: scaleGradientStopPosition()
                }
            ],
            /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-from': [
                {
                    from: scaleColor()
                }
            ],
            /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-via': [
                {
                    via: scaleColor()
                }
            ],
            /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-to': [
                {
                    to: scaleColor()
                }
            ],
            // ---------------
            // --- Borders ---
            // ---------------
            /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */ rounded: [
                {
                    rounded: scaleRadius()
                }
            ],
            /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-s': [
                {
                    'rounded-s': scaleRadius()
                }
            ],
            /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-e': [
                {
                    'rounded-e': scaleRadius()
                }
            ],
            /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-t': [
                {
                    'rounded-t': scaleRadius()
                }
            ],
            /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-r': [
                {
                    'rounded-r': scaleRadius()
                }
            ],
            /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-b': [
                {
                    'rounded-b': scaleRadius()
                }
            ],
            /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-l': [
                {
                    'rounded-l': scaleRadius()
                }
            ],
            /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-ss': [
                {
                    'rounded-ss': scaleRadius()
                }
            ],
            /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-se': [
                {
                    'rounded-se': scaleRadius()
                }
            ],
            /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-ee': [
                {
                    'rounded-ee': scaleRadius()
                }
            ],
            /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-es': [
                {
                    'rounded-es': scaleRadius()
                }
            ],
            /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-tl': [
                {
                    'rounded-tl': scaleRadius()
                }
            ],
            /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-tr': [
                {
                    'rounded-tr': scaleRadius()
                }
            ],
            /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-br': [
                {
                    'rounded-br': scaleRadius()
                }
            ],
            /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-bl': [
                {
                    'rounded-bl': scaleRadius()
                }
            ],
            /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w': [
                {
                    border: scaleBorderWidth()
                }
            ],
            /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-x': [
                {
                    'border-x': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-y': [
                {
                    'border-y': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-s': [
                {
                    'border-s': scaleBorderWidth()
                }
            ],
            /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-e': [
                {
                    'border-e': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-t': [
                {
                    'border-t': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-r': [
                {
                    'border-r': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-b': [
                {
                    'border-b': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-l': [
                {
                    'border-l': scaleBorderWidth()
                }
            ],
            /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ 'divide-x': [
                {
                    'divide-x': scaleBorderWidth()
                }
            ],
            /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ 'divide-x-reverse': [
                'divide-x-reverse'
            ],
            /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ 'divide-y': [
                {
                    'divide-y': scaleBorderWidth()
                }
            ],
            /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ 'divide-y-reverse': [
                'divide-y-reverse'
            ],
            /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */ 'border-style': [
                {
                    border: [
                        ...scaleLineStyle(),
                        'hidden',
                        'none'
                    ]
                }
            ],
            /**
       * Divide Style
       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style
       */ 'divide-style': [
                {
                    divide: [
                        ...scaleLineStyle(),
                        'hidden',
                        'none'
                    ]
                }
            ],
            /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color': [
                {
                    border: scaleColor()
                }
            ],
            /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-x': [
                {
                    'border-x': scaleColor()
                }
            ],
            /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-y': [
                {
                    'border-y': scaleColor()
                }
            ],
            /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-s': [
                {
                    'border-s': scaleColor()
                }
            ],
            /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-e': [
                {
                    'border-e': scaleColor()
                }
            ],
            /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-t': [
                {
                    'border-t': scaleColor()
                }
            ],
            /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-r': [
                {
                    'border-r': scaleColor()
                }
            ],
            /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-b': [
                {
                    'border-b': scaleColor()
                }
            ],
            /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-l': [
                {
                    'border-l': scaleColor()
                }
            ],
            /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */ 'divide-color': [
                {
                    divide: scaleColor()
                }
            ],
            /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */ 'outline-style': [
                {
                    outline: [
                        ...scaleLineStyle(),
                        'none',
                        'hidden'
                    ]
                }
            ],
            /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */ 'outline-offset': [
                {
                    'outline-offset': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */ 'outline-w': [
                {
                    outline: [
                        '',
                        isNumber,
                        isArbitraryVariableLength,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */ 'outline-color': [
                {
                    outline: scaleColor()
                }
            ],
            // ---------------
            // --- Effects ---
            // ---------------
            /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */ shadow: [
                {
                    shadow: [
                        // Deprecated since Tailwind CSS v4.0.0
                        '',
                        'none',
                        themeShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color
       */ 'shadow-color': [
                {
                    shadow: scaleColor()
                }
            ],
            /**
       * Inset Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow
       */ 'inset-shadow': [
                {
                    'inset-shadow': [
                        'none',
                        themeInsetShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Inset Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color
       */ 'inset-shadow-color': [
                {
                    'inset-shadow': scaleColor()
                }
            ],
            /**
       * Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring
       */ 'ring-w': [
                {
                    ring: scaleBorderWidth()
                }
            ],
            /**
       * Ring Width Inset
       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */ 'ring-w-inset': [
                'ring-inset'
            ],
            /**
       * Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color
       */ 'ring-color': [
                {
                    ring: scaleColor()
                }
            ],
            /**
       * Ring Offset Width
       * @see https://v3.tailwindcss.com/docs/ring-offset-width
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */ 'ring-offset-w': [
                {
                    'ring-offset': [
                        isNumber,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Ring Offset Color
       * @see https://v3.tailwindcss.com/docs/ring-offset-color
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */ 'ring-offset-color': [
                {
                    'ring-offset': scaleColor()
                }
            ],
            /**
       * Inset Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring
       */ 'inset-ring-w': [
                {
                    'inset-ring': scaleBorderWidth()
                }
            ],
            /**
       * Inset Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color
       */ 'inset-ring-color': [
                {
                    'inset-ring': scaleColor()
                }
            ],
            /**
       * Text Shadow
       * @see https://tailwindcss.com/docs/text-shadow
       */ 'text-shadow': [
                {
                    'text-shadow': [
                        'none',
                        themeTextShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Text Shadow Color
       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color
       */ 'text-shadow-color': [
                {
                    'text-shadow': scaleColor()
                }
            ],
            /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */ opacity: [
                {
                    opacity: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */ 'mix-blend': [
                {
                    'mix-blend': [
                        ...scaleBlendMode(),
                        'plus-darker',
                        'plus-lighter'
                    ]
                }
            ],
            /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */ 'bg-blend': [
                {
                    'bg-blend': scaleBlendMode()
                }
            ],
            /**
       * Mask Clip
       * @see https://tailwindcss.com/docs/mask-clip
       */ 'mask-clip': [
                {
                    'mask-clip': [
                        'border',
                        'padding',
                        'content',
                        'fill',
                        'stroke',
                        'view'
                    ]
                },
                'mask-no-clip'
            ],
            /**
       * Mask Composite
       * @see https://tailwindcss.com/docs/mask-composite
       */ 'mask-composite': [
                {
                    mask: [
                        'add',
                        'subtract',
                        'intersect',
                        'exclude'
                    ]
                }
            ],
            /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */ 'mask-image-linear-pos': [
                {
                    'mask-linear': [
                        isNumber
                    ]
                }
            ],
            'mask-image-linear-from-pos': [
                {
                    'mask-linear-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-linear-to-pos': [
                {
                    'mask-linear-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-linear-from-color': [
                {
                    'mask-linear-from': scaleColor()
                }
            ],
            'mask-image-linear-to-color': [
                {
                    'mask-linear-to': scaleColor()
                }
            ],
            'mask-image-t-from-pos': [
                {
                    'mask-t-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-t-to-pos': [
                {
                    'mask-t-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-t-from-color': [
                {
                    'mask-t-from': scaleColor()
                }
            ],
            'mask-image-t-to-color': [
                {
                    'mask-t-to': scaleColor()
                }
            ],
            'mask-image-r-from-pos': [
                {
                    'mask-r-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-r-to-pos': [
                {
                    'mask-r-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-r-from-color': [
                {
                    'mask-r-from': scaleColor()
                }
            ],
            'mask-image-r-to-color': [
                {
                    'mask-r-to': scaleColor()
                }
            ],
            'mask-image-b-from-pos': [
                {
                    'mask-b-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-b-to-pos': [
                {
                    'mask-b-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-b-from-color': [
                {
                    'mask-b-from': scaleColor()
                }
            ],
            'mask-image-b-to-color': [
                {
                    'mask-b-to': scaleColor()
                }
            ],
            'mask-image-l-from-pos': [
                {
                    'mask-l-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-l-to-pos': [
                {
                    'mask-l-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-l-from-color': [
                {
                    'mask-l-from': scaleColor()
                }
            ],
            'mask-image-l-to-color': [
                {
                    'mask-l-to': scaleColor()
                }
            ],
            'mask-image-x-from-pos': [
                {
                    'mask-x-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-x-to-pos': [
                {
                    'mask-x-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-x-from-color': [
                {
                    'mask-x-from': scaleColor()
                }
            ],
            'mask-image-x-to-color': [
                {
                    'mask-x-to': scaleColor()
                }
            ],
            'mask-image-y-from-pos': [
                {
                    'mask-y-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-y-to-pos': [
                {
                    'mask-y-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-y-from-color': [
                {
                    'mask-y-from': scaleColor()
                }
            ],
            'mask-image-y-to-color': [
                {
                    'mask-y-to': scaleColor()
                }
            ],
            'mask-image-radial': [
                {
                    'mask-radial': [
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            'mask-image-radial-from-pos': [
                {
                    'mask-radial-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-radial-to-pos': [
                {
                    'mask-radial-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-radial-from-color': [
                {
                    'mask-radial-from': scaleColor()
                }
            ],
            'mask-image-radial-to-color': [
                {
                    'mask-radial-to': scaleColor()
                }
            ],
            'mask-image-radial-shape': [
                {
                    'mask-radial': [
                        'circle',
                        'ellipse'
                    ]
                }
            ],
            'mask-image-radial-size': [
                {
                    'mask-radial': [
                        {
                            closest: [
                                'side',
                                'corner'
                            ],
                            farthest: [
                                'side',
                                'corner'
                            ]
                        }
                    ]
                }
            ],
            'mask-image-radial-pos': [
                {
                    'mask-radial-at': scalePosition()
                }
            ],
            'mask-image-conic-pos': [
                {
                    'mask-conic': [
                        isNumber
                    ]
                }
            ],
            'mask-image-conic-from-pos': [
                {
                    'mask-conic-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-conic-to-pos': [
                {
                    'mask-conic-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-conic-from-color': [
                {
                    'mask-conic-from': scaleColor()
                }
            ],
            'mask-image-conic-to-color': [
                {
                    'mask-conic-to': scaleColor()
                }
            ],
            /**
       * Mask Mode
       * @see https://tailwindcss.com/docs/mask-mode
       */ 'mask-mode': [
                {
                    mask: [
                        'alpha',
                        'luminance',
                        'match'
                    ]
                }
            ],
            /**
       * Mask Origin
       * @see https://tailwindcss.com/docs/mask-origin
       */ 'mask-origin': [
                {
                    'mask-origin': [
                        'border',
                        'padding',
                        'content',
                        'fill',
                        'stroke',
                        'view'
                    ]
                }
            ],
            /**
       * Mask Position
       * @see https://tailwindcss.com/docs/mask-position
       */ 'mask-position': [
                {
                    mask: scaleBgPosition()
                }
            ],
            /**
       * Mask Repeat
       * @see https://tailwindcss.com/docs/mask-repeat
       */ 'mask-repeat': [
                {
                    mask: scaleBgRepeat()
                }
            ],
            /**
       * Mask Size
       * @see https://tailwindcss.com/docs/mask-size
       */ 'mask-size': [
                {
                    mask: scaleBgSize()
                }
            ],
            /**
       * Mask Type
       * @see https://tailwindcss.com/docs/mask-type
       */ 'mask-type': [
                {
                    'mask-type': [
                        'alpha',
                        'luminance'
                    ]
                }
            ],
            /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */ 'mask-image': [
                {
                    mask: [
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // ---------------
            // --- Filters ---
            // ---------------
            /**
       * Filter
       * @see https://tailwindcss.com/docs/filter
       */ filter: [
                {
                    filter: [
                        // Deprecated since Tailwind CSS v3.0.0
                        '',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */ blur: [
                {
                    blur: scaleBlur()
                }
            ],
            /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */ brightness: [
                {
                    brightness: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */ contrast: [
                {
                    contrast: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */ 'drop-shadow': [
                {
                    'drop-shadow': [
                        // Deprecated since Tailwind CSS v4.0.0
                        '',
                        'none',
                        themeDropShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Drop Shadow Color
       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color
       */ 'drop-shadow-color': [
                {
                    'drop-shadow': scaleColor()
                }
            ],
            /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */ grayscale: [
                {
                    grayscale: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */ 'hue-rotate': [
                {
                    'hue-rotate': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */ invert: [
                {
                    invert: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */ saturate: [
                {
                    saturate: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */ sepia: [
                {
                    sepia: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Filter
       * @see https://tailwindcss.com/docs/backdrop-filter
       */ 'backdrop-filter': [
                {
                    'backdrop-filter': [
                        // Deprecated since Tailwind CSS v3.0.0
                        '',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */ 'backdrop-blur': [
                {
                    'backdrop-blur': scaleBlur()
                }
            ],
            /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */ 'backdrop-brightness': [
                {
                    'backdrop-brightness': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */ 'backdrop-contrast': [
                {
                    'backdrop-contrast': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */ 'backdrop-grayscale': [
                {
                    'backdrop-grayscale': [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */ 'backdrop-hue-rotate': [
                {
                    'backdrop-hue-rotate': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */ 'backdrop-invert': [
                {
                    'backdrop-invert': [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */ 'backdrop-opacity': [
                {
                    'backdrop-opacity': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */ 'backdrop-saturate': [
                {
                    'backdrop-saturate': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */ 'backdrop-sepia': [
                {
                    'backdrop-sepia': [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // --------------
            // --- Tables ---
            // --------------
            /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */ 'border-collapse': [
                {
                    border: [
                        'collapse',
                        'separate'
                    ]
                }
            ],
            /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */ 'border-spacing': [
                {
                    'border-spacing': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */ 'border-spacing-x': [
                {
                    'border-spacing-x': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */ 'border-spacing-y': [
                {
                    'border-spacing-y': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */ 'table-layout': [
                {
                    table: [
                        'auto',
                        'fixed'
                    ]
                }
            ],
            /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */ caption: [
                {
                    caption: [
                        'top',
                        'bottom'
                    ]
                }
            ],
            // ---------------------------------
            // --- Transitions and Animation ---
            // ---------------------------------
            /**
       * Transition Property
       * @see https://tailwindcss.com/docs/transition-property
       */ transition: [
                {
                    transition: [
                        '',
                        'all',
                        'colors',
                        'opacity',
                        'shadow',
                        'transform',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Transition Behavior
       * @see https://tailwindcss.com/docs/transition-behavior
       */ 'transition-behavior': [
                {
                    transition: [
                        'normal',
                        'discrete'
                    ]
                }
            ],
            /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */ duration: [
                {
                    duration: [
                        isNumber,
                        'initial',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */ ease: [
                {
                    ease: [
                        'linear',
                        'initial',
                        themeEase,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */ delay: [
                {
                    delay: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */ animate: [
                {
                    animate: [
                        'none',
                        themeAnimate,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // ------------------
            // --- Transforms ---
            // ------------------
            /**
       * Backface Visibility
       * @see https://tailwindcss.com/docs/backface-visibility
       */ backface: [
                {
                    backface: [
                        'hidden',
                        'visible'
                    ]
                }
            ],
            /**
       * Perspective
       * @see https://tailwindcss.com/docs/perspective
       */ perspective: [
                {
                    perspective: [
                        themePerspective,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Perspective Origin
       * @see https://tailwindcss.com/docs/perspective-origin
       */ 'perspective-origin': [
                {
                    'perspective-origin': scalePositionWithArbitrary()
                }
            ],
            /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */ rotate: [
                {
                    rotate: scaleRotate()
                }
            ],
            /**
       * Rotate X
       * @see https://tailwindcss.com/docs/rotate
       */ 'rotate-x': [
                {
                    'rotate-x': scaleRotate()
                }
            ],
            /**
       * Rotate Y
       * @see https://tailwindcss.com/docs/rotate
       */ 'rotate-y': [
                {
                    'rotate-y': scaleRotate()
                }
            ],
            /**
       * Rotate Z
       * @see https://tailwindcss.com/docs/rotate
       */ 'rotate-z': [
                {
                    'rotate-z': scaleRotate()
                }
            ],
            /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */ scale: [
                {
                    scale: scaleScale()
                }
            ],
            /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */ 'scale-x': [
                {
                    'scale-x': scaleScale()
                }
            ],
            /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */ 'scale-y': [
                {
                    'scale-y': scaleScale()
                }
            ],
            /**
       * Scale Z
       * @see https://tailwindcss.com/docs/scale
       */ 'scale-z': [
                {
                    'scale-z': scaleScale()
                }
            ],
            /**
       * Scale 3D
       * @see https://tailwindcss.com/docs/scale
       */ 'scale-3d': [
                'scale-3d'
            ],
            /**
       * Skew
       * @see https://tailwindcss.com/docs/skew
       */ skew: [
                {
                    skew: scaleSkew()
                }
            ],
            /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */ 'skew-x': [
                {
                    'skew-x': scaleSkew()
                }
            ],
            /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */ 'skew-y': [
                {
                    'skew-y': scaleSkew()
                }
            ],
            /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */ transform: [
                {
                    transform: [
                        isArbitraryVariable,
                        isArbitraryValue,
                        '',
                        'none',
                        'gpu',
                        'cpu'
                    ]
                }
            ],
            /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */ 'transform-origin': [
                {
                    origin: scalePositionWithArbitrary()
                }
            ],
            /**
       * Transform Style
       * @see https://tailwindcss.com/docs/transform-style
       */ 'transform-style': [
                {
                    transform: [
                        '3d',
                        'flat'
                    ]
                }
            ],
            /**
       * Translate
       * @see https://tailwindcss.com/docs/translate
       */ translate: [
                {
                    translate: scaleTranslate()
                }
            ],
            /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */ 'translate-x': [
                {
                    'translate-x': scaleTranslate()
                }
            ],
            /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */ 'translate-y': [
                {
                    'translate-y': scaleTranslate()
                }
            ],
            /**
       * Translate Z
       * @see https://tailwindcss.com/docs/translate
       */ 'translate-z': [
                {
                    'translate-z': scaleTranslate()
                }
            ],
            /**
       * Translate None
       * @see https://tailwindcss.com/docs/translate
       */ 'translate-none': [
                'translate-none'
            ],
            // ---------------------
            // --- Interactivity ---
            // ---------------------
            /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */ accent: [
                {
                    accent: scaleColor()
                }
            ],
            /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */ appearance: [
                {
                    appearance: [
                        'none',
                        'auto'
                    ]
                }
            ],
            /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */ 'caret-color': [
                {
                    caret: scaleColor()
                }
            ],
            /**
       * Color Scheme
       * @see https://tailwindcss.com/docs/color-scheme
       */ 'color-scheme': [
                {
                    scheme: [
                        'normal',
                        'dark',
                        'light',
                        'light-dark',
                        'only-dark',
                        'only-light'
                    ]
                }
            ],
            /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */ cursor: [
                {
                    cursor: [
                        'auto',
                        'default',
                        'pointer',
                        'wait',
                        'text',
                        'move',
                        'help',
                        'not-allowed',
                        'none',
                        'context-menu',
                        'progress',
                        'cell',
                        'crosshair',
                        'vertical-text',
                        'alias',
                        'copy',
                        'no-drop',
                        'grab',
                        'grabbing',
                        'all-scroll',
                        'col-resize',
                        'row-resize',
                        'n-resize',
                        'e-resize',
                        's-resize',
                        'w-resize',
                        'ne-resize',
                        'nw-resize',
                        'se-resize',
                        'sw-resize',
                        'ew-resize',
                        'ns-resize',
                        'nesw-resize',
                        'nwse-resize',
                        'zoom-in',
                        'zoom-out',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Field Sizing
       * @see https://tailwindcss.com/docs/field-sizing
       */ 'field-sizing': [
                {
                    'field-sizing': [
                        'fixed',
                        'content'
                    ]
                }
            ],
            /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */ 'pointer-events': [
                {
                    'pointer-events': [
                        'auto',
                        'none'
                    ]
                }
            ],
            /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */ resize: [
                {
                    resize: [
                        'none',
                        '',
                        'y',
                        'x'
                    ]
                }
            ],
            /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */ 'scroll-behavior': [
                {
                    scroll: [
                        'auto',
                        'smooth'
                    ]
                }
            ],
            /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-m': [
                {
                    'scroll-m': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-mx': [
                {
                    'scroll-mx': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-my': [
                {
                    'scroll-my': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-ms': [
                {
                    'scroll-ms': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-me': [
                {
                    'scroll-me': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-mt': [
                {
                    'scroll-mt': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-mr': [
                {
                    'scroll-mr': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-mb': [
                {
                    'scroll-mb': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-ml': [
                {
                    'scroll-ml': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-p': [
                {
                    'scroll-p': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-px': [
                {
                    'scroll-px': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-py': [
                {
                    'scroll-py': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-ps': [
                {
                    'scroll-ps': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pe': [
                {
                    'scroll-pe': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pt': [
                {
                    'scroll-pt': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pr': [
                {
                    'scroll-pr': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pb': [
                {
                    'scroll-pb': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pl': [
                {
                    'scroll-pl': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */ 'snap-align': [
                {
                    snap: [
                        'start',
                        'end',
                        'center',
                        'align-none'
                    ]
                }
            ],
            /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */ 'snap-stop': [
                {
                    snap: [
                        'normal',
                        'always'
                    ]
                }
            ],
            /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */ 'snap-type': [
                {
                    snap: [
                        'none',
                        'x',
                        'y',
                        'both'
                    ]
                }
            ],
            /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */ 'snap-strictness': [
                {
                    snap: [
                        'mandatory',
                        'proximity'
                    ]
                }
            ],
            /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */ touch: [
                {
                    touch: [
                        'auto',
                        'none',
                        'manipulation'
                    ]
                }
            ],
            /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */ 'touch-x': [
                {
                    'touch-pan': [
                        'x',
                        'left',
                        'right'
                    ]
                }
            ],
            /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */ 'touch-y': [
                {
                    'touch-pan': [
                        'y',
                        'up',
                        'down'
                    ]
                }
            ],
            /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */ 'touch-pz': [
                'touch-pinch-zoom'
            ],
            /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */ select: [
                {
                    select: [
                        'none',
                        'text',
                        'all',
                        'auto'
                    ]
                }
            ],
            /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */ 'will-change': [
                {
                    'will-change': [
                        'auto',
                        'scroll',
                        'contents',
                        'transform',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // -----------
            // --- SVG ---
            // -----------
            /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */ fill: [
                {
                    fill: [
                        'none',
                        ...scaleColor()
                    ]
                }
            ],
            /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */ 'stroke-w': [
                {
                    stroke: [
                        isNumber,
                        isArbitraryVariableLength,
                        isArbitraryLength,
                        isArbitraryNumber
                    ]
                }
            ],
            /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */ stroke: [
                {
                    stroke: [
                        'none',
                        ...scaleColor()
                    ]
                }
            ],
            // ---------------------
            // --- Accessibility ---
            // ---------------------
            /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */ 'forced-color-adjust': [
                {
                    'forced-color-adjust': [
                        'auto',
                        'none'
                    ]
                }
            ]
        },
        conflictingClassGroups: {
            overflow: [
                'overflow-x',
                'overflow-y'
            ],
            overscroll: [
                'overscroll-x',
                'overscroll-y'
            ],
            inset: [
                'inset-x',
                'inset-y',
                'start',
                'end',
                'top',
                'right',
                'bottom',
                'left'
            ],
            'inset-x': [
                'right',
                'left'
            ],
            'inset-y': [
                'top',
                'bottom'
            ],
            flex: [
                'basis',
                'grow',
                'shrink'
            ],
            gap: [
                'gap-x',
                'gap-y'
            ],
            p: [
                'px',
                'py',
                'ps',
                'pe',
                'pt',
                'pr',
                'pb',
                'pl'
            ],
            px: [
                'pr',
                'pl'
            ],
            py: [
                'pt',
                'pb'
            ],
            m: [
                'mx',
                'my',
                'ms',
                'me',
                'mt',
                'mr',
                'mb',
                'ml'
            ],
            mx: [
                'mr',
                'ml'
            ],
            my: [
                'mt',
                'mb'
            ],
            size: [
                'w',
                'h'
            ],
            'font-size': [
                'leading'
            ],
            'fvn-normal': [
                'fvn-ordinal',
                'fvn-slashed-zero',
                'fvn-figure',
                'fvn-spacing',
                'fvn-fraction'
            ],
            'fvn-ordinal': [
                'fvn-normal'
            ],
            'fvn-slashed-zero': [
                'fvn-normal'
            ],
            'fvn-figure': [
                'fvn-normal'
            ],
            'fvn-spacing': [
                'fvn-normal'
            ],
            'fvn-fraction': [
                'fvn-normal'
            ],
            'line-clamp': [
                'display',
                'overflow'
            ],
            rounded: [
                'rounded-s',
                'rounded-e',
                'rounded-t',
                'rounded-r',
                'rounded-b',
                'rounded-l',
                'rounded-ss',
                'rounded-se',
                'rounded-ee',
                'rounded-es',
                'rounded-tl',
                'rounded-tr',
                'rounded-br',
                'rounded-bl'
            ],
            'rounded-s': [
                'rounded-ss',
                'rounded-es'
            ],
            'rounded-e': [
                'rounded-se',
                'rounded-ee'
            ],
            'rounded-t': [
                'rounded-tl',
                'rounded-tr'
            ],
            'rounded-r': [
                'rounded-tr',
                'rounded-br'
            ],
            'rounded-b': [
                'rounded-br',
                'rounded-bl'
            ],
            'rounded-l': [
                'rounded-tl',
                'rounded-bl'
            ],
            'border-spacing': [
                'border-spacing-x',
                'border-spacing-y'
            ],
            'border-w': [
                'border-w-x',
                'border-w-y',
                'border-w-s',
                'border-w-e',
                'border-w-t',
                'border-w-r',
                'border-w-b',
                'border-w-l'
            ],
            'border-w-x': [
                'border-w-r',
                'border-w-l'
            ],
            'border-w-y': [
                'border-w-t',
                'border-w-b'
            ],
            'border-color': [
                'border-color-x',
                'border-color-y',
                'border-color-s',
                'border-color-e',
                'border-color-t',
                'border-color-r',
                'border-color-b',
                'border-color-l'
            ],
            'border-color-x': [
                'border-color-r',
                'border-color-l'
            ],
            'border-color-y': [
                'border-color-t',
                'border-color-b'
            ],
            translate: [
                'translate-x',
                'translate-y',
                'translate-none'
            ],
            'translate-none': [
                'translate',
                'translate-x',
                'translate-y',
                'translate-z'
            ],
            'scroll-m': [
                'scroll-mx',
                'scroll-my',
                'scroll-ms',
                'scroll-me',
                'scroll-mt',
                'scroll-mr',
                'scroll-mb',
                'scroll-ml'
            ],
            'scroll-mx': [
                'scroll-mr',
                'scroll-ml'
            ],
            'scroll-my': [
                'scroll-mt',
                'scroll-mb'
            ],
            'scroll-p': [
                'scroll-px',
                'scroll-py',
                'scroll-ps',
                'scroll-pe',
                'scroll-pt',
                'scroll-pr',
                'scroll-pb',
                'scroll-pl'
            ],
            'scroll-px': [
                'scroll-pr',
                'scroll-pl'
            ],
            'scroll-py': [
                'scroll-pt',
                'scroll-pb'
            ],
            touch: [
                'touch-x',
                'touch-y',
                'touch-pz'
            ],
            'touch-x': [
                'touch'
            ],
            'touch-y': [
                'touch'
            ],
            'touch-pz': [
                'touch'
            ]
        },
        conflictingClassGroupModifiers: {
            'font-size': [
                'leading'
            ]
        },
        orderSensitiveModifiers: [
            '*',
            '**',
            'after',
            'backdrop',
            'before',
            'details-content',
            'file',
            'first-letter',
            'first-line',
            'marker',
            'placeholder',
            'selection'
        ]
    };
};
/**
 * @param baseConfig Config where other config will be merged into. This object will be mutated.
 * @param configExtension Partial config to merge into the `baseConfig`.
 */ const mergeConfigs = (baseConfig, { cacheSize, prefix, experimentalParseClassName, extend = {}, override = {} })=>{
    overrideProperty(baseConfig, 'cacheSize', cacheSize);
    overrideProperty(baseConfig, 'prefix', prefix);
    overrideProperty(baseConfig, 'experimentalParseClassName', experimentalParseClassName);
    overrideConfigProperties(baseConfig.theme, override.theme);
    overrideConfigProperties(baseConfig.classGroups, override.classGroups);
    overrideConfigProperties(baseConfig.conflictingClassGroups, override.conflictingClassGroups);
    overrideConfigProperties(baseConfig.conflictingClassGroupModifiers, override.conflictingClassGroupModifiers);
    overrideProperty(baseConfig, 'orderSensitiveModifiers', override.orderSensitiveModifiers);
    mergeConfigProperties(baseConfig.theme, extend.theme);
    mergeConfigProperties(baseConfig.classGroups, extend.classGroups);
    mergeConfigProperties(baseConfig.conflictingClassGroups, extend.conflictingClassGroups);
    mergeConfigProperties(baseConfig.conflictingClassGroupModifiers, extend.conflictingClassGroupModifiers);
    mergeArrayProperties(baseConfig, extend, 'orderSensitiveModifiers');
    return baseConfig;
};
const overrideProperty = (baseObject, overrideKey, overrideValue)=>{
    if (overrideValue !== undefined) {
        baseObject[overrideKey] = overrideValue;
    }
};
const overrideConfigProperties = (baseObject, overrideObject)=>{
    if (overrideObject) {
        for(const key in overrideObject){
            overrideProperty(baseObject, key, overrideObject[key]);
        }
    }
};
const mergeConfigProperties = (baseObject, mergeObject)=>{
    if (mergeObject) {
        for(const key in mergeObject){
            mergeArrayProperties(baseObject, mergeObject, key);
        }
    }
};
const mergeArrayProperties = (baseObject, mergeObject, key)=>{
    const mergeValue = mergeObject[key];
    if (mergeValue !== undefined) {
        baseObject[key] = baseObject[key] ? baseObject[key].concat(mergeValue) : mergeValue;
    }
};
const extendTailwindMerge = (configExtension, ...createConfig)=>typeof configExtension === 'function' ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(()=>mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);
const twMerge = /*#__PURE__*/ createTailwindMerge(getDefaultConfig);
;
 //# sourceMappingURL=bundle-mjs.mjs.map
}}),
"[project]/node_modules/@daily-co/daily-js/dist/daily-esm.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DAILY_ACCESS_LEVEL_FULL": (()=>vi),
    "DAILY_ACCESS_LEVEL_LOBBY": (()=>gi),
    "DAILY_ACCESS_LEVEL_NONE": (()=>mi),
    "DAILY_ACCESS_UNKNOWN": (()=>fi),
    "DAILY_CAMERA_ERROR_CAM_AND_MIC_IN_USE": (()=>Ii),
    "DAILY_CAMERA_ERROR_CAM_IN_USE": (()=>Ai),
    "DAILY_CAMERA_ERROR_CONSTRAINTS": (()=>Ni),
    "DAILY_CAMERA_ERROR_MIC_IN_USE": (()=>ji),
    "DAILY_CAMERA_ERROR_NOT_FOUND": (()=>Di),
    "DAILY_CAMERA_ERROR_PERMISSIONS": (()=>xi),
    "DAILY_CAMERA_ERROR_UNDEF_MEDIADEVICES": (()=>Li),
    "DAILY_CAMERA_ERROR_UNKNOWN": (()=>Ri),
    "DAILY_EVENT_ACCESS_STATE_UPDATED": (()=>Zi),
    "DAILY_EVENT_ACTIVE_SPEAKER_CHANGE": (()=>Eo),
    "DAILY_EVENT_ACTIVE_SPEAKER_MODE_CHANGE": (()=>To),
    "DAILY_EVENT_APP_MSG": (()=>yo),
    "DAILY_EVENT_CAMERA_ERROR": (()=>zi),
    "DAILY_EVENT_CPU_LOAD_CHANGE": (()=>Ao),
    "DAILY_EVENT_ERROR": (()=>Jo),
    "DAILY_EVENT_EXIT_FULLSCREEN": (()=>xo),
    "DAILY_EVENT_FACE_COUNTS_UPDATED": (()=>jo),
    "DAILY_EVENT_FULLSCREEN": (()=>Io),
    "DAILY_EVENT_IFRAME_LAUNCH_CONFIG": (()=>Bi),
    "DAILY_EVENT_IFRAME_READY_FOR_LAUNCH_CONFIG": (()=>Fi),
    "DAILY_EVENT_INPUT_SETTINGS_UPDATED": (()=>Uo),
    "DAILY_EVENT_JOINED_MEETING": (()=>Hi),
    "DAILY_EVENT_JOINING_MEETING": (()=>Wi),
    "DAILY_EVENT_LANG_UPDATED": (()=>Fo),
    "DAILY_EVENT_LEFT_MEETING": (()=>Gi),
    "DAILY_EVENT_LIVE_STREAMING_ERROR": (()=>Ro),
    "DAILY_EVENT_LIVE_STREAMING_STARTED": (()=>Lo),
    "DAILY_EVENT_LIVE_STREAMING_STOPPED": (()=>No),
    "DAILY_EVENT_LIVE_STREAMING_UPDATED": (()=>Do),
    "DAILY_EVENT_LOADED": (()=>$i),
    "DAILY_EVENT_LOADING": (()=>Vi),
    "DAILY_EVENT_LOAD_ATTEMPT_FAILED": (()=>Ji),
    "DAILY_EVENT_LOCAL_SCREEN_SHARE_CANCELED": (()=>Co),
    "DAILY_EVENT_LOCAL_SCREEN_SHARE_STARTED": (()=>ko),
    "DAILY_EVENT_LOCAL_SCREEN_SHARE_STOPPED": (()=>Mo),
    "DAILY_EVENT_MEETING_SESSION_DATA_ERROR": (()=>no),
    "DAILY_EVENT_MEETING_SESSION_STATE_UPDATED": (()=>to),
    "DAILY_EVENT_MEETING_SESSION_SUMMARY_UPDATED": (()=>eo),
    "DAILY_EVENT_NETWORK_CONNECTION": (()=>Po),
    "DAILY_EVENT_NETWORK_QUALITY_CHANGE": (()=>Oo),
    "DAILY_EVENT_NONFATAL_ERROR": (()=>Vo),
    "DAILY_EVENT_PARTICIPANT_COUNTS_UPDATED": (()=>Xi),
    "DAILY_EVENT_PARTICIPANT_JOINED": (()=>Qi),
    "DAILY_EVENT_PARTICIPANT_LEFT": (()=>Yi),
    "DAILY_EVENT_PARTICIPANT_UPDATED": (()=>Ki),
    "DAILY_EVENT_RECEIVE_SETTINGS_UPDATED": (()=>Bo),
    "DAILY_EVENT_RECORDING_DATA": (()=>mo),
    "DAILY_EVENT_RECORDING_ERROR": (()=>vo),
    "DAILY_EVENT_RECORDING_STARTED": (()=>po),
    "DAILY_EVENT_RECORDING_STATS": (()=>fo),
    "DAILY_EVENT_RECORDING_STOPPED": (()=>ho),
    "DAILY_EVENT_RECORDING_UPLOAD_COMPLETED": (()=>go),
    "DAILY_EVENT_REMOTE_MEDIA_PLAYER_STARTED": (()=>_o),
    "DAILY_EVENT_REMOTE_MEDIA_PLAYER_STOPPED": (()=>So),
    "DAILY_EVENT_REMOTE_MEDIA_PLAYER_UPDATED": (()=>wo),
    "DAILY_EVENT_STARTED_CAMERA": (()=>qi),
    "DAILY_EVENT_THEME_UPDATED": (()=>Ui),
    "DAILY_EVENT_TRACK_STARTED": (()=>so),
    "DAILY_EVENT_TRACK_STOPPED": (()=>ao),
    "DAILY_EVENT_TRANSCRIPTION_ERROR": (()=>uo),
    "DAILY_EVENT_TRANSCRIPTION_MSG": (()=>bo),
    "DAILY_EVENT_TRANSCRIPTION_STARTED": (()=>co),
    "DAILY_EVENT_TRANSCRIPTION_STOPPED": (()=>lo),
    "DAILY_EVENT_WAITING_PARTICIPANT_ADDED": (()=>ro),
    "DAILY_EVENT_WAITING_PARTICIPANT_REMOVED": (()=>oo),
    "DAILY_EVENT_WAITING_PARTICIPANT_UPDATED": (()=>io),
    "DAILY_FATAL_ERROR_CONNECTION": (()=>Pi),
    "DAILY_FATAL_ERROR_EJECTED": (()=>_i),
    "DAILY_FATAL_ERROR_EOL": (()=>Ti),
    "DAILY_FATAL_ERROR_EXP_ROOM": (()=>ki),
    "DAILY_FATAL_ERROR_EXP_TOKEN": (()=>Mi),
    "DAILY_FATAL_ERROR_MEETING_FULL": (()=>Ei),
    "DAILY_FATAL_ERROR_NBF_ROOM": (()=>wi),
    "DAILY_FATAL_ERROR_NBF_TOKEN": (()=>Si),
    "DAILY_FATAL_ERROR_NOT_ALLOWED": (()=>Oi),
    "DAILY_FATAL_ERROR_NO_ROOM": (()=>Ci),
    "DAILY_RECEIVE_SETTINGS_ALL_PARTICIPANTS_KEY": (()=>bi),
    "DAILY_RECEIVE_SETTINGS_BASE_KEY": (()=>yi),
    "DAILY_STATE_ERROR": (()=>ai),
    "DAILY_STATE_JOINED": (()=>oi),
    "DAILY_STATE_JOINING": (()=>ii),
    "DAILY_STATE_LEFT": (()=>si),
    "DAILY_STATE_NEW": (()=>ti),
    "DAILY_TRACK_STATE_BLOCKED": (()=>ci),
    "DAILY_TRACK_STATE_INTERRUPTED": (()=>pi),
    "DAILY_TRACK_STATE_LOADING": (()=>di),
    "DAILY_TRACK_STATE_OFF": (()=>li),
    "DAILY_TRACK_STATE_PLAYABLE": (()=>hi),
    "DAILY_TRACK_STATE_SENDABLE": (()=>ui),
    "default": (()=>Ha)
});
function e(e, t) {
    if (null == e) return {};
    var n, r, i = function(e, t) {
        if (null == e) return {};
        var n = {};
        for(var r in e)if (({}).hasOwnProperty.call(e, r)) {
            if (-1 !== t.indexOf(r)) continue;
            n[r] = e[r];
        }
        return n;
    }(e, t);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        for(r = 0; r < o.length; r++)n = o[r], -1 === t.indexOf(n) && ({}).propertyIsEnumerable.call(e, n) && (i[n] = e[n]);
    }
    return i;
}
function t(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}
function n(e) {
    return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
        return typeof e;
    } : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    }, n(e);
}
function r(e) {
    var t = function(e, t) {
        if ("object" != n(e) || !e) return e;
        var r = e[Symbol.toPrimitive];
        if (void 0 !== r) {
            var i = r.call(e, t || "default");
            if ("object" != n(i)) return i;
            throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (("TURBOPACK compile-time truthy", 1) ? String : ("TURBOPACK unreachable", undefined))(e);
    }(e, "string");
    return "symbol" == n(t) ? t : t + "";
}
function i(e, t) {
    for(var n = 0; n < t.length; n++){
        var i = t[n];
        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, r(i.key), i);
    }
}
function o(e, t, n) {
    return t && i(e.prototype, t), n && i(e, n), Object.defineProperty(e, "prototype", {
        writable: !1
    }), e;
}
function s(e, t) {
    if (t && ("object" == n(t) || "function" == typeof t)) return t;
    if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
    return function(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
    }(e);
}
function a(e) {
    return a = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e) {
        return e.__proto__ || Object.getPrototypeOf(e);
    }, a(e);
}
function c(e, t) {
    return c = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e, t) {
        return e.__proto__ = t, e;
    }, c(e, t);
}
function l(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
    e.prototype = Object.create(t && t.prototype, {
        constructor: {
            value: e,
            writable: !0,
            configurable: !0
        }
    }), Object.defineProperty(e, "prototype", {
        writable: !1
    }), t && c(e, t);
}
function u(e, t, n) {
    return (t = r(t)) in e ? Object.defineProperty(e, t, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : e[t] = n, e;
}
function d(e, t, n, r, i, o, s) {
    try {
        var a = e[o](s), c = a.value;
    } catch (e) {
        return void n(e);
    }
    a.done ? t(c) : Promise.resolve(c).then(r, i);
}
function p(e) {
    return function() {
        var t = this, n = arguments;
        return new Promise(function(r, i) {
            var o = e.apply(t, n);
            function s(e) {
                d(o, r, i, s, a, "next", e);
            }
            function a(e) {
                d(o, r, i, s, a, "throw", e);
            }
            s(void 0);
        });
    };
}
function h(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for(var n = 0, r = Array(t); n < t; n++)r[n] = e[n];
    return r;
}
function f(e, t) {
    return function(e) {
        if (Array.isArray(e)) return e;
    }(e) || function(e, t) {
        var n = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
        if (null != n) {
            var r, i, o, s, a = [], c = !0, l = !1;
            try {
                if (o = (n = n.call(e)).next, 0 === t) {
                    if (Object(n) !== n) return;
                    c = !1;
                } else for(; !(c = (r = o.call(n)).done) && (a.push(r.value), a.length !== t); c = !0);
            } catch (e) {
                l = !0, i = e;
            } finally{
                try {
                    if (!c && null != n.return && (s = n.return(), Object(s) !== s)) return;
                } finally{
                    if (l) throw i;
                }
            }
            return a;
        }
    }(e, t) || function(e, t) {
        if (e) {
            if ("string" == typeof e) return h(e, t);
            var n = ({}).toString.call(e).slice(8, -1);
            return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? h(e, t) : void 0;
        }
    }(e, t) || function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
}
function v(e) {
    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
var g, m = {
    exports: {}
};
var y = function() {
    if (g) return m.exports;
    g = 1;
    var e, t = "object" == typeof Reflect ? Reflect : null, n = t && "function" == typeof t.apply ? t.apply : function(e, t, n) {
        return Function.prototype.apply.call(e, t, n);
    };
    e = t && "function" == typeof t.ownKeys ? t.ownKeys : Object.getOwnPropertySymbols ? function(e) {
        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
    } : function(e) {
        return Object.getOwnPropertyNames(e);
    };
    var r = Number.isNaN || function(e) {
        return e != e;
    };
    function i() {
        i.init.call(this);
    }
    m.exports = i, m.exports.once = function(e, t) {
        return new Promise(function(n, r) {
            function i(n) {
                e.removeListener(t, o), r(n);
            }
            function o() {
                "function" == typeof e.removeListener && e.removeListener("error", i), n([].slice.call(arguments));
            }
            f(e, t, o, {
                once: !0
            }), "error" !== t && function(e, t, n) {
                "function" == typeof e.on && f(e, "error", t, n);
            }(e, i, {
                once: !0
            });
        });
    }, i.EventEmitter = i, i.prototype._events = void 0, i.prototype._eventsCount = 0, i.prototype._maxListeners = void 0;
    var o = 10;
    function s(e) {
        if ("function" != typeof e) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
    }
    function a(e) {
        return void 0 === e._maxListeners ? i.defaultMaxListeners : e._maxListeners;
    }
    function c(e, t, n, r) {
        var i, o, c, l;
        if (s(n), void 0 === (o = e._events) ? (o = e._events = Object.create(null), e._eventsCount = 0) : (void 0 !== o.newListener && (e.emit("newListener", t, n.listener ? n.listener : n), o = e._events), c = o[t]), void 0 === c) c = o[t] = n, ++e._eventsCount;
        else if ("function" == typeof c ? c = o[t] = r ? [
            n,
            c
        ] : [
            c,
            n
        ] : r ? c.unshift(n) : c.push(n), (i = a(e)) > 0 && c.length > i && !c.warned) {
            c.warned = !0;
            var u = new Error("Possible EventEmitter memory leak detected. " + c.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            u.name = "MaxListenersExceededWarning", u.emitter = e, u.type = t, u.count = c.length, l = u, console && console.warn && console.warn(l);
        }
        return e;
    }
    function l() {
        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
    }
    function u(e, t, n) {
        var r = {
            fired: !1,
            wrapFn: void 0,
            target: e,
            type: t,
            listener: n
        }, i = l.bind(r);
        return i.listener = n, r.wrapFn = i, i;
    }
    function d(e, t, n) {
        var r = e._events;
        if (void 0 === r) return [];
        var i = r[t];
        return void 0 === i ? [] : "function" == typeof i ? n ? [
            i.listener || i
        ] : [
            i
        ] : n ? function(e) {
            for(var t = new Array(e.length), n = 0; n < t.length; ++n)t[n] = e[n].listener || e[n];
            return t;
        }(i) : h(i, i.length);
    }
    function p(e) {
        var t = this._events;
        if (void 0 !== t) {
            var n = t[e];
            if ("function" == typeof n) return 1;
            if (void 0 !== n) return n.length;
        }
        return 0;
    }
    function h(e, t) {
        for(var n = new Array(t), r = 0; r < t; ++r)n[r] = e[r];
        return n;
    }
    function f(e, t, n, r) {
        if ("function" == typeof e.on) r.once ? e.once(t, n) : e.on(t, n);
        else {
            if ("function" != typeof e.addEventListener) throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e);
            e.addEventListener(t, function i(o) {
                r.once && e.removeEventListener(t, i), n(o);
            });
        }
    }
    return Object.defineProperty(i, "defaultMaxListeners", {
        enumerable: !0,
        get: function() {
            return o;
        },
        set: function(e) {
            if ("number" != typeof e || e < 0 || r(e)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
            o = e;
        }
    }), i.init = function() {
        void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
    }, i.prototype.setMaxListeners = function(e) {
        if ("number" != typeof e || e < 0 || r(e)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
        return this._maxListeners = e, this;
    }, i.prototype.getMaxListeners = function() {
        return a(this);
    }, i.prototype.emit = function(e) {
        for(var t = [], r = 1; r < arguments.length; r++)t.push(arguments[r]);
        var i = "error" === e, o = this._events;
        if (void 0 !== o) i = i && void 0 === o.error;
        else if (!i) return !1;
        if (i) {
            var s;
            if (t.length > 0 && (s = t[0]), s instanceof Error) throw s;
            var a = new Error("Unhandled error." + (s ? " (" + s.message + ")" : ""));
            throw a.context = s, a;
        }
        var c = o[e];
        if (void 0 === c) return !1;
        if ("function" == typeof c) n(c, this, t);
        else {
            var l = c.length, u = h(c, l);
            for(r = 0; r < l; ++r)n(u[r], this, t);
        }
        return !0;
    }, i.prototype.addListener = function(e, t) {
        return c(this, e, t, !1);
    }, i.prototype.on = i.prototype.addListener, i.prototype.prependListener = function(e, t) {
        return c(this, e, t, !0);
    }, i.prototype.once = function(e, t) {
        return s(t), this.on(e, u(this, e, t)), this;
    }, i.prototype.prependOnceListener = function(e, t) {
        return s(t), this.prependListener(e, u(this, e, t)), this;
    }, i.prototype.removeListener = function(e, t) {
        var n, r, i, o, a;
        if (s(t), void 0 === (r = this._events)) return this;
        if (void 0 === (n = r[e])) return this;
        if (n === t || n.listener === t) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete r[e], r.removeListener && this.emit("removeListener", e, n.listener || t));
        else if ("function" != typeof n) {
            for(i = -1, o = n.length - 1; o >= 0; o--)if (n[o] === t || n[o].listener === t) {
                a = n[o].listener, i = o;
                break;
            }
            if (i < 0) return this;
            0 === i ? n.shift() : function(e, t) {
                for(; t + 1 < e.length; t++)e[t] = e[t + 1];
                e.pop();
            }(n, i), 1 === n.length && (r[e] = n[0]), void 0 !== r.removeListener && this.emit("removeListener", e, a || t);
        }
        return this;
    }, i.prototype.off = i.prototype.removeListener, i.prototype.removeAllListeners = function(e) {
        var t, n, r;
        if (void 0 === (n = this._events)) return this;
        if (void 0 === n.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== n[e] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete n[e]), this;
        if (0 === arguments.length) {
            var i, o = Object.keys(n);
            for(r = 0; r < o.length; ++r)"removeListener" !== (i = o[r]) && this.removeAllListeners(i);
            return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
        }
        if ("function" == typeof (t = n[e])) this.removeListener(e, t);
        else if (void 0 !== t) for(r = t.length - 1; r >= 0; r--)this.removeListener(e, t[r]);
        return this;
    }, i.prototype.listeners = function(e) {
        return d(this, e, !0);
    }, i.prototype.rawListeners = function(e) {
        return d(this, e, !1);
    }, i.listenerCount = function(e, t) {
        return "function" == typeof e.listenerCount ? e.listenerCount(t) : p.call(e, t);
    }, i.prototype.listenerCount = p, i.prototype.eventNames = function() {
        return this._eventsCount > 0 ? e(this._events) : [];
    }, m.exports;
}(), b = v(y), _ = Object.prototype.hasOwnProperty;
function w(e, t, n) {
    for (n of e.keys())if (S(n, t)) return n;
}
function S(e, t) {
    var n, r, i;
    if (e === t) return !0;
    if (e && t && (n = e.constructor) === t.constructor) {
        if (n === Date) return e.getTime() === t.getTime();
        if (n === RegExp) return e.toString() === t.toString();
        if (n === Array) {
            if ((r = e.length) === t.length) for(; r-- && S(e[r], t[r]););
            return -1 === r;
        }
        if (n === Set) {
            if (e.size !== t.size) return !1;
            for (r of e){
                if ((i = r) && "object" == typeof i && !(i = w(t, i))) return !1;
                if (!t.has(i)) return !1;
            }
            return !0;
        }
        if (n === Map) {
            if (e.size !== t.size) return !1;
            for (r of e){
                if ((i = r[0]) && "object" == typeof i && !(i = w(t, i))) return !1;
                if (!S(r[1], t.get(i))) return !1;
            }
            return !0;
        }
        if (n === ArrayBuffer) e = new Uint8Array(e), t = new Uint8Array(t);
        else if (n === DataView) {
            if ((r = e.byteLength) === t.byteLength) for(; r-- && e.getInt8(r) === t.getInt8(r););
            return -1 === r;
        }
        if (ArrayBuffer.isView(e)) {
            if ((r = e.byteLength) === t.byteLength) for(; r-- && e[r] === t[r];);
            return -1 === r;
        }
        if (!n || "object" == typeof e) {
            for(n in r = 0, e){
                if (_.call(e, n) && ++r && !_.call(t, n)) return !1;
                if (!(n in t) || !S(e[n], t[n])) return !1;
            }
            return Object.keys(t).length === r;
        }
    }
    return e != e && t != t;
}
const k = {
    "Amazon Silk": "amazon_silk",
    "Android Browser": "android",
    Bada: "bada",
    BlackBerry: "blackberry",
    Chrome: "chrome",
    Chromium: "chromium",
    Electron: "electron",
    Epiphany: "epiphany",
    Firefox: "firefox",
    Focus: "focus",
    Generic: "generic",
    "Google Search": "google_search",
    Googlebot: "googlebot",
    "Internet Explorer": "ie",
    "K-Meleon": "k_meleon",
    Maxthon: "maxthon",
    "Microsoft Edge": "edge",
    "MZ Browser": "mz",
    "NAVER Whale Browser": "naver",
    Opera: "opera",
    "Opera Coast": "opera_coast",
    PhantomJS: "phantomjs",
    Puffin: "puffin",
    QupZilla: "qupzilla",
    QQ: "qq",
    QQLite: "qqlite",
    Safari: "safari",
    Sailfish: "sailfish",
    "Samsung Internet for Android": "samsung_internet",
    SeaMonkey: "seamonkey",
    Sleipnir: "sleipnir",
    Swing: "swing",
    Tizen: "tizen",
    "UC Browser": "uc",
    Vivaldi: "vivaldi",
    "WebOS Browser": "webos",
    WeChat: "wechat",
    "Yandex Browser": "yandex",
    Roku: "roku"
}, M = {
    amazon_silk: "Amazon Silk",
    android: "Android Browser",
    bada: "Bada",
    blackberry: "BlackBerry",
    chrome: "Chrome",
    chromium: "Chromium",
    electron: "Electron",
    epiphany: "Epiphany",
    firefox: "Firefox",
    focus: "Focus",
    generic: "Generic",
    googlebot: "Googlebot",
    google_search: "Google Search",
    ie: "Internet Explorer",
    k_meleon: "K-Meleon",
    maxthon: "Maxthon",
    edge: "Microsoft Edge",
    mz: "MZ Browser",
    naver: "NAVER Whale Browser",
    opera: "Opera",
    opera_coast: "Opera Coast",
    phantomjs: "PhantomJS",
    puffin: "Puffin",
    qupzilla: "QupZilla",
    qq: "QQ Browser",
    qqlite: "QQ Browser Lite",
    safari: "Safari",
    sailfish: "Sailfish",
    samsung_internet: "Samsung Internet for Android",
    seamonkey: "SeaMonkey",
    sleipnir: "Sleipnir",
    swing: "Swing",
    tizen: "Tizen",
    uc: "UC Browser",
    vivaldi: "Vivaldi",
    webos: "WebOS Browser",
    wechat: "WeChat",
    yandex: "Yandex Browser"
}, C = {
    tablet: "tablet",
    mobile: "mobile",
    desktop: "desktop",
    tv: "tv"
}, E = {
    WindowsPhone: "Windows Phone",
    Windows: "Windows",
    MacOS: "macOS",
    iOS: "iOS",
    Android: "Android",
    WebOS: "WebOS",
    BlackBerry: "BlackBerry",
    Bada: "Bada",
    Tizen: "Tizen",
    Linux: "Linux",
    ChromeOS: "Chrome OS",
    PlayStation4: "PlayStation 4",
    Roku: "Roku"
}, T = {
    EdgeHTML: "EdgeHTML",
    Blink: "Blink",
    Trident: "Trident",
    Presto: "Presto",
    Gecko: "Gecko",
    WebKit: "WebKit"
};
class O {
    static getFirstMatch(e, t) {
        const n = t.match(e);
        return n && n.length > 0 && n[1] || "";
    }
    static getSecondMatch(e, t) {
        const n = t.match(e);
        return n && n.length > 1 && n[2] || "";
    }
    static matchAndReturnConst(e, t, n) {
        if (e.test(t)) return n;
    }
    static getWindowsVersionName(e) {
        switch(e){
            case "NT":
                return "NT";
            case "XP":
            case "NT 5.1":
                return "XP";
            case "NT 5.0":
                return "2000";
            case "NT 5.2":
                return "2003";
            case "NT 6.0":
                return "Vista";
            case "NT 6.1":
                return "7";
            case "NT 6.2":
                return "8";
            case "NT 6.3":
                return "8.1";
            case "NT 10.0":
                return "10";
            default:
                return;
        }
    }
    static getMacOSVersionName(e) {
        const t = e.split(".").splice(0, 2).map((e)=>parseInt(e, 10) || 0);
        if (t.push(0), 10 === t[0]) switch(t[1]){
            case 5:
                return "Leopard";
            case 6:
                return "Snow Leopard";
            case 7:
                return "Lion";
            case 8:
                return "Mountain Lion";
            case 9:
                return "Mavericks";
            case 10:
                return "Yosemite";
            case 11:
                return "El Capitan";
            case 12:
                return "Sierra";
            case 13:
                return "High Sierra";
            case 14:
                return "Mojave";
            case 15:
                return "Catalina";
            default:
                return;
        }
    }
    static getAndroidVersionName(e) {
        const t = e.split(".").splice(0, 2).map((e)=>parseInt(e, 10) || 0);
        if (t.push(0), !(1 === t[0] && t[1] < 5)) return 1 === t[0] && t[1] < 6 ? "Cupcake" : 1 === t[0] && t[1] >= 6 ? "Donut" : 2 === t[0] && t[1] < 2 ? "Eclair" : 2 === t[0] && 2 === t[1] ? "Froyo" : 2 === t[0] && t[1] > 2 ? "Gingerbread" : 3 === t[0] ? "Honeycomb" : 4 === t[0] && t[1] < 1 ? "Ice Cream Sandwich" : 4 === t[0] && t[1] < 4 ? "Jelly Bean" : 4 === t[0] && t[1] >= 4 ? "KitKat" : 5 === t[0] ? "Lollipop" : 6 === t[0] ? "Marshmallow" : 7 === t[0] ? "Nougat" : 8 === t[0] ? "Oreo" : 9 === t[0] ? "Pie" : void 0;
    }
    static getVersionPrecision(e) {
        return e.split(".").length;
    }
    static compareVersions(e, t, n = !1) {
        const r = O.getVersionPrecision(e), i = O.getVersionPrecision(t);
        let o = Math.max(r, i), s = 0;
        const a = O.map([
            e,
            t
        ], (e)=>{
            const t = o - O.getVersionPrecision(e), n = e + new Array(t + 1).join(".0");
            return O.map(n.split("."), (e)=>new Array(20 - e.length).join("0") + e).reverse();
        });
        for(n && (s = o - Math.min(r, i)), o -= 1; o >= s;){
            if (a[0][o] > a[1][o]) return 1;
            if (a[0][o] === a[1][o]) {
                if (o === s) return 0;
                o -= 1;
            } else if (a[0][o] < a[1][o]) return -1;
        }
    }
    static map(e, t) {
        const n = [];
        let r;
        if (Array.prototype.map) return Array.prototype.map.call(e, t);
        for(r = 0; r < e.length; r += 1)n.push(t(e[r]));
        return n;
    }
    static find(e, t) {
        let n, r;
        if (Array.prototype.find) return Array.prototype.find.call(e, t);
        for(n = 0, r = e.length; n < r; n += 1){
            const r = e[n];
            if (t(r, n)) return r;
        }
    }
    static assign(e, ...t) {
        const n = e;
        let r, i;
        if ("TURBOPACK compile-time truthy", 1) return Object.assign(e, ...t);
        "TURBOPACK unreachable";
    }
    static getBrowserAlias(e) {
        return k[e];
    }
    static getBrowserTypeByAlias(e) {
        return M[e] || "";
    }
}
const P = /version\/(\d+(\.?_?\d+)+)/i, A = [
    {
        test: [
            /googlebot/i
        ],
        describe (e) {
            const t = {
                name: "Googlebot"
            }, n = O.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /opera/i
        ],
        describe (e) {
            const t = {
                name: "Opera"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /opr\/|opios/i
        ],
        describe (e) {
            const t = {
                name: "Opera"
            }, n = O.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /SamsungBrowser/i
        ],
        describe (e) {
            const t = {
                name: "Samsung Internet for Android"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /Whale/i
        ],
        describe (e) {
            const t = {
                name: "NAVER Whale Browser"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /MZBrowser/i
        ],
        describe (e) {
            const t = {
                name: "MZ Browser"
            }, n = O.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /focus/i
        ],
        describe (e) {
            const t = {
                name: "Focus"
            }, n = O.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /swing/i
        ],
        describe (e) {
            const t = {
                name: "Swing"
            }, n = O.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /coast/i
        ],
        describe (e) {
            const t = {
                name: "Opera Coast"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /opt\/\d+(?:.?_?\d+)+/i
        ],
        describe (e) {
            const t = {
                name: "Opera Touch"
            }, n = O.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /yabrowser/i
        ],
        describe (e) {
            const t = {
                name: "Yandex Browser"
            }, n = O.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /ucbrowser/i
        ],
        describe (e) {
            const t = {
                name: "UC Browser"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /Maxthon|mxios/i
        ],
        describe (e) {
            const t = {
                name: "Maxthon"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /epiphany/i
        ],
        describe (e) {
            const t = {
                name: "Epiphany"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /puffin/i
        ],
        describe (e) {
            const t = {
                name: "Puffin"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /sleipnir/i
        ],
        describe (e) {
            const t = {
                name: "Sleipnir"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /k-meleon/i
        ],
        describe (e) {
            const t = {
                name: "K-Meleon"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /micromessenger/i
        ],
        describe (e) {
            const t = {
                name: "WeChat"
            }, n = O.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /qqbrowser/i
        ],
        describe (e) {
            const t = {
                name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser"
            }, n = O.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /msie|trident/i
        ],
        describe (e) {
            const t = {
                name: "Internet Explorer"
            }, n = O.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /\sedg\//i
        ],
        describe (e) {
            const t = {
                name: "Microsoft Edge"
            }, n = O.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /edg([ea]|ios)/i
        ],
        describe (e) {
            const t = {
                name: "Microsoft Edge"
            }, n = O.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /vivaldi/i
        ],
        describe (e) {
            const t = {
                name: "Vivaldi"
            }, n = O.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /seamonkey/i
        ],
        describe (e) {
            const t = {
                name: "SeaMonkey"
            }, n = O.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /sailfish/i
        ],
        describe (e) {
            const t = {
                name: "Sailfish"
            }, n = O.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /silk/i
        ],
        describe (e) {
            const t = {
                name: "Amazon Silk"
            }, n = O.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /phantom/i
        ],
        describe (e) {
            const t = {
                name: "PhantomJS"
            }, n = O.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /slimerjs/i
        ],
        describe (e) {
            const t = {
                name: "SlimerJS"
            }, n = O.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /blackberry|\bbb\d+/i,
            /rim\stablet/i
        ],
        describe (e) {
            const t = {
                name: "BlackBerry"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /(web|hpw)[o0]s/i
        ],
        describe (e) {
            const t = {
                name: "WebOS Browser"
            }, n = O.getFirstMatch(P, e) || O.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /bada/i
        ],
        describe (e) {
            const t = {
                name: "Bada"
            }, n = O.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /tizen/i
        ],
        describe (e) {
            const t = {
                name: "Tizen"
            }, n = O.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /qupzilla/i
        ],
        describe (e) {
            const t = {
                name: "QupZilla"
            }, n = O.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /firefox|iceweasel|fxios/i
        ],
        describe (e) {
            const t = {
                name: "Firefox"
            }, n = O.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /electron/i
        ],
        describe (e) {
            const t = {
                name: "Electron"
            }, n = O.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /MiuiBrowser/i
        ],
        describe (e) {
            const t = {
                name: "Miui"
            }, n = O.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /chromium/i
        ],
        describe (e) {
            const t = {
                name: "Chromium"
            }, n = O.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /chrome|crios|crmo/i
        ],
        describe (e) {
            const t = {
                name: "Chrome"
            }, n = O.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /GSA/i
        ],
        describe (e) {
            const t = {
                name: "Google Search"
            }, n = O.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test (e) {
            const t = !e.test(/like android/i), n = e.test(/android/i);
            return t && n;
        },
        describe (e) {
            const t = {
                name: "Android Browser"
            }, n = O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /playstation 4/i
        ],
        describe (e) {
            const t = {
                name: "PlayStation 4"
            }, n = O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /safari|applewebkit/i
        ],
        describe (e) {
            const t = {
                name: "Safari"
            }, n = O.getFirstMatch(P, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /.*/i
        ],
        describe (e) {
            const t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
            return {
                name: O.getFirstMatch(t, e),
                version: O.getSecondMatch(t, e)
            };
        }
    }
];
var j = [
    {
        test: [
            /Roku\/DVP/
        ],
        describe (e) {
            const t = O.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e);
            return {
                name: E.Roku,
                version: t
            };
        }
    },
    {
        test: [
            /windows phone/i
        ],
        describe (e) {
            const t = O.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e);
            return {
                name: E.WindowsPhone,
                version: t
            };
        }
    },
    {
        test: [
            /windows /i
        ],
        describe (e) {
            const t = O.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e), n = O.getWindowsVersionName(t);
            return {
                name: E.Windows,
                version: t,
                versionName: n
            };
        }
    },
    {
        test: [
            /Macintosh(.*?) FxiOS(.*?)\//
        ],
        describe (e) {
            const t = {
                name: E.iOS
            }, n = O.getSecondMatch(/(Version\/)(\d[\d.]+)/, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /macintosh/i
        ],
        describe (e) {
            const t = O.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e).replace(/[_\s]/g, "."), n = O.getMacOSVersionName(t), r = {
                name: E.MacOS,
                version: t
            };
            return n && (r.versionName = n), r;
        }
    },
    {
        test: [
            /(ipod|iphone|ipad)/i
        ],
        describe (e) {
            const t = O.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e).replace(/[_\s]/g, ".");
            return {
                name: E.iOS,
                version: t
            };
        }
    },
    {
        test (e) {
            const t = !e.test(/like android/i), n = e.test(/android/i);
            return t && n;
        },
        describe (e) {
            const t = O.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e), n = O.getAndroidVersionName(t), r = {
                name: E.Android,
                version: t
            };
            return n && (r.versionName = n), r;
        }
    },
    {
        test: [
            /(web|hpw)[o0]s/i
        ],
        describe (e) {
            const t = O.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e), n = {
                name: E.WebOS
            };
            return t && t.length && (n.version = t), n;
        }
    },
    {
        test: [
            /blackberry|\bbb\d+/i,
            /rim\stablet/i
        ],
        describe (e) {
            const t = O.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e) || O.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e) || O.getFirstMatch(/\bbb(\d+)/i, e);
            return {
                name: E.BlackBerry,
                version: t
            };
        }
    },
    {
        test: [
            /bada/i
        ],
        describe (e) {
            const t = O.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e);
            return {
                name: E.Bada,
                version: t
            };
        }
    },
    {
        test: [
            /tizen/i
        ],
        describe (e) {
            const t = O.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e);
            return {
                name: E.Tizen,
                version: t
            };
        }
    },
    {
        test: [
            /linux/i
        ],
        describe: ()=>({
                name: E.Linux
            })
    },
    {
        test: [
            /CrOS/
        ],
        describe: ()=>({
                name: E.ChromeOS
            })
    },
    {
        test: [
            /PlayStation 4/
        ],
        describe (e) {
            const t = O.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e);
            return {
                name: E.PlayStation4,
                version: t
            };
        }
    }
], I = [
    {
        test: [
            /googlebot/i
        ],
        describe: ()=>({
                type: "bot",
                vendor: "Google"
            })
    },
    {
        test: [
            /huawei/i
        ],
        describe (e) {
            const t = O.getFirstMatch(/(can-l01)/i, e) && "Nova", n = {
                type: C.mobile,
                vendor: "Huawei"
            };
            return t && (n.model = t), n;
        }
    },
    {
        test: [
            /nexus\s*(?:7|8|9|10).*/i
        ],
        describe: ()=>({
                type: C.tablet,
                vendor: "Nexus"
            })
    },
    {
        test: [
            /ipad/i
        ],
        describe: ()=>({
                type: C.tablet,
                vendor: "Apple",
                model: "iPad"
            })
    },
    {
        test: [
            /Macintosh(.*?) FxiOS(.*?)\//
        ],
        describe: ()=>({
                type: C.tablet,
                vendor: "Apple",
                model: "iPad"
            })
    },
    {
        test: [
            /kftt build/i
        ],
        describe: ()=>({
                type: C.tablet,
                vendor: "Amazon",
                model: "Kindle Fire HD 7"
            })
    },
    {
        test: [
            /silk/i
        ],
        describe: ()=>({
                type: C.tablet,
                vendor: "Amazon"
            })
    },
    {
        test: [
            /tablet(?! pc)/i
        ],
        describe: ()=>({
                type: C.tablet
            })
    },
    {
        test (e) {
            const t = e.test(/ipod|iphone/i), n = e.test(/like (ipod|iphone)/i);
            return t && !n;
        },
        describe (e) {
            const t = O.getFirstMatch(/(ipod|iphone)/i, e);
            return {
                type: C.mobile,
                vendor: "Apple",
                model: t
            };
        }
    },
    {
        test: [
            /nexus\s*[0-6].*/i,
            /galaxy nexus/i
        ],
        describe: ()=>({
                type: C.mobile,
                vendor: "Nexus"
            })
    },
    {
        test: [
            /[^-]mobi/i
        ],
        describe: ()=>({
                type: C.mobile
            })
    },
    {
        test: (e)=>"blackberry" === e.getBrowserName(!0),
        describe: ()=>({
                type: C.mobile,
                vendor: "BlackBerry"
            })
    },
    {
        test: (e)=>"bada" === e.getBrowserName(!0),
        describe: ()=>({
                type: C.mobile
            })
    },
    {
        test: (e)=>"windows phone" === e.getBrowserName(),
        describe: ()=>({
                type: C.mobile,
                vendor: "Microsoft"
            })
    },
    {
        test (e) {
            const t = Number(String(e.getOSVersion()).split(".")[0]);
            return "android" === e.getOSName(!0) && t >= 3;
        },
        describe: ()=>({
                type: C.tablet
            })
    },
    {
        test: (e)=>"android" === e.getOSName(!0),
        describe: ()=>({
                type: C.mobile
            })
    },
    {
        test: (e)=>"macos" === e.getOSName(!0),
        describe: ()=>({
                type: C.desktop,
                vendor: "Apple"
            })
    },
    {
        test: (e)=>"windows" === e.getOSName(!0),
        describe: ()=>({
                type: C.desktop
            })
    },
    {
        test: (e)=>"linux" === e.getOSName(!0),
        describe: ()=>({
                type: C.desktop
            })
    },
    {
        test: (e)=>"playstation 4" === e.getOSName(!0),
        describe: ()=>({
                type: C.tv
            })
    },
    {
        test: (e)=>"roku" === e.getOSName(!0),
        describe: ()=>({
                type: C.tv
            })
    }
], x = [
    {
        test: (e)=>"microsoft edge" === e.getBrowserName(!0),
        describe (e) {
            if (/\sedg\//i.test(e)) return {
                name: T.Blink
            };
            const t = O.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e);
            return {
                name: T.EdgeHTML,
                version: t
            };
        }
    },
    {
        test: [
            /trident/i
        ],
        describe (e) {
            const t = {
                name: T.Trident
            }, n = O.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: (e)=>e.test(/presto/i),
        describe (e) {
            const t = {
                name: T.Presto
            }, n = O.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test (e) {
            const t = e.test(/gecko/i), n = e.test(/like gecko/i);
            return t && !n;
        },
        describe (e) {
            const t = {
                name: T.Gecko
            }, n = O.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    },
    {
        test: [
            /(apple)?webkit\/537\.36/i
        ],
        describe: ()=>({
                name: T.Blink
            })
    },
    {
        test: [
            /(apple)?webkit/i
        ],
        describe (e) {
            const t = {
                name: T.WebKit
            }, n = O.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e);
            return n && (t.version = n), t;
        }
    }
];
class L {
    constructor(e, t = !1){
        if (null == e || "" === e) throw new Error("UserAgent parameter can't be empty");
        this._ua = e, this.parsedResult = {}, !0 !== t && this.parse();
    }
    getUA() {
        return this._ua;
    }
    test(e) {
        return e.test(this._ua);
    }
    parseBrowser() {
        this.parsedResult.browser = {};
        const e = O.find(A, (e)=>{
            if ("function" == typeof e.test) return e.test(this);
            if (e.test instanceof Array) return e.test.some((e)=>this.test(e));
            throw new Error("Browser's test function is not valid");
        });
        return e && (this.parsedResult.browser = e.describe(this.getUA())), this.parsedResult.browser;
    }
    getBrowser() {
        return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
    }
    getBrowserName(e) {
        return e ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
    }
    getBrowserVersion() {
        return this.getBrowser().version;
    }
    getOS() {
        return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
    }
    parseOS() {
        this.parsedResult.os = {};
        const e = O.find(j, (e)=>{
            if ("function" == typeof e.test) return e.test(this);
            if (e.test instanceof Array) return e.test.some((e)=>this.test(e));
            throw new Error("Browser's test function is not valid");
        });
        return e && (this.parsedResult.os = e.describe(this.getUA())), this.parsedResult.os;
    }
    getOSName(e) {
        const { name: t } = this.getOS();
        return e ? String(t).toLowerCase() || "" : t || "";
    }
    getOSVersion() {
        return this.getOS().version;
    }
    getPlatform() {
        return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
    }
    getPlatformType(e = !1) {
        const { type: t } = this.getPlatform();
        return e ? String(t).toLowerCase() || "" : t || "";
    }
    parsePlatform() {
        this.parsedResult.platform = {};
        const e = O.find(I, (e)=>{
            if ("function" == typeof e.test) return e.test(this);
            if (e.test instanceof Array) return e.test.some((e)=>this.test(e));
            throw new Error("Browser's test function is not valid");
        });
        return e && (this.parsedResult.platform = e.describe(this.getUA())), this.parsedResult.platform;
    }
    getEngine() {
        return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
    }
    getEngineName(e) {
        return e ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
    }
    parseEngine() {
        this.parsedResult.engine = {};
        const e = O.find(x, (e)=>{
            if ("function" == typeof e.test) return e.test(this);
            if (e.test instanceof Array) return e.test.some((e)=>this.test(e));
            throw new Error("Browser's test function is not valid");
        });
        return e && (this.parsedResult.engine = e.describe(this.getUA())), this.parsedResult.engine;
    }
    parse() {
        return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
    }
    getResult() {
        return O.assign({}, this.parsedResult);
    }
    satisfies(e) {
        const t = {};
        let n = 0;
        const r = {};
        let i = 0;
        if (Object.keys(e).forEach((o)=>{
            const s = e[o];
            "string" == typeof s ? (r[o] = s, i += 1) : "object" == typeof s && (t[o] = s, n += 1);
        }), n > 0) {
            const e = Object.keys(t), n = O.find(e, (e)=>this.isOS(e));
            if (n) {
                const e = this.satisfies(t[n]);
                if (void 0 !== e) return e;
            }
            const r = O.find(e, (e)=>this.isPlatform(e));
            if (r) {
                const e = this.satisfies(t[r]);
                if (void 0 !== e) return e;
            }
        }
        if (i > 0) {
            const e = Object.keys(r), t = O.find(e, (e)=>this.isBrowser(e, !0));
            if (void 0 !== t) return this.compareVersion(r[t]);
        }
    }
    isBrowser(e, t = !1) {
        const n = this.getBrowserName().toLowerCase();
        let r = e.toLowerCase();
        const i = O.getBrowserTypeByAlias(r);
        return t && i && (r = i.toLowerCase()), r === n;
    }
    compareVersion(e) {
        let t = [
            0
        ], n = e, r = !1;
        const i = this.getBrowserVersion();
        if ("string" == typeof i) return ">" === e[0] || "<" === e[0] ? (n = e.substr(1), "=" === e[1] ? (r = !0, n = e.substr(2)) : t = [], ">" === e[0] ? t.push(1) : t.push(-1)) : "=" === e[0] ? n = e.substr(1) : "~" === e[0] && (r = !0, n = e.substr(1)), t.indexOf(O.compareVersions(i, n, r)) > -1;
    }
    isOS(e) {
        return this.getOSName(!0) === String(e).toLowerCase();
    }
    isPlatform(e) {
        return this.getPlatformType(!0) === String(e).toLowerCase();
    }
    isEngine(e) {
        return this.getEngineName(!0) === String(e).toLowerCase();
    }
    is(e, t = !1) {
        return this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e);
    }
    some(e = []) {
        return e.some((e)=>this.is(e));
    }
}
/*!
 * Bowser - a browser detector
 * https://github.com/lancedikson/bowser
 * MIT License | (c) Dustin Diaz 2012-2015
 * MIT License | (c) Denis Demchenko 2015-2019
 */ class D {
    static getParser(e, t = !1) {
        if ("string" != typeof e) throw new Error("UserAgent should be a string");
        return new L(e, t);
    }
    static parse(e) {
        return new L(e).getResult();
    }
    static get BROWSER_MAP() {
        return M;
    }
    static get ENGINE_MAP() {
        return T;
    }
    static get OS_MAP() {
        return E;
    }
    static get PLATFORMS_MAP() {
        return C;
    }
}
function N() {
    return Date.now() + Math.random().toString();
}
function R() {
    throw new Error("Method must be implemented in subclass");
}
function F(e, t) {
    return null != t && t.proxyUrl ? t.proxyUrl + ("/" === t.proxyUrl.slice(-1) ? "" : "/") + e.substring(8) : e;
}
function B(e) {
    return null != e && e.callObjectBundleUrlOverride ? e.callObjectBundleUrlOverride : F("https://c.daily.co/call-machine/versioned/".concat("0.80.0", "/static/call-machine-object-bundle.js"), e);
}
function U(e) {
    try {
        new URL(e);
    } catch (e) {
        return !1;
    }
    return !0;
}
const V = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__, J = "8.55.0", $ = globalThis;
function q(e, t, n) {
    const r = n || $, i = r.__SENTRY__ = r.__SENTRY__ || {}, o = i[J] = i[J] || {};
    return o[e] || (o[e] = t());
}
const z = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__, W = [
    "debug",
    "info",
    "warn",
    "error",
    "log",
    "assert",
    "trace"
], H = {};
function G(e) {
    if (!("console" in $)) return e();
    const t = $.console, n = {}, r = Object.keys(H);
    r.forEach((e)=>{
        const r = H[e];
        n[e] = t[e], t[e] = r;
    });
    try {
        return e();
    } finally{
        r.forEach((e)=>{
            t[e] = n[e];
        });
    }
}
const Q = q("logger", function() {
    let e = !1;
    const t = {
        enable: ()=>{
            e = !0;
        },
        disable: ()=>{
            e = !1;
        },
        isEnabled: ()=>e
    };
    return z ? W.forEach((n)=>{
        t[n] = (...t)=>{
            e && G(()=>{
                $.console[n](`Sentry Logger [${n}]:`, ...t);
            });
        };
    }) : W.forEach((e)=>{
        t[e] = ()=>{};
    }), t;
}), K = "?", Y = /\(error: (.*)\)/, X = /captureMessage|captureException/;
function Z(e) {
    return e[e.length - 1] || {};
}
const ee = "<anonymous>";
function te(e) {
    try {
        return e && "function" == typeof e && e.name || ee;
    } catch (e) {
        return ee;
    }
}
function ne(e) {
    const t = e.exception;
    if (t) {
        const e = [];
        try {
            return t.values.forEach((t)=>{
                t.stacktrace.frames && e.push(...t.stacktrace.frames);
            }), e;
        } catch (e) {
            return;
        }
    }
}
const re = {}, ie = {};
function oe(e, t) {
    re[e] = re[e] || [], re[e].push(t);
}
function se(e, t) {
    if (!ie[e]) {
        ie[e] = !0;
        try {
            t();
        } catch (t) {
            z && Q.error(`Error while instrumenting ${e}`, t);
        }
    }
}
function ae(e, t) {
    const n = e && re[e];
    if (n) for (const r of n)try {
        r(t);
    } catch (t) {
        z && Q.error(`Error while triggering instrumentation handler.\nType: ${e}\nName: ${te(r)}\nError:`, t);
    }
}
let ce = null;
function le() {
    ce = $.onerror, $.onerror = function(e, t, n, r, i) {
        return ae("error", {
            column: r,
            error: i,
            line: n,
            msg: e,
            url: t
        }), !!ce && ce.apply(this, arguments);
    }, $.onerror.__SENTRY_INSTRUMENTED__ = !0;
}
let ue = null;
function de() {
    ue = $.onunhandledrejection, $.onunhandledrejection = function(e) {
        return ae("unhandledrejection", e), !ue || ue.apply(this, arguments);
    }, $.onunhandledrejection.__SENTRY_INSTRUMENTED__ = !0;
}
function pe() {
    return he($), $;
}
function he(e) {
    const t = e.__SENTRY__ = e.__SENTRY__ || {};
    return t.version = t.version || J, t[J] = t[J] || {};
}
const fe = Object.prototype.toString;
function ve(e) {
    switch(fe.call(e)){
        case "[object Error]":
        case "[object Exception]":
        case "[object DOMException]":
        case "[object WebAssembly.Exception]":
            return !0;
        default:
            return Ce(e, Error);
    }
}
function ge(e, t) {
    return fe.call(e) === `[object ${t}]`;
}
function me(e) {
    return ge(e, "ErrorEvent");
}
function ye(e) {
    return ge(e, "DOMError");
}
function be(e) {
    return ge(e, "String");
}
function _e(e) {
    return "object" == typeof e && null !== e && "__sentry_template_string__" in e && "__sentry_template_values__" in e;
}
function we(e) {
    return null === e || _e(e) || "object" != typeof e && "function" != typeof e;
}
function Se(e) {
    return ge(e, "Object");
}
function ke(e) {
    return "undefined" != typeof Event && Ce(e, Event);
}
function Me(e) {
    return Boolean(e && e.then && "function" == typeof e.then);
}
function Ce(e, t) {
    try {
        return e instanceof t;
    } catch (e) {
        return !1;
    }
}
function Ee(e) {
    return !("object" != typeof e || null === e || !e.__isVue && !e._isVue);
}
const Te = $;
function Oe(e, t = {}) {
    if (!e) return "<unknown>";
    try {
        let n = e;
        const r = 5, i = [];
        let o = 0, s = 0;
        const a = " > ", c = a.length;
        let l;
        const u = Array.isArray(t) ? t : t.keyAttrs, d = !Array.isArray(t) && t.maxStringLength || 80;
        for(; n && o++ < r && (l = Pe(n, u), !("html" === l || o > 1 && s + i.length * c + l.length >= d));)i.push(l), s += l.length, n = n.parentNode;
        return i.reverse().join(a);
    } catch (e) {
        return "<unknown>";
    }
}
function Pe(e, t) {
    const n = e, r = [];
    if (!n || !n.tagName) return "";
    if (Te.HTMLElement && n instanceof HTMLElement && n.dataset) {
        if (n.dataset.sentryComponent) return n.dataset.sentryComponent;
        if (n.dataset.sentryElement) return n.dataset.sentryElement;
    }
    r.push(n.tagName.toLowerCase());
    const i = t && t.length ? t.filter((e)=>n.getAttribute(e)).map((e)=>[
            e,
            n.getAttribute(e)
        ]) : null;
    if (i && i.length) i.forEach((e)=>{
        r.push(`[${e[0]}="${e[1]}"]`);
    });
    else {
        n.id && r.push(`#${n.id}`);
        const e = n.className;
        if (e && be(e)) {
            const t = e.split(/\s+/);
            for (const e of t)r.push(`.${e}`);
        }
    }
    const o = [
        "aria-label",
        "type",
        "name",
        "title",
        "alt"
    ];
    for (const e of o){
        const t = n.getAttribute(e);
        t && r.push(`[${e}="${t}"]`);
    }
    return r.join("");
}
function Ae(e, t = 0) {
    return "string" != typeof e || 0 === t || e.length <= t ? e : `${e.slice(0, t)}...`;
}
function je(e, t) {
    if (!Array.isArray(e)) return "";
    const n = [];
    for(let t = 0; t < e.length; t++){
        const r = e[t];
        try {
            Ee(r) ? n.push("[VueViewModel]") : n.push(String(r));
        } catch (e) {
            n.push("[value cannot be serialized]");
        }
    }
    return n.join(t);
}
function Ie(e, t, n = !1) {
    return !!be(e) && (ge(t, "RegExp") ? t.test(e) : !!be(t) && (n ? e === t : e.includes(t)));
}
function xe(e, t = [], n = !1) {
    return t.some((t)=>Ie(e, t, n));
}
function Le(e, t, n) {
    if (!(t in e)) return;
    const r = e[t], i = n(r);
    "function" == typeof i && Ne(i, r);
    try {
        e[t] = i;
    } catch (n) {
        z && Q.log(`Failed to replace method "${t}" in object`, e);
    }
}
function De(e, t, n) {
    try {
        Object.defineProperty(e, t, {
            value: n,
            writable: !0,
            configurable: !0
        });
    } catch (n) {
        z && Q.log(`Failed to add non-enumerable property "${t}" to object`, e);
    }
}
function Ne(e, t) {
    try {
        const n = t.prototype || {};
        e.prototype = t.prototype = n, De(e, "__sentry_original__", t);
    } catch (e) {}
}
function Re(e) {
    return e.__sentry_original__;
}
function Fe(e) {
    if (ve(e)) return {
        message: e.message,
        name: e.name,
        stack: e.stack,
        ...Ue(e)
    };
    if (ke(e)) {
        const t = {
            type: e.type,
            target: Be(e.target),
            currentTarget: Be(e.currentTarget),
            ...Ue(e)
        };
        return "undefined" != typeof CustomEvent && Ce(e, CustomEvent) && (t.detail = e.detail), t;
    }
    return e;
}
function Be(e) {
    try {
        return t = e, "undefined" != typeof Element && Ce(t, Element) ? Oe(e) : Object.prototype.toString.call(e);
    } catch (e) {
        return "<unknown>";
    }
    var t;
}
function Ue(e) {
    if ("object" == typeof e && null !== e) {
        const t = {};
        for(const n in e)Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
        return t;
    }
    return {};
}
function Ve(e) {
    return Je(e, new Map);
}
function Je(e, t) {
    if (function(e) {
        if (!Se(e)) return !1;
        try {
            const t = Object.getPrototypeOf(e).constructor.name;
            return !t || "Object" === t;
        } catch (e) {
            return !0;
        }
    }(e)) {
        const n = t.get(e);
        if (void 0 !== n) return n;
        const r = {};
        t.set(e, r);
        for (const n of Object.getOwnPropertyNames(e))void 0 !== e[n] && (r[n] = Je(e[n], t));
        return r;
    }
    if (Array.isArray(e)) {
        const n = t.get(e);
        if (void 0 !== n) return n;
        const r = [];
        return t.set(e, r), e.forEach((e)=>{
            r.push(Je(e, t));
        }), r;
    }
    return e;
}
function $e() {
    return Date.now() / 1e3;
}
const qe = function() {
    const { performance: e } = $;
    if (!e || !e.now) return $e;
    const t = Date.now() - e.now(), n = null == e.timeOrigin ? t : e.timeOrigin;
    return ()=>(n + e.now()) / 1e3;
}();
function ze() {
    const e = $, t = e.crypto || e.msCrypto;
    let n = ()=>16 * Math.random();
    try {
        if (t && t.randomUUID) return t.randomUUID().replace(/-/g, "");
        t && t.getRandomValues && (n = ()=>{
            const e = new Uint8Array(1);
            return t.getRandomValues(e), e[0];
        });
    } catch (e) {}
    return ([
        1e7
    ] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (e)=>(e ^ (15 & n()) >> e / 4).toString(16));
}
function We(e) {
    return e.exception && e.exception.values ? e.exception.values[0] : void 0;
}
function He(e) {
    const { message: t, event_id: n } = e;
    if (t) return t;
    const r = We(e);
    return r ? r.type && r.value ? `${r.type}: ${r.value}` : r.type || r.value || n || "<unknown>" : n || "<unknown>";
}
function Ge(e, t, n) {
    const r = e.exception = e.exception || {}, i = r.values = r.values || [], o = i[0] = i[0] || {};
    o.value || (o.value = t || ""), o.type || (o.type = n || "Error");
}
function Qe(e, t) {
    const n = We(e);
    if (!n) return;
    const r = n.mechanism;
    if (n.mechanism = {
        type: "generic",
        handled: !0,
        ...r,
        ...t
    }, t && "data" in t) {
        const e = {
            ...r && r.data,
            ...t.data
        };
        n.mechanism.data = e;
    }
}
function Ke(e) {
    if (function(e) {
        try {
            return e.__sentry_captured__;
        } catch (e) {}
    }(e)) return !0;
    try {
        De(e, "__sentry_captured__", !0);
    } catch (e) {}
    return !1;
}
var Ye;
function Xe(e) {
    return new et((t)=>{
        t(e);
    });
}
function Ze(e) {
    return new et((t, n)=>{
        n(e);
    });
}
(()=>{
    const { performance: e } = $;
    if (!e || !e.now) return;
    const t = 36e5, n = e.now(), r = Date.now(), i = e.timeOrigin ? Math.abs(e.timeOrigin + n - r) : t, o = i < t, s = e.timing && e.timing.navigationStart, a = "number" == typeof s ? Math.abs(s + n - r) : t;
    (o || a < t) && i <= a && e.timeOrigin;
})(), function(e) {
    e[e.PENDING = 0] = "PENDING";
    e[e.RESOLVED = 1] = "RESOLVED";
    e[e.REJECTED = 2] = "REJECTED";
}(Ye || (Ye = {}));
class et {
    constructor(e){
        et.prototype.__init.call(this), et.prototype.__init2.call(this), et.prototype.__init3.call(this), et.prototype.__init4.call(this), this._state = Ye.PENDING, this._handlers = [];
        try {
            e(this._resolve, this._reject);
        } catch (e) {
            this._reject(e);
        }
    }
    then(e, t) {
        return new et((n, r)=>{
            this._handlers.push([
                !1,
                (t)=>{
                    if (e) try {
                        n(e(t));
                    } catch (e) {
                        r(e);
                    }
                    else n(t);
                },
                (e)=>{
                    if (t) try {
                        n(t(e));
                    } catch (e) {
                        r(e);
                    }
                    else r(e);
                }
            ]), this._executeHandlers();
        });
    }
    catch(e) {
        return this.then((e)=>e, e);
    }
    finally(e) {
        return new et((t, n)=>{
            let r, i;
            return this.then((t)=>{
                i = !1, r = t, e && e();
            }, (t)=>{
                i = !0, r = t, e && e();
            }).then(()=>{
                i ? n(r) : t(r);
            });
        });
    }
    __init() {
        this._resolve = (e)=>{
            this._setResult(Ye.RESOLVED, e);
        };
    }
    __init2() {
        this._reject = (e)=>{
            this._setResult(Ye.REJECTED, e);
        };
    }
    __init3() {
        this._setResult = (e, t)=>{
            this._state === Ye.PENDING && (Me(t) ? t.then(this._resolve, this._reject) : (this._state = e, this._value = t, this._executeHandlers()));
        };
    }
    __init4() {
        this._executeHandlers = ()=>{
            if (this._state === Ye.PENDING) return;
            const e = this._handlers.slice();
            this._handlers = [], e.forEach((e)=>{
                e[0] || (this._state === Ye.RESOLVED && e[1](this._value), this._state === Ye.REJECTED && e[2](this._value), e[0] = !0);
            });
        };
    }
}
function tt(e) {
    const t = qe(), n = {
        sid: ze(),
        init: !0,
        timestamp: t,
        started: t,
        duration: 0,
        status: "ok",
        errors: 0,
        ignoreDuration: !1,
        toJSON: ()=>(function(e) {
                return Ve({
                    sid: `${e.sid}`,
                    init: e.init,
                    started: new Date(1e3 * e.started).toISOString(),
                    timestamp: new Date(1e3 * e.timestamp).toISOString(),
                    status: e.status,
                    errors: e.errors,
                    did: "number" == typeof e.did || "string" == typeof e.did ? `${e.did}` : void 0,
                    duration: e.duration,
                    abnormal_mechanism: e.abnormal_mechanism,
                    attrs: {
                        release: e.release,
                        environment: e.environment,
                        ip_address: e.ipAddress,
                        user_agent: e.userAgent
                    }
                });
            })(n)
    };
    return e && nt(n, e), n;
}
function nt(e, t = {}) {
    if (t.user && (!e.ipAddress && t.user.ip_address && (e.ipAddress = t.user.ip_address), e.did || t.did || (e.did = t.user.id || t.user.email || t.user.username)), e.timestamp = t.timestamp || qe(), t.abnormal_mechanism && (e.abnormal_mechanism = t.abnormal_mechanism), t.ignoreDuration && (e.ignoreDuration = t.ignoreDuration), t.sid && (e.sid = 32 === t.sid.length ? t.sid : ze()), void 0 !== t.init && (e.init = t.init), !e.did && t.did && (e.did = `${t.did}`), "number" == typeof t.started && (e.started = t.started), e.ignoreDuration) e.duration = void 0;
    else if ("number" == typeof t.duration) e.duration = t.duration;
    else {
        const t = e.timestamp - e.started;
        e.duration = t >= 0 ? t : 0;
    }
    t.release && (e.release = t.release), t.environment && (e.environment = t.environment), !e.ipAddress && t.ipAddress && (e.ipAddress = t.ipAddress), !e.userAgent && t.userAgent && (e.userAgent = t.userAgent), "number" == typeof t.errors && (e.errors = t.errors), t.status && (e.status = t.status);
}
function rt() {
    return ze();
}
function it() {
    return ze().substring(16);
}
function ot(e, t, n = 2) {
    if (!t || "object" != typeof t || n <= 0) return t;
    if (e && t && 0 === Object.keys(t).length) return e;
    const r = {
        ...e
    };
    for(const e in t)Object.prototype.hasOwnProperty.call(t, e) && (r[e] = ot(r[e], t[e], n - 1));
    return r;
}
const st = "_sentrySpan";
function at(e, t) {
    t ? De(e, st, t) : delete e[st];
}
function ct(e) {
    return e[st];
}
class lt {
    constructor(){
        this._notifyingListeners = !1, this._scopeListeners = [], this._eventProcessors = [], this._breadcrumbs = [], this._attachments = [], this._user = {}, this._tags = {}, this._extra = {}, this._contexts = {}, this._sdkProcessingMetadata = {}, this._propagationContext = {
            traceId: rt(),
            spanId: it()
        };
    }
    clone() {
        const e = new lt;
        return e._breadcrumbs = [
            ...this._breadcrumbs
        ], e._tags = {
            ...this._tags
        }, e._extra = {
            ...this._extra
        }, e._contexts = {
            ...this._contexts
        }, this._contexts.flags && (e._contexts.flags = {
            values: [
                ...this._contexts.flags.values
            ]
        }), e._user = this._user, e._level = this._level, e._session = this._session, e._transactionName = this._transactionName, e._fingerprint = this._fingerprint, e._eventProcessors = [
            ...this._eventProcessors
        ], e._requestSession = this._requestSession, e._attachments = [
            ...this._attachments
        ], e._sdkProcessingMetadata = {
            ...this._sdkProcessingMetadata
        }, e._propagationContext = {
            ...this._propagationContext
        }, e._client = this._client, e._lastEventId = this._lastEventId, at(e, ct(this)), e;
    }
    setClient(e) {
        this._client = e;
    }
    setLastEventId(e) {
        this._lastEventId = e;
    }
    getClient() {
        return this._client;
    }
    lastEventId() {
        return this._lastEventId;
    }
    addScopeListener(e) {
        this._scopeListeners.push(e);
    }
    addEventProcessor(e) {
        return this._eventProcessors.push(e), this;
    }
    setUser(e) {
        return this._user = e || {
            email: void 0,
            id: void 0,
            ip_address: void 0,
            username: void 0
        }, this._session && nt(this._session, {
            user: e
        }), this._notifyScopeListeners(), this;
    }
    getUser() {
        return this._user;
    }
    getRequestSession() {
        return this._requestSession;
    }
    setRequestSession(e) {
        return this._requestSession = e, this;
    }
    setTags(e) {
        return this._tags = {
            ...this._tags,
            ...e
        }, this._notifyScopeListeners(), this;
    }
    setTag(e, t) {
        return this._tags = {
            ...this._tags,
            [e]: t
        }, this._notifyScopeListeners(), this;
    }
    setExtras(e) {
        return this._extra = {
            ...this._extra,
            ...e
        }, this._notifyScopeListeners(), this;
    }
    setExtra(e, t) {
        return this._extra = {
            ...this._extra,
            [e]: t
        }, this._notifyScopeListeners(), this;
    }
    setFingerprint(e) {
        return this._fingerprint = e, this._notifyScopeListeners(), this;
    }
    setLevel(e) {
        return this._level = e, this._notifyScopeListeners(), this;
    }
    setTransactionName(e) {
        return this._transactionName = e, this._notifyScopeListeners(), this;
    }
    setContext(e, t) {
        return null === t ? delete this._contexts[e] : this._contexts[e] = t, this._notifyScopeListeners(), this;
    }
    setSession(e) {
        return e ? this._session = e : delete this._session, this._notifyScopeListeners(), this;
    }
    getSession() {
        return this._session;
    }
    update(e) {
        if (!e) return this;
        const t = "function" == typeof e ? e(this) : e, [n, r] = t instanceof ut ? [
            t.getScopeData(),
            t.getRequestSession()
        ] : Se(t) ? [
            e,
            e.requestSession
        ] : [], { tags: i, extra: o, user: s, contexts: a, level: c, fingerprint: l = [], propagationContext: u } = n || {};
        return this._tags = {
            ...this._tags,
            ...i
        }, this._extra = {
            ...this._extra,
            ...o
        }, this._contexts = {
            ...this._contexts,
            ...a
        }, s && Object.keys(s).length && (this._user = s), c && (this._level = c), l.length && (this._fingerprint = l), u && (this._propagationContext = u), r && (this._requestSession = r), this;
    }
    clear() {
        return this._breadcrumbs = [], this._tags = {}, this._extra = {}, this._user = {}, this._contexts = {}, this._level = void 0, this._transactionName = void 0, this._fingerprint = void 0, this._requestSession = void 0, this._session = void 0, at(this, void 0), this._attachments = [], this.setPropagationContext({
            traceId: rt()
        }), this._notifyScopeListeners(), this;
    }
    addBreadcrumb(e, t) {
        const n = "number" == typeof t ? t : 100;
        if (n <= 0) return this;
        const r = {
            timestamp: $e(),
            ...e
        };
        return this._breadcrumbs.push(r), this._breadcrumbs.length > n && (this._breadcrumbs = this._breadcrumbs.slice(-n), this._client && this._client.recordDroppedEvent("buffer_overflow", "log_item")), this._notifyScopeListeners(), this;
    }
    getLastBreadcrumb() {
        return this._breadcrumbs[this._breadcrumbs.length - 1];
    }
    clearBreadcrumbs() {
        return this._breadcrumbs = [], this._notifyScopeListeners(), this;
    }
    addAttachment(e) {
        return this._attachments.push(e), this;
    }
    clearAttachments() {
        return this._attachments = [], this;
    }
    getScopeData() {
        return {
            breadcrumbs: this._breadcrumbs,
            attachments: this._attachments,
            contexts: this._contexts,
            tags: this._tags,
            extra: this._extra,
            user: this._user,
            level: this._level,
            fingerprint: this._fingerprint || [],
            eventProcessors: this._eventProcessors,
            propagationContext: this._propagationContext,
            sdkProcessingMetadata: this._sdkProcessingMetadata,
            transactionName: this._transactionName,
            span: ct(this)
        };
    }
    setSDKProcessingMetadata(e) {
        return this._sdkProcessingMetadata = ot(this._sdkProcessingMetadata, e, 2), this;
    }
    setPropagationContext(e) {
        return this._propagationContext = {
            spanId: it(),
            ...e
        }, this;
    }
    getPropagationContext() {
        return this._propagationContext;
    }
    captureException(e, t) {
        const n = t && t.event_id ? t.event_id : ze();
        if (!this._client) return Q.warn("No client configured on scope - will not capture exception!"), n;
        const r = new Error("Sentry syntheticException");
        return this._client.captureException(e, {
            originalException: e,
            syntheticException: r,
            ...t,
            event_id: n
        }, this), n;
    }
    captureMessage(e, t, n) {
        const r = n && n.event_id ? n.event_id : ze();
        if (!this._client) return Q.warn("No client configured on scope - will not capture message!"), r;
        const i = new Error(e);
        return this._client.captureMessage(e, t, {
            originalException: e,
            syntheticException: i,
            ...n,
            event_id: r
        }, this), r;
    }
    captureEvent(e, t) {
        const n = t && t.event_id ? t.event_id : ze();
        return this._client ? (this._client.captureEvent(e, {
            ...t,
            event_id: n
        }, this), n) : (Q.warn("No client configured on scope - will not capture event!"), n);
    }
    _notifyScopeListeners() {
        this._notifyingListeners || (this._notifyingListeners = !0, this._scopeListeners.forEach((e)=>{
            e(this);
        }), this._notifyingListeners = !1);
    }
}
const ut = lt;
class dt {
    constructor(e, t){
        let n, r;
        n = e || new ut, r = t || new ut, this._stack = [
            {
                scope: n
            }
        ], this._isolationScope = r;
    }
    withScope(e) {
        const t = this._pushScope();
        let n;
        try {
            n = e(t);
        } catch (e) {
            throw this._popScope(), e;
        }
        return Me(n) ? n.then((e)=>(this._popScope(), e), (e)=>{
            throw this._popScope(), e;
        }) : (this._popScope(), n);
    }
    getClient() {
        return this.getStackTop().client;
    }
    getScope() {
        return this.getStackTop().scope;
    }
    getIsolationScope() {
        return this._isolationScope;
    }
    getStackTop() {
        return this._stack[this._stack.length - 1];
    }
    _pushScope() {
        const e = this.getScope().clone();
        return this._stack.push({
            client: this.getClient(),
            scope: e
        }), e;
    }
    _popScope() {
        return !(this._stack.length <= 1) && !!this._stack.pop();
    }
}
function pt() {
    const e = he(pe());
    return e.stack = e.stack || new dt(q("defaultCurrentScope", ()=>new ut), q("defaultIsolationScope", ()=>new ut));
}
function ht(e) {
    return pt().withScope(e);
}
function ft(e, t) {
    const n = pt();
    return n.withScope(()=>(n.getStackTop().scope = e, t(e)));
}
function vt(e) {
    return pt().withScope(()=>e(pt().getIsolationScope()));
}
function gt(e) {
    const t = he(e);
    return t.acs ? t.acs : {
        withIsolationScope: vt,
        withScope: ht,
        withSetScope: ft,
        withSetIsolationScope: (e, t)=>vt(t),
        getCurrentScope: ()=>pt().getScope(),
        getIsolationScope: ()=>pt().getIsolationScope()
    };
}
function mt() {
    return gt(pe()).getCurrentScope();
}
function yt() {
    return gt(pe()).getIsolationScope();
}
function bt() {
    return mt().getClient();
}
function _t(e) {
    const t = e.getPropagationContext(), { traceId: n, spanId: r, parentSpanId: i } = t;
    return Ve({
        trace_id: n,
        span_id: r,
        parent_span_id: i
    });
}
function wt(e) {
    const t = e._sentryMetrics;
    if (!t) return;
    const n = {};
    for (const [, [e, r]] of t){
        (n[e] || (n[e] = [])).push(Ve(r));
    }
    return n;
}
const St = /^sentry-/;
function kt(e) {
    const t = function(e) {
        if (!e || !be(e) && !Array.isArray(e)) return;
        if (Array.isArray(e)) return e.reduce((e, t)=>{
            const n = Mt(t);
            return Object.entries(n).forEach(([t, n])=>{
                e[t] = n;
            }), e;
        }, {});
        return Mt(e);
    }(e);
    if (!t) return;
    const n = Object.entries(t).reduce((e, [t, n])=>{
        if (t.match(St)) {
            e[t.slice(7)] = n;
        }
        return e;
    }, {});
    return Object.keys(n).length > 0 ? n : void 0;
}
function Mt(e) {
    return e.split(",").map((e)=>e.split("=").map((e)=>decodeURIComponent(e.trim()))).reduce((e, [t, n])=>(t && n && (e[t] = n), e), {});
}
let Ct = !1;
function Et(e) {
    const { spanId: t, traceId: n, isRemote: r } = e.spanContext();
    return Ve({
        parent_span_id: r ? t : Pt(e).parent_span_id,
        span_id: r ? it() : t,
        trace_id: n
    });
}
function Tt(e) {
    return "number" == typeof e ? Ot(e) : Array.isArray(e) ? e[0] + e[1] / 1e9 : e instanceof Date ? Ot(e.getTime()) : qe();
}
function Ot(e) {
    return e > 9999999999 ? e / 1e3 : e;
}
function Pt(e) {
    if (function(e) {
        return "function" == typeof e.getSpanJSON;
    }(e)) return e.getSpanJSON();
    try {
        const { spanId: t, traceId: n } = e.spanContext();
        if (function(e) {
            const t = e;
            return !!(t.attributes && t.startTime && t.name && t.endTime && t.status);
        }(e)) {
            const { attributes: r, startTime: i, name: o, endTime: s, parentSpanId: a, status: c } = e;
            return Ve({
                span_id: t,
                trace_id: n,
                data: r,
                description: o,
                parent_span_id: a,
                start_timestamp: Tt(i),
                timestamp: Tt(s) || void 0,
                status: At(c),
                op: r["sentry.op"],
                origin: r["sentry.origin"],
                _metrics_summary: wt(e)
            });
        }
        return {
            span_id: t,
            trace_id: n
        };
    } catch (e) {
        return {};
    }
}
function At(e) {
    if (e && 0 !== e.code) return 1 === e.code ? "ok" : e.message || "unknown_error";
}
function jt(e) {
    return e._sentryRootSpan || e;
}
function It() {
    Ct || (G(()=>{
        console.warn("[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.");
    }), Ct = !0);
}
const xt = "production";
function Lt(e, t) {
    const n = t.getOptions(), { publicKey: r } = t.getDsn() || {}, i = Ve({
        environment: n.environment || xt,
        release: n.release,
        public_key: r,
        trace_id: e
    });
    return t.emit("createDsc", i), i;
}
function Dt(e) {
    const t = bt();
    if (!t) return {};
    const n = jt(e), r = n._frozenDsc;
    if (r) return r;
    const i = n.spanContext().traceState, o = i && i.get("sentry.dsc"), s = o && kt(o);
    if (s) return s;
    const a = Lt(e.spanContext().traceId, t), c = Pt(n), l = c.data || {}, u = l["sentry.sample_rate"];
    null != u && (a.sample_rate = `${u}`);
    const d = l["sentry.source"], p = c.description;
    return "url" !== d && p && (a.transaction = p), function(e) {
        if ("boolean" == typeof __SENTRY_TRACING__ && !__SENTRY_TRACING__) return !1;
        const t = bt(), n = e || t && t.getOptions();
        return !!n && (n.enableTracing || "tracesSampleRate" in n || "tracesSampler" in n);
    }() && (a.sampled = String(function(e) {
        const { traceFlags: t } = e.spanContext();
        return 1 === t;
    }(n))), t.emit("createDsc", a, n), a;
}
const Nt = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
function Rt(e, t = !1) {
    const { host: n, path: r, pass: i, port: o, projectId: s, protocol: a, publicKey: c } = e;
    return `${a}://${c}${t && i ? `:${i}` : ""}@${n}${o ? `:${o}` : ""}/${r ? `${r}/` : r}${s}`;
}
function Ft(e) {
    return {
        protocol: e.protocol,
        publicKey: e.publicKey || "",
        pass: e.pass || "",
        host: e.host,
        port: e.port || "",
        path: e.path || "",
        projectId: e.projectId
    };
}
function Bt(e) {
    const t = "string" == typeof e ? function(e) {
        const t = Nt.exec(e);
        if (!t) return void G(()=>{
            console.error(`Invalid Sentry Dsn: ${e}`);
        });
        const [n, r, i = "", o = "", s = "", a = ""] = t.slice(1);
        let c = "", l = a;
        const u = l.split("/");
        if (u.length > 1 && (c = u.slice(0, -1).join("/"), l = u.pop()), l) {
            const e = l.match(/^\d+/);
            e && (l = e[0]);
        }
        return Ft({
            host: o,
            pass: i,
            path: c,
            projectId: l,
            port: s,
            protocol: n,
            publicKey: r
        });
    }(e) : Ft(e);
    if (t && function(e) {
        if (!z) return !0;
        const { port: t, projectId: n, protocol: r } = e;
        return !([
            "protocol",
            "publicKey",
            "host",
            "projectId"
        ].find((t)=>!e[t] && (Q.error(`Invalid Sentry Dsn: ${t} missing`), !0)) || (n.match(/^\d+$/) ? function(e) {
            return "http" === e || "https" === e;
        }(r) ? t && isNaN(parseInt(t, 10)) && (Q.error(`Invalid Sentry Dsn: Invalid port ${t}`), 1) : (Q.error(`Invalid Sentry Dsn: Invalid protocol ${r}`), 1) : (Q.error(`Invalid Sentry Dsn: Invalid projectId ${n}`), 1)));
    }(t)) return t;
}
function Ut(e, t = 100, n = 1 / 0) {
    try {
        return Jt("", e, t, n);
    } catch (e) {
        return {
            ERROR: `**non-serializable** (${e})`
        };
    }
}
function Vt(e, t = 3, n = 102400) {
    const r = Ut(e, t);
    return i = r, function(e) {
        return ~-encodeURI(e).split(/%..|./).length;
    }(JSON.stringify(i)) > n ? Vt(e, t - 1, n) : r;
    "TURBOPACK unreachable";
    var i;
}
function Jt(e, t, n = 1 / 0, r = 1 / 0, i = function() {
    const e = "function" == typeof WeakSet, t = e ? new WeakSet : [];
    return [
        function(n) {
            if (e) return !!t.has(n) || (t.add(n), !1);
            for(let e = 0; e < t.length; e++)if (t[e] === n) return !0;
            return t.push(n), !1;
        },
        function(n) {
            if (e) t.delete(n);
            else for(let e = 0; e < t.length; e++)if (t[e] === n) {
                t.splice(e, 1);
                break;
            }
        }
    ];
}()) {
    const [o, s] = i;
    if (null == t || [
        "boolean",
        "string"
    ].includes(typeof t) || "number" == typeof t && Number.isFinite(t)) return t;
    const a = function(e, t) {
        try {
            if ("domain" === e && t && "object" == typeof t && t._events) return "[Domain]";
            if ("domainEmitter" === e) return "[DomainEmitter]";
            if ("undefined" != typeof global && t === global) return "[Global]";
            if ("undefined" != typeof window && t === window) return "[Window]";
            if ("undefined" != typeof document && t === document) return "[Document]";
            if (Ee(t)) return "[VueViewModel]";
            if (Se(n = t) && "nativeEvent" in n && "preventDefault" in n && "stopPropagation" in n) return "[SyntheticEvent]";
            if ("number" == typeof t && !Number.isFinite(t)) return `[${t}]`;
            if ("function" == typeof t) return `[Function: ${te(t)}]`;
            if ("symbol" == typeof t) return `[${String(t)}]`;
            if ("bigint" == typeof t) return `[BigInt: ${String(t)}]`;
            const r = function(e) {
                const t = Object.getPrototypeOf(e);
                return t ? t.constructor.name : "null prototype";
            }(t);
            return /^HTML(\w*)Element$/.test(r) ? `[HTMLElement: ${r}]` : `[object ${r}]`;
        } catch (e) {
            return `**non-serializable** (${e})`;
        }
        var n;
    }(e, t);
    if (!a.startsWith("[object ")) return a;
    if (t.__sentry_skip_normalization__) return t;
    const c = "number" == typeof t.__sentry_override_normalization_depth__ ? t.__sentry_override_normalization_depth__ : n;
    if (0 === c) return a.replace("object ", "");
    if (o(t)) return "[Circular ~]";
    const l = t;
    if (l && "function" == typeof l.toJSON) try {
        return Jt("", l.toJSON(), c - 1, r, i);
    } catch (e) {}
    const u = Array.isArray(t) ? [] : {};
    let d = 0;
    const p = Fe(t);
    for(const e in p){
        if (!Object.prototype.hasOwnProperty.call(p, e)) continue;
        if (d >= r) {
            u[e] = "[MaxProperties ~]";
            break;
        }
        const t = p[e];
        u[e] = Jt(e, t, c - 1, r, i), d++;
    }
    return s(t), u;
}
function $t(e, t = []) {
    return [
        e,
        t
    ];
}
function qt(e, t) {
    const [n, r] = e;
    return [
        n,
        [
            ...r,
            t
        ]
    ];
}
function zt(e, t) {
    const n = e[1];
    for (const e of n){
        if (t(e, e[0].type)) return !0;
    }
    return !1;
}
function Wt(e) {
    return $.__SENTRY__ && $.__SENTRY__.encodePolyfill ? $.__SENTRY__.encodePolyfill(e) : (new TextEncoder).encode(e);
}
function Ht(e) {
    const [t, n] = e;
    let r = JSON.stringify(t);
    function i(e) {
        "string" == typeof r ? r = "string" == typeof e ? r + e : [
            Wt(r),
            e
        ] : r.push("string" == typeof e ? Wt(e) : e);
    }
    for (const e of n){
        const [t, n] = e;
        if (i(`\n${JSON.stringify(t)}\n`), "string" == typeof n || n instanceof Uint8Array) i(n);
        else {
            let e;
            try {
                e = JSON.stringify(n);
            } catch (t) {
                e = JSON.stringify(Ut(n));
            }
            i(e);
        }
    }
    return "string" == typeof r ? r : function(e) {
        const t = e.reduce((e, t)=>e + t.length, 0), n = new Uint8Array(t);
        let r = 0;
        for (const t of e)n.set(t, r), r += t.length;
        return n;
    }(r);
}
function Gt(e) {
    const t = "string" == typeof e.data ? Wt(e.data) : e.data;
    return [
        Ve({
            type: "attachment",
            length: t.length,
            filename: e.filename,
            content_type: e.contentType,
            attachment_type: e.attachmentType
        }),
        t
    ];
}
const Qt = {
    session: "session",
    sessions: "session",
    attachment: "attachment",
    transaction: "transaction",
    event: "error",
    client_report: "internal",
    user_report: "default",
    profile: "profile",
    profile_chunk: "profile",
    replay_event: "replay",
    replay_recording: "replay",
    check_in: "monitor",
    feedback: "feedback",
    span: "span",
    statsd: "metric_bucket",
    raw_security: "security"
};
function Kt(e) {
    return Qt[e];
}
function Yt(e) {
    if (!e || !e.sdk) return;
    const { name: t, version: n } = e.sdk;
    return {
        name: t,
        version: n
    };
}
function Xt(e, t, n, r) {
    const i = Yt(n), o = e.type && "replay_event" !== e.type ? e.type : "event";
    !function(e, t) {
        t && (e.sdk = e.sdk || {}, e.sdk.name = e.sdk.name || t.name, e.sdk.version = e.sdk.version || t.version, e.sdk.integrations = [
            ...e.sdk.integrations || [],
            ...t.integrations || []
        ], e.sdk.packages = [
            ...e.sdk.packages || [],
            ...t.packages || []
        ]);
    }(e, n && n.sdk);
    const s = function(e, t, n, r) {
        const i = e.sdkProcessingMetadata && e.sdkProcessingMetadata.dynamicSamplingContext;
        return {
            event_id: e.event_id,
            sent_at: (new Date).toISOString(),
            ...t && {
                sdk: t
            },
            ...!!n && r && {
                dsn: Rt(r)
            },
            ...i && {
                trace: Ve({
                    ...i
                })
            }
        };
    }(e, i, r, t);
    delete e.sdkProcessingMetadata;
    return $t(s, [
        [
            {
                type: o
            },
            e
        ]
    ]);
}
function Zt(e, t, n, r = 0) {
    return new et((i, o)=>{
        const s = e[r];
        if (null === t || "function" != typeof s) i(t);
        else {
            const a = s({
                ...t
            }, n);
            V && s.id && null === a && Q.log(`Event processor "${s.id}" dropped event`), Me(a) ? a.then((t)=>Zt(e, t, n, r + 1).then(i)).then(null, o) : Zt(e, a, n, r + 1).then(i).then(null, o);
        }
    });
}
let en, tn, nn;
function rn(e, t) {
    const { fingerprint: n, span: r, breadcrumbs: i, sdkProcessingMetadata: o } = t;
    !function(e, t) {
        const { extra: n, tags: r, user: i, contexts: o, level: s, transactionName: a } = t, c = Ve(n);
        c && Object.keys(c).length && (e.extra = {
            ...c,
            ...e.extra
        });
        const l = Ve(r);
        l && Object.keys(l).length && (e.tags = {
            ...l,
            ...e.tags
        });
        const u = Ve(i);
        u && Object.keys(u).length && (e.user = {
            ...u,
            ...e.user
        });
        const d = Ve(o);
        d && Object.keys(d).length && (e.contexts = {
            ...d,
            ...e.contexts
        });
        s && (e.level = s);
        a && "transaction" !== e.type && (e.transaction = a);
    }(e, t), r && function(e, t) {
        e.contexts = {
            trace: Et(t),
            ...e.contexts
        }, e.sdkProcessingMetadata = {
            dynamicSamplingContext: Dt(t),
            ...e.sdkProcessingMetadata
        };
        const n = jt(t), r = Pt(n).description;
        r && !e.transaction && "transaction" === e.type && (e.transaction = r);
    }(e, r), function(e, t) {
        e.fingerprint = e.fingerprint ? Array.isArray(e.fingerprint) ? e.fingerprint : [
            e.fingerprint
        ] : [], t && (e.fingerprint = e.fingerprint.concat(t));
        e.fingerprint && !e.fingerprint.length && delete e.fingerprint;
    }(e, n), function(e, t) {
        const n = [
            ...e.breadcrumbs || [],
            ...t
        ];
        e.breadcrumbs = n.length ? n : void 0;
    }(e, i), function(e, t) {
        e.sdkProcessingMetadata = {
            ...e.sdkProcessingMetadata,
            ...t
        };
    }(e, o);
}
function on(e, t) {
    const { extra: n, tags: r, user: i, contexts: o, level: s, sdkProcessingMetadata: a, breadcrumbs: c, fingerprint: l, eventProcessors: u, attachments: d, propagationContext: p, transactionName: h, span: f } = t;
    sn(e, "extra", n), sn(e, "tags", r), sn(e, "user", i), sn(e, "contexts", o), e.sdkProcessingMetadata = ot(e.sdkProcessingMetadata, a, 2), s && (e.level = s), h && (e.transactionName = h), f && (e.span = f), c.length && (e.breadcrumbs = [
        ...e.breadcrumbs,
        ...c
    ]), l.length && (e.fingerprint = [
        ...e.fingerprint,
        ...l
    ]), u.length && (e.eventProcessors = [
        ...e.eventProcessors,
        ...u
    ]), d.length && (e.attachments = [
        ...e.attachments,
        ...d
    ]), e.propagationContext = {
        ...e.propagationContext,
        ...p
    };
}
function sn(e, t, n) {
    e[t] = ot(e[t], n, 1);
}
function an(e, t, n, r, i, o) {
    const { normalizeDepth: s = 3, normalizeMaxBreadth: a = 1e3 } = e, c = {
        ...t,
        event_id: t.event_id || n.event_id || ze(),
        timestamp: t.timestamp || $e()
    }, l = n.integrations || e.integrations.map((e)=>e.name);
    !function(e, t) {
        const { environment: n, release: r, dist: i, maxValueLength: o = 250 } = t;
        e.environment = e.environment || n || xt, !e.release && r && (e.release = r);
        !e.dist && i && (e.dist = i);
        e.message && (e.message = Ae(e.message, o));
        const s = e.exception && e.exception.values && e.exception.values[0];
        s && s.value && (s.value = Ae(s.value, o));
        const a = e.request;
        a && a.url && (a.url = Ae(a.url, o));
    }(c, e), function(e, t) {
        t.length > 0 && (e.sdk = e.sdk || {}, e.sdk.integrations = [
            ...e.sdk.integrations || [],
            ...t
        ]);
    }(c, l), i && i.emit("applyFrameMetadata", t), void 0 === t.type && function(e, t) {
        const n = function(e) {
            const t = $._sentryDebugIds;
            if (!t) return {};
            const n = Object.keys(t);
            return nn && n.length === tn || (tn = n.length, nn = n.reduce((n, r)=>{
                en || (en = {});
                const i = en[r];
                if (i) n[i[0]] = i[1];
                else {
                    const i = e(r);
                    for(let e = i.length - 1; e >= 0; e--){
                        const o = i[e], s = o && o.filename, a = t[r];
                        if (s && a) {
                            n[s] = a, en[r] = [
                                s,
                                a
                            ];
                            break;
                        }
                    }
                }
                return n;
            }, {})), nn;
        }(t);
        try {
            e.exception.values.forEach((e)=>{
                e.stacktrace.frames.forEach((e)=>{
                    n && e.filename && (e.debug_id = n[e.filename]);
                });
            });
        } catch (e) {}
    }(c, e.stackParser);
    const u = function(e, t) {
        if (!t) return e;
        const n = e ? e.clone() : new ut;
        return n.update(t), n;
    }(r, n.captureContext);
    n.mechanism && Qe(c, n.mechanism);
    const d = i ? i.getEventProcessors() : [], p = q("globalScope", ()=>new ut).getScopeData();
    if (o) {
        on(p, o.getScopeData());
    }
    if (u) {
        on(p, u.getScopeData());
    }
    const h = [
        ...n.attachments || [],
        ...p.attachments
    ];
    h.length && (n.attachments = h), rn(c, p);
    return Zt([
        ...d,
        ...p.eventProcessors
    ], c, n).then((e)=>(e && function(e) {
            const t = {};
            try {
                e.exception.values.forEach((e)=>{
                    e.stacktrace.frames.forEach((e)=>{
                        e.debug_id && (e.abs_path ? t[e.abs_path] = e.debug_id : e.filename && (t[e.filename] = e.debug_id), delete e.debug_id);
                    });
                });
            } catch (e) {}
            if (0 === Object.keys(t).length) return;
            e.debug_meta = e.debug_meta || {}, e.debug_meta.images = e.debug_meta.images || [];
            const n = e.debug_meta.images;
            Object.entries(t).forEach(([e, t])=>{
                n.push({
                    type: "sourcemap",
                    code_file: e,
                    debug_id: t
                });
            });
        }(e), "number" == typeof s && s > 0 ? function(e, t, n) {
            if (!e) return null;
            const r = {
                ...e,
                ...e.breadcrumbs && {
                    breadcrumbs: e.breadcrumbs.map((e)=>({
                            ...e,
                            ...e.data && {
                                data: Ut(e.data, t, n)
                            }
                        }))
                },
                ...e.user && {
                    user: Ut(e.user, t, n)
                },
                ...e.contexts && {
                    contexts: Ut(e.contexts, t, n)
                },
                ...e.extra && {
                    extra: Ut(e.extra, t, n)
                }
            };
            e.contexts && e.contexts.trace && r.contexts && (r.contexts.trace = e.contexts.trace, e.contexts.trace.data && (r.contexts.trace.data = Ut(e.contexts.trace.data, t, n)));
            e.spans && (r.spans = e.spans.map((e)=>({
                    ...e,
                    ...e.data && {
                        data: Ut(e.data, t, n)
                    }
                })));
            e.contexts && e.contexts.flags && r.contexts && (r.contexts.flags = Ut(e.contexts.flags, 3, n));
            return r;
        }(e, s, a) : e));
}
function cn(e) {
    if (e) return function(e) {
        return e instanceof ut || "function" == typeof e;
    }(e) || function(e) {
        return Object.keys(e).some((e)=>ln.includes(e));
    }(e) ? {
        captureContext: e
    } : e;
}
const ln = [
    "user",
    "level",
    "extra",
    "contexts",
    "tags",
    "fingerprint",
    "requestSession",
    "propagationContext"
];
function un(e, t) {
    return mt().captureEvent(e, t);
}
function dn(e) {
    const t = bt(), n = yt(), r = mt(), { release: i, environment: o = xt } = t && t.getOptions() || {}, { userAgent: s } = $.navigator || {}, a = tt({
        release: i,
        environment: o,
        user: r.getUser() || n.getUser(),
        ...s && {
            userAgent: s
        },
        ...e
    }), c = n.getSession();
    return c && "ok" === c.status && nt(c, {
        status: "exited"
    }), pn(), n.setSession(a), r.setSession(a), a;
}
function pn() {
    const e = yt(), t = mt(), n = t.getSession() || e.getSession();
    n && function(e, t) {
        let n = {};
        t ? n = {
            status: t
        } : "ok" === e.status && (n = {
            status: "exited"
        }), nt(e, n);
    }(n), hn(), e.setSession(), t.setSession();
}
function hn() {
    const e = yt(), t = mt(), n = bt(), r = t.getSession() || e.getSession();
    r && n && n.captureSession(r);
}
function fn(e = !1) {
    e ? pn() : hn();
}
function vn(e, t, n) {
    return t || `${function(e) {
        return `${function(e) {
            const t = e.protocol ? `${e.protocol}:` : "", n = e.port ? `:${e.port}` : "";
            return `${t}//${e.host}${n}${e.path ? `/${e.path}` : ""}/api/`;
        }(e)}${e.projectId}/envelope/`;
    }(e)}?${function(e, t) {
        const n = {
            sentry_version: "7"
        };
        return e.publicKey && (n.sentry_key = e.publicKey), t && (n.sentry_client = `${t.name}/${t.version}`), new URLSearchParams(n).toString();
    }(e, n)}`;
}
const gn = [];
function mn(e, t) {
    for (const n of t)n && n.afterAllSetup && n.afterAllSetup(e);
}
function yn(e, t, n) {
    if (n[t.name]) V && Q.log(`Integration skipped because it was already installed: ${t.name}`);
    else {
        if (n[t.name] = t, -1 === gn.indexOf(t.name) && "function" == typeof t.setupOnce && (t.setupOnce(), gn.push(t.name)), t.setup && "function" == typeof t.setup && t.setup(e), "function" == typeof t.preprocessEvent) {
            const n = t.preprocessEvent.bind(t);
            e.on("preprocessEvent", (t, r)=>n(t, r, e));
        }
        if ("function" == typeof t.processEvent) {
            const n = t.processEvent.bind(t), r = Object.assign((t, r)=>n(t, r, e), {
                id: t.name
            });
            e.addEventProcessor(r);
        }
        V && Q.log(`Integration installed: ${t.name}`);
    }
}
class bn extends Error {
    constructor(e, t = "warn"){
        super(e), this.message = e, this.logLevel = t;
    }
}
const _n = "Not capturing exception because it's already been captured.";
class wn {
    constructor(e){
        if (this._options = e, this._integrations = {}, this._numProcessing = 0, this._outcomes = {}, this._hooks = {}, this._eventProcessors = [], e.dsn ? this._dsn = Bt(e.dsn) : V && Q.warn("No DSN provided, client will not send events."), this._dsn) {
            const t = vn(this._dsn, e.tunnel, e._metadata ? e._metadata.sdk : void 0);
            this._transport = e.transport({
                tunnel: this._options.tunnel,
                recordDroppedEvent: this.recordDroppedEvent.bind(this),
                ...e.transportOptions,
                url: t
            });
        }
        const t = [
            "enableTracing",
            "tracesSampleRate",
            "tracesSampler"
        ].find((t)=>t in e && null == e[t]);
        t && G(()=>{
            console.warn(`[Sentry] Deprecation warning: \`${t}\` is set to undefined, which leads to tracing being enabled. In v9, a value of \`undefined\` will result in tracing being disabled.`);
        });
    }
    captureException(e, t, n) {
        const r = ze();
        if (Ke(e)) return V && Q.log(_n), r;
        const i = {
            event_id: r,
            ...t
        };
        return this._process(this.eventFromException(e, i).then((e)=>this._captureEvent(e, i, n))), i.event_id;
    }
    captureMessage(e, t, n, r) {
        const i = {
            event_id: ze(),
            ...n
        }, o = _e(e) ? e : String(e), s = we(e) ? this.eventFromMessage(o, t, i) : this.eventFromException(e, i);
        return this._process(s.then((e)=>this._captureEvent(e, i, r))), i.event_id;
    }
    captureEvent(e, t, n) {
        const r = ze();
        if (t && t.originalException && Ke(t.originalException)) return V && Q.log(_n), r;
        const i = {
            event_id: r,
            ...t
        }, o = (e.sdkProcessingMetadata || {}).capturedSpanScope;
        return this._process(this._captureEvent(e, i, o || n)), i.event_id;
    }
    captureSession(e) {
        "string" != typeof e.release ? V && Q.warn("Discarded session because of missing or non-string release") : (this.sendSession(e), nt(e, {
            init: !1
        }));
    }
    getDsn() {
        return this._dsn;
    }
    getOptions() {
        return this._options;
    }
    getSdkMetadata() {
        return this._options._metadata;
    }
    getTransport() {
        return this._transport;
    }
    flush(e) {
        const t = this._transport;
        return t ? (this.emit("flush"), this._isClientDoneProcessing(e).then((n)=>t.flush(e).then((e)=>n && e))) : Xe(!0);
    }
    close(e) {
        return this.flush(e).then((e)=>(this.getOptions().enabled = !1, this.emit("close"), e));
    }
    getEventProcessors() {
        return this._eventProcessors;
    }
    addEventProcessor(e) {
        this._eventProcessors.push(e);
    }
    init() {
        (this._isEnabled() || this._options.integrations.some(({ name: e })=>e.startsWith("Spotlight"))) && this._setupIntegrations();
    }
    getIntegrationByName(e) {
        return this._integrations[e];
    }
    addIntegration(e) {
        const t = this._integrations[e.name];
        yn(this, e, this._integrations), t || mn(this, [
            e
        ]);
    }
    sendEvent(e, t = {}) {
        this.emit("beforeSendEvent", e, t);
        let n = Xt(e, this._dsn, this._options._metadata, this._options.tunnel);
        for (const e of t.attachments || [])n = qt(n, Gt(e));
        const r = this.sendEnvelope(n);
        r && r.then((t)=>this.emit("afterSendEvent", e, t), null);
    }
    sendSession(e) {
        const t = function(e, t, n, r) {
            const i = Yt(n);
            return $t({
                sent_at: (new Date).toISOString(),
                ...i && {
                    sdk: i
                },
                ...!!r && t && {
                    dsn: Rt(t)
                }
            }, [
                "aggregates" in e ? [
                    {
                        type: "sessions"
                    },
                    e
                ] : [
                    {
                        type: "session"
                    },
                    e.toJSON()
                ]
            ]);
        }(e, this._dsn, this._options._metadata, this._options.tunnel);
        this.sendEnvelope(t);
    }
    recordDroppedEvent(e, t, n) {
        if (this._options.sendClientReports) {
            const r = "number" == typeof n ? n : 1, i = `${e}:${t}`;
            V && Q.log(`Recording outcome: "${i}"${r > 1 ? ` (${r} times)` : ""}`), this._outcomes[i] = (this._outcomes[i] || 0) + r;
        }
    }
    on(e, t) {
        const n = this._hooks[e] = this._hooks[e] || [];
        return n.push(t), ()=>{
            const e = n.indexOf(t);
            e > -1 && n.splice(e, 1);
        };
    }
    emit(e, ...t) {
        const n = this._hooks[e];
        n && n.forEach((e)=>e(...t));
    }
    sendEnvelope(e) {
        return this.emit("beforeEnvelope", e), this._isEnabled() && this._transport ? this._transport.send(e).then(null, (e)=>(V && Q.error("Error while sending envelope:", e), e)) : (V && Q.error("Transport disabled"), Xe({}));
    }
    _setupIntegrations() {
        const { integrations: e } = this._options;
        this._integrations = function(e, t) {
            const n = {};
            return t.forEach((t)=>{
                t && yn(e, t, n);
            }), n;
        }(this, e), mn(this, e);
    }
    _updateSessionFromEvent(e, t) {
        let n = "fatal" === t.level, r = !1;
        const i = t.exception && t.exception.values;
        if (i) {
            r = !0;
            for (const e of i){
                const t = e.mechanism;
                if (t && !1 === t.handled) {
                    n = !0;
                    break;
                }
            }
        }
        const o = "ok" === e.status;
        (o && 0 === e.errors || o && n) && (nt(e, {
            ...n && {
                status: "crashed"
            },
            errors: e.errors || Number(r || n)
        }), this.captureSession(e));
    }
    _isClientDoneProcessing(e) {
        return new et((t)=>{
            let n = 0;
            const r = setInterval(()=>{
                0 == this._numProcessing ? (clearInterval(r), t(!0)) : (n += 1, e && n >= e && (clearInterval(r), t(!1)));
            }, 1);
        });
    }
    _isEnabled() {
        return !1 !== this.getOptions().enabled && void 0 !== this._transport;
    }
    _prepareEvent(e, t, n = mt(), r = yt()) {
        const i = this.getOptions(), o = Object.keys(this._integrations);
        return !t.integrations && o.length > 0 && (t.integrations = o), this.emit("preprocessEvent", e, t), e.type || r.setLastEventId(e.event_id || t.event_id), an(i, e, t, n, this, r).then((e)=>{
            if (null === e) return e;
            e.contexts = {
                trace: _t(n),
                ...e.contexts
            };
            const t = function(e, t) {
                const n = t.getPropagationContext();
                return n.dsc || Lt(n.traceId, e);
            }(this, n);
            return e.sdkProcessingMetadata = {
                dynamicSamplingContext: t,
                ...e.sdkProcessingMetadata
            }, e;
        });
    }
    _captureEvent(e, t = {}, n) {
        return this._processEvent(e, t, n).then((e)=>e.event_id, (e)=>{
            V && (e instanceof bn && "log" === e.logLevel ? Q.log(e.message) : Q.warn(e));
        });
    }
    _processEvent(e, t, n) {
        const r = this.getOptions(), { sampleRate: i } = r, o = kn(e), s = Sn(e), a = e.type || "error", c = `before send for type \`${a}\``, l = void 0 === i ? void 0 : function(e) {
            if ("boolean" == typeof e) return Number(e);
            const t = "string" == typeof e ? parseFloat(e) : e;
            if (!("number" != typeof t || isNaN(t) || t < 0 || t > 1)) return t;
            V && Q.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(e)} of type ${JSON.stringify(typeof e)}.`);
        }(i);
        if (s && "number" == typeof l && Math.random() > l) return this.recordDroppedEvent("sample_rate", "error", e), Ze(new bn(`Discarding event because it's not included in the random sample (sampling rate = ${i})`, "log"));
        const u = "replay_event" === a ? "replay" : a, d = (e.sdkProcessingMetadata || {}).capturedSpanIsolationScope;
        return this._prepareEvent(e, t, n, d).then((n)=>{
            if (null === n) throw this.recordDroppedEvent("event_processor", u, e), new bn("An event processor returned `null`, will not send event.", "log");
            if (t.data && !0 === t.data.__sentry__) return n;
            const i = function(e, t, n, r) {
                const { beforeSend: i, beforeSendTransaction: o, beforeSendSpan: s } = t;
                if (Sn(n) && i) return i(n, r);
                if (kn(n)) {
                    if (n.spans && s) {
                        const t = [];
                        for (const r of n.spans){
                            const n = s(r);
                            n ? t.push(n) : (It(), e.recordDroppedEvent("before_send", "span"));
                        }
                        n.spans = t;
                    }
                    if (o) {
                        if (n.spans) {
                            const e = n.spans.length;
                            n.sdkProcessingMetadata = {
                                ...n.sdkProcessingMetadata,
                                spanCountBeforeProcessing: e
                            };
                        }
                        return o(n, r);
                    }
                }
                return n;
            }(this, r, n, t);
            return function(e, t) {
                const n = `${t} must return \`null\` or a valid event.`;
                if (Me(e)) return e.then((e)=>{
                    if (!Se(e) && null !== e) throw new bn(n);
                    return e;
                }, (e)=>{
                    throw new bn(`${t} rejected with ${e}`);
                });
                if (!Se(e) && null !== e) throw new bn(n);
                return e;
            }(i, c);
        }).then((r)=>{
            if (null === r) {
                if (this.recordDroppedEvent("before_send", u, e), o) {
                    const t = 1 + (e.spans || []).length;
                    this.recordDroppedEvent("before_send", "span", t);
                }
                throw new bn(`${c} returned \`null\`, will not send event.`, "log");
            }
            const i = n && n.getSession();
            if (!o && i && this._updateSessionFromEvent(i, r), o) {
                const e = (r.sdkProcessingMetadata && r.sdkProcessingMetadata.spanCountBeforeProcessing || 0) - (r.spans ? r.spans.length : 0);
                e > 0 && this.recordDroppedEvent("before_send", "span", e);
            }
            const s = r.transaction_info;
            if (o && s && r.transaction !== e.transaction) {
                const e = "custom";
                r.transaction_info = {
                    ...s,
                    source: e
                };
            }
            return this.sendEvent(r, t), r;
        }).then(null, (e)=>{
            if (e instanceof bn) throw e;
            throw this.captureException(e, {
                data: {
                    __sentry__: !0
                },
                originalException: e
            }), new bn(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: ${e}`);
        });
    }
    _process(e) {
        this._numProcessing++, e.then((e)=>(this._numProcessing--, e), (e)=>(this._numProcessing--, e));
    }
    _clearOutcomes() {
        const e = this._outcomes;
        return this._outcomes = {}, Object.entries(e).map(([e, t])=>{
            const [n, r] = e.split(":");
            return {
                reason: n,
                category: r,
                quantity: t
            };
        });
    }
    _flushOutcomes() {
        V && Q.log("Flushing outcomes...");
        const e = this._clearOutcomes();
        if (0 === e.length) return void (V && Q.log("No outcomes to send"));
        if (!this._dsn) return void (V && Q.log("No dsn provided, will not send outcomes"));
        V && Q.log("Sending outcomes:", e);
        const t = (n = e, $t((r = this._options.tunnel && Rt(this._dsn)) ? {
            dsn: r
        } : {}, [
            [
                {
                    type: "client_report"
                },
                {
                    timestamp: i || $e(),
                    discarded_events: n
                }
            ]
        ]));
        var n, r, i;
        this.sendEnvelope(t);
    }
}
function Sn(e) {
    return void 0 === e.type;
}
function kn(e) {
    return "transaction" === e.type;
}
function Mn(e) {
    const t = [];
    function n(e) {
        return t.splice(t.indexOf(e), 1)[0] || Promise.resolve(void 0);
    }
    return {
        $: t,
        add: function(r) {
            if (!(void 0 === e || t.length < e)) return Ze(new bn("Not adding Promise because buffer limit was reached."));
            const i = r();
            return -1 === t.indexOf(i) && t.push(i), i.then(()=>n(i)).then(null, ()=>n(i).then(null, ()=>{})), i;
        },
        drain: function(e) {
            return new et((n, r)=>{
                let i = t.length;
                if (!i) return n(!0);
                const o = setTimeout(()=>{
                    e && e > 0 && n(!1);
                }, e);
                t.forEach((e)=>{
                    Xe(e).then(()=>{
                        --i || (clearTimeout(o), n(!0));
                    }, r);
                });
            });
        }
    };
}
function Cn(e, { statusCode: t, headers: n }, r = Date.now()) {
    const i = {
        ...e
    }, o = n && n["x-sentry-rate-limits"], s = n && n["retry-after"];
    if (o) for (const e of o.trim().split(",")){
        const [t, n, , , o] = e.split(":", 5), s = parseInt(t, 10), a = 1e3 * (isNaN(s) ? 60 : s);
        if (n) for (const e of n.split(";"))"metric_bucket" === e && o && !o.split(";").includes("custom") || (i[e] = r + a);
        else i.all = r + a;
    }
    else s ? i.all = r + function(e, t = Date.now()) {
        const n = parseInt(`${e}`, 10);
        if (!isNaN(n)) return 1e3 * n;
        const r = Date.parse(`${e}`);
        return isNaN(r) ? 6e4 : r - t;
    }(s, r) : 429 === t && (i.all = r + 6e4);
    return i;
}
function En(e, t, n = Mn(e.bufferSize || 64)) {
    let r = {};
    return {
        send: function(i) {
            const o = [];
            if (zt(i, (t, n)=>{
                const i = Kt(n);
                if (function(e, t, n = Date.now()) {
                    return function(e, t) {
                        return e[t] || e.all || 0;
                    }(e, t) > n;
                }(r, i)) {
                    const r = Tn(t, n);
                    e.recordDroppedEvent("ratelimit_backoff", i, r);
                } else o.push(t);
            }), 0 === o.length) return Xe({});
            const s = $t(i[0], o), a = (t)=>{
                zt(s, (n, r)=>{
                    const i = Tn(n, r);
                    e.recordDroppedEvent(t, Kt(r), i);
                });
            };
            return n.add(()=>t({
                    body: Ht(s)
                }).then((e)=>(void 0 !== e.statusCode && (e.statusCode < 200 || e.statusCode >= 300) && V && Q.warn(`Sentry responded with status code ${e.statusCode} to sent event.`), r = Cn(r, e), e), (e)=>{
                    throw a("network_error"), e;
                })).then((e)=>e, (e)=>{
                if (e instanceof bn) return V && Q.error("Skipped sending event because buffer is full."), a("queue_overflow"), Xe({});
                throw e;
            });
        },
        flush: (e)=>n.drain(e)
    };
}
function Tn(e, t) {
    if ("event" === t || "transaction" === t) return Array.isArray(e) ? e[1] : void 0;
}
const On = 100;
function Pn(e, t) {
    const n = bt(), r = yt();
    if (!n) return;
    const { beforeBreadcrumb: i = null, maxBreadcrumbs: o = On } = n.getOptions();
    if (o <= 0) return;
    const s = {
        timestamp: $e(),
        ...e
    }, a = i ? G(()=>i(s, t)) : s;
    null !== a && (n.emit && n.emit("beforeAddBreadcrumb", a, t), r.addBreadcrumb(a, o));
}
let An;
const jn = new WeakMap, In = ()=>({
        name: "FunctionToString",
        setupOnce () {
            An = Function.prototype.toString;
            try {
                Function.prototype.toString = function(...e) {
                    const t = Re(this), n = jn.has(bt()) && void 0 !== t ? t : this;
                    return An.apply(n, e);
                };
            } catch (e) {}
        },
        setup (e) {
            jn.set(e, !0);
        }
    }), xn = [
    /^Script error\.?$/,
    /^Javascript error: Script error\.? on line 0$/,
    /^ResizeObserver loop completed with undelivered notifications.$/,
    /^Cannot redefine property: googletag$/,
    "undefined is not an object (evaluating 'a.L')",
    'can\'t redefine non-configurable property "solana"',
    "vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)",
    "Can't find variable: _AutofillCallbackHandler",
    /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\d+, MethodName:simulateEvent, ParamCount:\d+$/
], Ln = (e = {})=>({
        name: "InboundFilters",
        processEvent (t, n, r) {
            const i = r.getOptions(), o = function(e = {}, t = {}) {
                return {
                    allowUrls: [
                        ...e.allowUrls || [],
                        ...t.allowUrls || []
                    ],
                    denyUrls: [
                        ...e.denyUrls || [],
                        ...t.denyUrls || []
                    ],
                    ignoreErrors: [
                        ...e.ignoreErrors || [],
                        ...t.ignoreErrors || [],
                        ...e.disableErrorDefaults ? [] : xn
                    ],
                    ignoreTransactions: [
                        ...e.ignoreTransactions || [],
                        ...t.ignoreTransactions || []
                    ],
                    ignoreInternal: void 0 === e.ignoreInternal || e.ignoreInternal
                };
            }(e, i);
            return function(e, t) {
                if (t.ignoreInternal && function(e) {
                    try {
                        return "SentryError" === e.exception.values[0].type;
                    } catch (e) {}
                    return !1;
                }(e)) return V && Q.warn(`Event dropped due to being internal Sentry Error.\nEvent: ${He(e)}`), !0;
                if (function(e, t) {
                    if (e.type || !t || !t.length) return !1;
                    return (function(e) {
                        const t = [];
                        e.message && t.push(e.message);
                        let n;
                        try {
                            n = e.exception.values[e.exception.values.length - 1];
                        } catch (e) {}
                        n && n.value && (t.push(n.value), n.type && t.push(`${n.type}: ${n.value}`));
                        return t;
                    })(e).some((e)=>xe(e, t));
                }(e, t.ignoreErrors)) return V && Q.warn(`Event dropped due to being matched by \`ignoreErrors\` option.\nEvent: ${He(e)}`), !0;
                if (function(e) {
                    if (e.type) return !1;
                    if (!e.exception || !e.exception.values || 0 === e.exception.values.length) return !1;
                    return !e.message && !e.exception.values.some((e)=>e.stacktrace || e.type && "Error" !== e.type || e.value);
                }(e)) return V && Q.warn(`Event dropped due to not having an error message, error type or stacktrace.\nEvent: ${He(e)}`), !0;
                if (function(e, t) {
                    if ("transaction" !== e.type || !t || !t.length) return !1;
                    const n = e.transaction;
                    return !!n && xe(n, t);
                }(e, t.ignoreTransactions)) return V && Q.warn(`Event dropped due to being matched by \`ignoreTransactions\` option.\nEvent: ${He(e)}`), !0;
                if (function(e, t) {
                    if (!t || !t.length) return !1;
                    const n = Dn(e);
                    return !!n && xe(n, t);
                }(e, t.denyUrls)) return V && Q.warn(`Event dropped due to being matched by \`denyUrls\` option.\nEvent: ${He(e)}.\nUrl: ${Dn(e)}`), !0;
                if (!function(e, t) {
                    if (!t || !t.length) return !0;
                    const n = Dn(e);
                    return !n || xe(n, t);
                }(e, t.allowUrls)) return V && Q.warn(`Event dropped due to not being matched by \`allowUrls\` option.\nEvent: ${He(e)}.\nUrl: ${Dn(e)}`), !0;
                return !1;
            }(t, o) ? null : t;
        }
    });
function Dn(e) {
    try {
        let t;
        try {
            t = e.exception.values[0].stacktrace.frames;
        } catch (e) {}
        return t ? function(e = []) {
            for(let t = e.length - 1; t >= 0; t--){
                const n = e[t];
                if (n && "<anonymous>" !== n.filename && "[native code]" !== n.filename) return n.filename || null;
            }
            return null;
        }(t) : null;
    } catch (t) {
        return V && Q.error(`Cannot extract url for event ${He(e)}`), null;
    }
}
function Nn(e, t, n = 250, r, i, o, s) {
    if (!(o.exception && o.exception.values && s && Ce(s.originalException, Error))) return;
    const a = o.exception.values.length > 0 ? o.exception.values[o.exception.values.length - 1] : void 0;
    var c, l;
    a && (o.exception.values = (c = Rn(e, t, i, s.originalException, r, o.exception.values, a, 0), l = n, c.map((e)=>(e.value && (e.value = Ae(e.value, l)), e))));
}
function Rn(e, t, n, r, i, o, s, a) {
    if (o.length >= n + 1) return o;
    let c = [
        ...o
    ];
    if (Ce(r[i], Error)) {
        Fn(s, a);
        const o = e(t, r[i]), l = c.length;
        Bn(o, i, l, a), c = Rn(e, t, n, r[i], i, [
            o,
            ...c
        ], o, l);
    }
    return Array.isArray(r.errors) && r.errors.forEach((r, o)=>{
        if (Ce(r, Error)) {
            Fn(s, a);
            const l = e(t, r), u = c.length;
            Bn(l, `errors[${o}]`, u, a), c = Rn(e, t, n, r, i, [
                l,
                ...c
            ], l, u);
        }
    }), c;
}
function Fn(e, t) {
    e.mechanism = e.mechanism || {
        type: "generic",
        handled: !0
    }, e.mechanism = {
        ...e.mechanism,
        ..."AggregateError" === e.type && {
            is_exception_group: !0
        },
        exception_id: t
    };
}
function Bn(e, t, n, r) {
    e.mechanism = e.mechanism || {
        type: "generic",
        handled: !0
    }, e.mechanism = {
        ...e.mechanism,
        type: "chained",
        source: t,
        exception_id: n,
        parent_id: r
    };
}
function Un(e) {
    if (!e) return {};
    const t = e.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
    if (!t) return {};
    const n = t[6] || "", r = t[8] || "";
    return {
        host: t[4],
        path: t[5],
        protocol: t[2],
        search: n,
        hash: r,
        relative: t[5] + n + r
    };
}
function Vn() {
    "console" in $ && W.forEach(function(e) {
        e in $.console && Le($.console, e, function(t) {
            return H[e] = t, function(...t) {
                ae("console", {
                    args: t,
                    level: e
                });
                const n = H[e];
                n && n.apply($.console, t);
            };
        });
    });
}
function Jn(e) {
    return "warn" === e ? "warning" : [
        "fatal",
        "error",
        "warning",
        "log",
        "info",
        "debug"
    ].includes(e) ? e : "log";
}
const $n = ()=>{
    let e;
    return {
        name: "Dedupe",
        processEvent (t) {
            if (t.type) return t;
            try {
                if (function(e, t) {
                    if (!t) return !1;
                    if (function(e, t) {
                        const n = e.message, r = t.message;
                        if (!n && !r) return !1;
                        if (n && !r || !n && r) return !1;
                        if (n !== r) return !1;
                        if (!zn(e, t)) return !1;
                        if (!qn(e, t)) return !1;
                        return !0;
                    }(e, t)) return !0;
                    if (function(e, t) {
                        const n = Wn(t), r = Wn(e);
                        if (!n || !r) return !1;
                        if (n.type !== r.type || n.value !== r.value) return !1;
                        if (!zn(e, t)) return !1;
                        if (!qn(e, t)) return !1;
                        return !0;
                    }(e, t)) return !0;
                    return !1;
                }(t, e)) return V && Q.warn("Event dropped due to being a duplicate of previously captured event."), null;
            } catch (e) {}
            return e = t;
        }
    };
};
function qn(e, t) {
    let n = ne(e), r = ne(t);
    if (!n && !r) return !0;
    if (n && !r || !n && r) return !1;
    if (r.length !== n.length) return !1;
    for(let e = 0; e < r.length; e++){
        const t = r[e], i = n[e];
        if (t.filename !== i.filename || t.lineno !== i.lineno || t.colno !== i.colno || t.function !== i.function) return !1;
    }
    return !0;
}
function zn(e, t) {
    let n = e.fingerprint, r = t.fingerprint;
    if (!n && !r) return !0;
    if (n && !r || !n && r) return !1;
    try {
        return !(n.join("") !== r.join(""));
    } catch (e) {
        return !1;
    }
}
function Wn(e) {
    return e.exception && e.exception.values && e.exception.values[0];
}
function Hn(e) {
    return void 0 === e ? void 0 : e >= 400 && e < 500 ? "warning" : e >= 500 ? "error" : void 0;
}
const Gn = $;
function Qn(e) {
    return e && /^function\s+\w+\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString());
}
function Kn() {
    if ("string" == typeof EdgeRuntime) return !0;
    if (!function() {
        if (!("fetch" in Gn)) return !1;
        try {
            return new Headers, new Request("http://www.example.com"), new Response, !0;
        } catch (e) {
            return !1;
        }
    }()) return !1;
    if (Qn(Gn.fetch)) return !0;
    let e = !1;
    const t = Gn.document;
    if (t && "function" == typeof t.createElement) try {
        const n = t.createElement("iframe");
        n.hidden = !0, t.head.appendChild(n), n.contentWindow && n.contentWindow.fetch && (e = Qn(n.contentWindow.fetch)), t.head.removeChild(n);
    } catch (e) {
        z && Q.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", e);
    }
    return e;
}
function Yn(e, t) {
    const n = "fetch";
    oe(n, e), se(n, ()=>(function(e, t = !1) {
            if (t && !Kn()) return;
            Le($, "fetch", function(t) {
                return function(...n) {
                    const r = new Error, { method: i, url: o } = function(e) {
                        if (0 === e.length) return {
                            method: "GET",
                            url: ""
                        };
                        if (2 === e.length) {
                            const [t, n] = e;
                            return {
                                url: Zn(t),
                                method: Xn(n, "method") ? String(n.method).toUpperCase() : "GET"
                            };
                        }
                        const t = e[0];
                        return {
                            url: Zn(t),
                            method: Xn(t, "method") ? String(t.method).toUpperCase() : "GET"
                        };
                    }(n), s = {
                        args: n,
                        fetchData: {
                            method: i,
                            url: o
                        },
                        startTimestamp: 1e3 * qe(),
                        virtualError: r
                    };
                    return e || ae("fetch", {
                        ...s
                    }), t.apply($, n).then(async (t)=>(e ? e(t) : ae("fetch", {
                            ...s,
                            endTimestamp: 1e3 * qe(),
                            response: t
                        }), t), (e)=>{
                        throw ae("fetch", {
                            ...s,
                            endTimestamp: 1e3 * qe(),
                            error: e
                        }), ve(e) && void 0 === e.stack && (e.stack = r.stack, De(e, "framesToPop", 1)), e;
                    });
                };
            });
        })(void 0, t));
}
function Xn(e, t) {
    return !!e && "object" == typeof e && !!e[t];
}
function Zn(e) {
    return "string" == typeof e ? e : e ? Xn(e, "url") ? e.url : e.toString ? e.toString() : "" : "";
}
const er = $;
const tr = $;
let nr = 0;
function rr() {
    return nr > 0;
}
function ir(e, t = {}) {
    if (!function(e) {
        return "function" == typeof e;
    }(e)) return e;
    try {
        const t = e.__sentry_wrapped__;
        if (t) return "function" == typeof t ? t : e;
        if (Re(e)) return e;
    } catch (t) {
        return e;
    }
    const n = function(...n) {
        try {
            const r = n.map((e)=>ir(e, t));
            return e.apply(this, r);
        } catch (e) {
            throw nr++, setTimeout(()=>{
                nr--;
            }), function(...e) {
                const t = gt(pe());
                if (2 === e.length) {
                    const [n, r] = e;
                    return n ? t.withSetScope(n, r) : t.withScope(r);
                }
                t.withScope(e[0]);
            }((r)=>{
                var i, o;
                r.addEventProcessor((e)=>(t.mechanism && (Ge(e, void 0, void 0), Qe(e, t.mechanism)), e.extra = {
                        ...e.extra,
                        arguments: n
                    }, e)), i = e, mt().captureException(i, cn(o));
            }), e;
        }
    };
    try {
        for(const t in e)Object.prototype.hasOwnProperty.call(e, t) && (n[t] = e[t]);
    } catch (e) {}
    Ne(n, e), De(e, "__sentry_wrapped__", n);
    try {
        Object.getOwnPropertyDescriptor(n, "name").configurable && Object.defineProperty(n, "name", {
            get: ()=>e.name
        });
    } catch (e) {}
    return n;
}
const or = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
function sr(e, t) {
    const n = lr(e, t), r = {
        type: pr(t),
        value: hr(t)
    };
    return n.length && (r.stacktrace = {
        frames: n
    }), void 0 === r.type && "" === r.value && (r.value = "Unrecoverable error caught"), r;
}
function ar(e, t, n, r) {
    const i = bt(), o = i && i.getOptions().normalizeDepth, s = function(e) {
        for(const t in e)if (Object.prototype.hasOwnProperty.call(e, t)) {
            const n = e[t];
            if (n instanceof Error) return n;
        }
        return;
    }(t), a = {
        __serialized__: Vt(t, o)
    };
    if (s) return {
        exception: {
            values: [
                sr(e, s)
            ]
        },
        extra: a
    };
    const c = {
        exception: {
            values: [
                {
                    type: ke(t) ? t.constructor.name : r ? "UnhandledRejection" : "Error",
                    value: gr(t, {
                        isUnhandledRejection: r
                    })
                }
            ]
        },
        extra: a
    };
    if (n) {
        const t = lr(e, n);
        t.length && (c.exception.values[0].stacktrace = {
            frames: t
        });
    }
    return c;
}
function cr(e, t) {
    return {
        exception: {
            values: [
                sr(e, t)
            ]
        }
    };
}
function lr(e, t) {
    const n = t.stacktrace || t.stack || "", r = function(e) {
        if (e && ur.test(e.message)) return 1;
        return 0;
    }(t), i = function(e) {
        if ("number" == typeof e.framesToPop) return e.framesToPop;
        return 0;
    }(t);
    try {
        return e(n, r, i);
    } catch (e) {}
    return [];
}
const ur = /Minified React error #\d+;/i;
function dr(e) {
    return "undefined" != typeof WebAssembly && void 0 !== WebAssembly.Exception && e instanceof WebAssembly.Exception;
}
function pr(e) {
    const t = e && e.name;
    if (!t && dr(e)) {
        return e.message && Array.isArray(e.message) && 2 == e.message.length ? e.message[0] : "WebAssembly.Exception";
    }
    return t;
}
function hr(e) {
    const t = e && e.message;
    return t ? t.error && "string" == typeof t.error.message ? t.error.message : dr(e) && Array.isArray(e.message) && 2 == e.message.length ? e.message[1] : t : "No error message";
}
function fr(e, t, n, r, i) {
    let o;
    if (me(t) && t.error) {
        return cr(e, t.error);
    }
    if (ye(t) || ge(t, "DOMException")) {
        const i = t;
        if ("stack" in t) o = cr(e, t);
        else {
            const t = i.name || (ye(i) ? "DOMError" : "DOMException"), s = i.message ? `${t}: ${i.message}` : t;
            o = vr(e, s, n, r), Ge(o, s);
        }
        return "code" in i && (o.tags = {
            ...o.tags,
            "DOMException.code": `${i.code}`
        }), o;
    }
    if (ve(t)) return cr(e, t);
    if (Se(t) || ke(t)) {
        return o = ar(e, t, n, i), Qe(o, {
            synthetic: !0
        }), o;
    }
    return o = vr(e, t, n, r), Ge(o, `${t}`, void 0), Qe(o, {
        synthetic: !0
    }), o;
}
function vr(e, t, n, r) {
    const i = {};
    if (r && n) {
        const r = lr(e, n);
        r.length && (i.exception = {
            values: [
                {
                    value: t,
                    stacktrace: {
                        frames: r
                    }
                }
            ]
        }), Qe(i, {
            synthetic: !0
        });
    }
    if (_e(t)) {
        const { __sentry_template_string__: e, __sentry_template_values__: n } = t;
        return i.logentry = {
            message: e,
            params: n
        }, i;
    }
    return i.message = t, i;
}
function gr(e, { isUnhandledRejection: t }) {
    const n = function(e, t = 40) {
        const n = Object.keys(Fe(e));
        n.sort();
        const r = n[0];
        if (!r) return "[object has no keys]";
        if (r.length >= t) return Ae(r, t);
        for(let e = n.length; e > 0; e--){
            const r = n.slice(0, e).join(", ");
            if (!(r.length > t)) return e === n.length ? r : Ae(r, t);
        }
        return "";
    }(e), r = t ? "promise rejection" : "exception";
    if (me(e)) return `Event \`ErrorEvent\` captured as ${r} with message \`${e.message}\``;
    if (ke(e)) {
        return `Event \`${function(e) {
            try {
                const t = Object.getPrototypeOf(e);
                return t ? t.constructor.name : void 0;
            } catch (e) {}
        }(e)}\` (type=${e.type}) captured as ${r}`;
    }
    return `Object captured as ${r} with keys: ${n}`;
}
class mr extends wn {
    constructor(e){
        const t = {
            parentSpanIsAlwaysRootSpan: !0,
            ...e
        };
        !function(e, t, n = [
            t
        ], r = "npm") {
            const i = e._metadata || {};
            i.sdk || (i.sdk = {
                name: `sentry.javascript.${t}`,
                packages: n.map((e)=>({
                        name: `${r}:@sentry/${e}`,
                        version: J
                    })),
                version: J
            }), e._metadata = i;
        }(t, "browser", [
            "browser"
        ], tr.SENTRY_SDK_SOURCE || "npm"), super(t), t.sendClientReports && tr.document && tr.document.addEventListener("visibilitychange", ()=>{
            "hidden" === tr.document.visibilityState && this._flushOutcomes();
        });
    }
    eventFromException(e, t) {
        return function(e, t, n, r) {
            const i = fr(e, t, n && n.syntheticException || void 0, r);
            return Qe(i), i.level = "error", n && n.event_id && (i.event_id = n.event_id), Xe(i);
        }(this._options.stackParser, e, t, this._options.attachStacktrace);
    }
    eventFromMessage(e, t = "info", n) {
        return function(e, t, n = "info", r, i) {
            const o = vr(e, t, r && r.syntheticException || void 0, i);
            return o.level = n, r && r.event_id && (o.event_id = r.event_id), Xe(o);
        }(this._options.stackParser, e, t, n, this._options.attachStacktrace);
    }
    captureUserFeedback(e) {
        if (!this._isEnabled()) return void (or && Q.warn("SDK not enabled, will not capture user feedback."));
        const t = function(e, { metadata: t, tunnel: n, dsn: r }) {
            const i = {
                event_id: e.event_id,
                sent_at: (new Date).toISOString(),
                ...t && t.sdk && {
                    sdk: {
                        name: t.sdk.name,
                        version: t.sdk.version
                    }
                },
                ...!!n && !!r && {
                    dsn: Rt(r)
                }
            }, o = function(e) {
                return [
                    {
                        type: "user_report"
                    },
                    e
                ];
            }(e);
            return $t(i, [
                o
            ]);
        }(e, {
            metadata: this.getSdkMetadata(),
            dsn: this.getDsn(),
            tunnel: this.getOptions().tunnel
        });
        this.sendEnvelope(t);
    }
    _prepareEvent(e, t, n) {
        return e.platform = e.platform || "javascript", super._prepareEvent(e, t, n);
    }
}
const yr = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__, br = $;
let _r, wr, Sr, kr;
function Mr() {
    if (!br.document) return;
    const e = ae.bind(null, "dom"), t = Cr(e, !0);
    br.document.addEventListener("click", t, !1), br.document.addEventListener("keypress", t, !1), [
        "EventTarget",
        "Node"
    ].forEach((t)=>{
        const n = br[t], r = n && n.prototype;
        r && r.hasOwnProperty && r.hasOwnProperty("addEventListener") && (Le(r, "addEventListener", function(t) {
            return function(n, r, i) {
                if ("click" === n || "keypress" == n) try {
                    const r = this.__sentry_instrumentation_handlers__ = this.__sentry_instrumentation_handlers__ || {}, o = r[n] = r[n] || {
                        refCount: 0
                    };
                    if (!o.handler) {
                        const r = Cr(e);
                        o.handler = r, t.call(this, n, r, i);
                    }
                    o.refCount++;
                } catch (e) {}
                return t.call(this, n, r, i);
            };
        }), Le(r, "removeEventListener", function(e) {
            return function(t, n, r) {
                if ("click" === t || "keypress" == t) try {
                    const n = this.__sentry_instrumentation_handlers__ || {}, i = n[t];
                    i && (i.refCount--, i.refCount <= 0 && (e.call(this, t, i.handler, r), i.handler = void 0, delete n[t]), 0 === Object.keys(n).length && delete this.__sentry_instrumentation_handlers__);
                } catch (e) {}
                return e.call(this, t, n, r);
            };
        }));
    });
}
function Cr(e, t = !1) {
    return (n)=>{
        if (!n || n._sentryCaptured) return;
        const r = function(e) {
            try {
                return e.target;
            } catch (e) {
                return null;
            }
        }(n);
        if (function(e, t) {
            return "keypress" === e && (!t || !t.tagName || "INPUT" !== t.tagName && "TEXTAREA" !== t.tagName && !t.isContentEditable);
        }(n.type, r)) return;
        De(n, "_sentryCaptured", !0), r && !r._sentryId && De(r, "_sentryId", ze());
        const i = "keypress" === n.type ? "input" : n.type;
        if (!function(e) {
            if (e.type !== wr) return !1;
            try {
                if (!e.target || e.target._sentryId !== Sr) return !1;
            } catch (e) {}
            return !0;
        }(n)) {
            e({
                event: n,
                name: i,
                global: t
            }), wr = n.type, Sr = r ? r._sentryId : void 0;
        }
        clearTimeout(_r), _r = br.setTimeout(()=>{
            Sr = void 0, wr = void 0;
        }, 1e3);
    };
}
function Er(e) {
    const t = "history";
    oe(t, e), se(t, Tr);
}
function Tr() {
    if (!function() {
        const e = er.chrome, t = e && e.app && e.app.runtime, n = "history" in er && !!er.history.pushState && !!er.history.replaceState;
        return !t && n;
    }()) return;
    const e = br.onpopstate;
    function t(e) {
        return function(...t) {
            const n = t.length > 2 ? t[2] : void 0;
            if (n) {
                const e = kr, t = String(n);
                kr = t;
                ae("history", {
                    from: e,
                    to: t
                });
            }
            return e.apply(this, t);
        };
    }
    br.onpopstate = function(...t) {
        const n = br.location.href, r = kr;
        kr = n;
        if (ae("history", {
            from: r,
            to: n
        }), e) try {
            return e.apply(this, t);
        } catch (e) {}
    }, Le(br.history, "pushState", t), Le(br.history, "replaceState", t);
}
const Or = {};
function Pr(e) {
    Or[e] = void 0;
}
const Ar = "__sentry_xhr_v3__";
function jr() {
    if (!br.XMLHttpRequest) return;
    const e = XMLHttpRequest.prototype;
    e.open = new Proxy(e.open, {
        apply (e, t, n) {
            const r = new Error, i = 1e3 * qe(), o = be(n[0]) ? n[0].toUpperCase() : void 0, s = function(e) {
                if (be(e)) return e;
                try {
                    return e.toString();
                } catch (e) {}
                return;
            }(n[1]);
            if (!o || !s) return e.apply(t, n);
            t[Ar] = {
                method: o,
                url: s,
                request_headers: {}
            }, "POST" === o && s.match(/sentry_key/) && (t.__sentry_own_request__ = !0);
            const a = ()=>{
                const e = t[Ar];
                if (e && 4 === t.readyState) {
                    try {
                        e.status_code = t.status;
                    } catch (e) {}
                    ae("xhr", {
                        endTimestamp: 1e3 * qe(),
                        startTimestamp: i,
                        xhr: t,
                        virtualError: r
                    });
                }
            };
            return "onreadystatechange" in t && "function" == typeof t.onreadystatechange ? t.onreadystatechange = new Proxy(t.onreadystatechange, {
                apply: (e, t, n)=>(a(), e.apply(t, n))
            }) : t.addEventListener("readystatechange", a), t.setRequestHeader = new Proxy(t.setRequestHeader, {
                apply (e, t, n) {
                    const [r, i] = n, o = t[Ar];
                    return o && be(r) && be(i) && (o.request_headers[r.toLowerCase()] = i), e.apply(t, n);
                }
            }), e.apply(t, n);
        }
    }), e.send = new Proxy(e.send, {
        apply (e, t, n) {
            const r = t[Ar];
            if (!r) return e.apply(t, n);
            void 0 !== n[0] && (r.body = n[0]);
            return ae("xhr", {
                startTimestamp: 1e3 * qe(),
                xhr: t
            }), e.apply(t, n);
        }
    });
}
function Ir(e, t = function(e) {
    const t = Or[e];
    if (t) return t;
    let n = br[e];
    if (Qn(n)) return Or[e] = n.bind(br);
    const r = br.document;
    if (r && "function" == typeof r.createElement) try {
        const t = r.createElement("iframe");
        t.hidden = !0, r.head.appendChild(t);
        const i = t.contentWindow;
        i && i[e] && (n = i[e]), r.head.removeChild(t);
    } catch (t) {
        yr && Q.warn(`Could not create sandbox iframe for ${e} check, bailing to window.${e}: `, t);
    }
    return n ? Or[e] = n.bind(br) : n;
}("fetch")) {
    let n = 0, r = 0;
    return En(e, function(i) {
        const o = i.body.length;
        n += o, r++;
        const s = {
            body: i.body,
            method: "POST",
            referrerPolicy: "origin",
            headers: e.headers,
            keepalive: n <= 6e4 && r < 15,
            ...e.fetchOptions
        };
        if (!t) return Pr("fetch"), Ze("No fetch implementation available");
        try {
            return t(e.url, s).then((e)=>(n -= o, r--, {
                    statusCode: e.status,
                    headers: {
                        "x-sentry-rate-limits": e.headers.get("X-Sentry-Rate-Limits"),
                        "retry-after": e.headers.get("Retry-After")
                    }
                }));
        } catch (e) {
            return Pr("fetch"), n -= o, r--, Ze(e);
        }
    });
}
function xr(e, t, n, r) {
    const i = {
        filename: e,
        function: "<anonymous>" === t ? K : t,
        in_app: !0
    };
    return void 0 !== n && (i.lineno = n), void 0 !== r && (i.colno = r), i;
}
const Lr = /^\s*at (\S+?)(?::(\d+))(?::(\d+))\s*$/i, Dr = /^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i, Nr = /\((\S*)(?::(\d+))(?::(\d+))\)/, Rr = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i, Fr = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i, Br = function(...e) {
    const t = e.sort((e, t)=>e[0] - t[0]).map((e)=>e[1]);
    return (e, n = 0, r = 0)=>{
        const i = [], o = e.split("\n");
        for(let e = n; e < o.length; e++){
            const n = o[e];
            if (n.length > 1024) continue;
            const s = Y.test(n) ? n.replace(Y, "$1") : n;
            if (!s.match(/\S*Error: /)) {
                for (const e of t){
                    const t = e(s);
                    if (t) {
                        i.push(t);
                        break;
                    }
                }
                if (i.length >= 50 + r) break;
            }
        }
        return function(e) {
            if (!e.length) return [];
            const t = Array.from(e);
            /sentryWrapped/.test(Z(t).function || "") && t.pop();
            t.reverse(), X.test(Z(t).function || "") && (t.pop(), X.test(Z(t).function || "") && t.pop());
            return t.slice(0, 50).map((e)=>({
                    ...e,
                    filename: e.filename || Z(t).filename,
                    function: e.function || K
                }));
        }(i.slice(r));
    };
}(...[
    [
        30,
        (e)=>{
            const t = Lr.exec(e);
            if (t) {
                const [, e, n, r] = t;
                return xr(e, K, +n, +r);
            }
            const n = Dr.exec(e);
            if (n) {
                if (n[2] && 0 === n[2].indexOf("eval")) {
                    const e = Nr.exec(n[2]);
                    e && (n[2] = e[1], n[3] = e[2], n[4] = e[3]);
                }
                const [e, t] = Ur(n[1] || K, n[2]);
                return xr(t, e, n[3] ? +n[3] : void 0, n[4] ? +n[4] : void 0);
            }
        }
    ],
    [
        50,
        (e)=>{
            const t = Rr.exec(e);
            if (t) {
                if (t[3] && t[3].indexOf(" > eval") > -1) {
                    const e = Fr.exec(t[3]);
                    e && (t[1] = t[1] || "eval", t[3] = e[1], t[4] = e[2], t[5] = "");
                }
                let e = t[3], n = t[1] || K;
                return [n, e] = Ur(n, e), xr(e, n, t[4] ? +t[4] : void 0, t[5] ? +t[5] : void 0);
            }
        }
    ]
]), Ur = (e, t)=>{
    const n = -1 !== e.indexOf("safari-extension"), r = -1 !== e.indexOf("safari-web-extension");
    return n || r ? [
        -1 !== e.indexOf("@") ? e.split("@")[0] : K,
        n ? `safari-extension:${t}` : `safari-web-extension:${t}`
    ] : [
        e,
        t
    ];
}, Vr = 1024, Jr = (e = {})=>{
    const t = {
        console: !0,
        dom: !0,
        fetch: !0,
        history: !0,
        sentry: !0,
        xhr: !0,
        ...e
    };
    return {
        name: "Breadcrumbs",
        setup (e) {
            var n;
            t.console && function(e) {
                const t = "console";
                oe(t, e), se(t, Vn);
            }(function(e) {
                return function(t) {
                    if (bt() !== e) return;
                    const n = {
                        category: "console",
                        data: {
                            arguments: t.args,
                            logger: "console"
                        },
                        level: Jn(t.level),
                        message: je(t.args, " ")
                    };
                    if ("assert" === t.level) {
                        if (!1 !== t.args[0]) return;
                        n.message = `Assertion failed: ${je(t.args.slice(1), " ") || "console.assert"}`, n.data.arguments = t.args.slice(1);
                    }
                    Pn(n, {
                        input: t.args,
                        level: t.level
                    });
                };
            }(e)), t.dom && (n = function(e, t) {
                return function(n) {
                    if (bt() !== e) return;
                    let r, i, o = "object" == typeof t ? t.serializeAttribute : void 0, s = "object" == typeof t && "number" == typeof t.maxStringLength ? t.maxStringLength : void 0;
                    s && s > Vr && (or && Q.warn(`\`dom.maxStringLength\` cannot exceed 1024, but a value of ${s} was configured. Sentry will use 1024 instead.`), s = Vr), "string" == typeof o && (o = [
                        o
                    ]);
                    try {
                        const e = n.event, t = function(e) {
                            return !!e && !!e.target;
                        }(e) ? e.target : e;
                        r = Oe(t, {
                            keyAttrs: o,
                            maxStringLength: s
                        }), i = function(e) {
                            if (!Te.HTMLElement) return null;
                            let t = e;
                            for(let e = 0; e < 5; e++){
                                if (!t) return null;
                                if (t instanceof HTMLElement) {
                                    if (t.dataset.sentryComponent) return t.dataset.sentryComponent;
                                    if (t.dataset.sentryElement) return t.dataset.sentryElement;
                                }
                                t = t.parentNode;
                            }
                            return null;
                        }(t);
                    } catch (e) {
                        r = "<unknown>";
                    }
                    if (0 === r.length) return;
                    const a = {
                        category: `ui.${n.name}`,
                        message: r
                    };
                    i && (a.data = {
                        "ui.component_name": i
                    }), Pn(a, {
                        event: n.event,
                        name: n.name,
                        global: n.global
                    });
                };
            }(e, t.dom), oe("dom", n), se("dom", Mr)), t.xhr && function(e) {
                oe("xhr", e), se("xhr", jr);
            }(function(e) {
                return function(t) {
                    if (bt() !== e) return;
                    const { startTimestamp: n, endTimestamp: r } = t, i = t.xhr[Ar];
                    if (!n || !r || !i) return;
                    const { method: o, url: s, status_code: a, body: c } = i, l = {
                        method: o,
                        url: s,
                        status_code: a
                    }, u = {
                        xhr: t.xhr,
                        input: c,
                        startTimestamp: n,
                        endTimestamp: r
                    };
                    Pn({
                        category: "xhr",
                        data: l,
                        type: "http",
                        level: Hn(a)
                    }, u);
                };
            }(e)), t.fetch && Yn(function(e) {
                return function(t) {
                    if (bt() !== e) return;
                    const { startTimestamp: n, endTimestamp: r } = t;
                    if (r && (!t.fetchData.url.match(/sentry_key/) || "POST" !== t.fetchData.method)) if (t.error) {
                        Pn({
                            category: "fetch",
                            data: t.fetchData,
                            level: "error",
                            type: "http"
                        }, {
                            data: t.error,
                            input: t.args,
                            startTimestamp: n,
                            endTimestamp: r
                        });
                    } else {
                        const e = t.response, i = {
                            ...t.fetchData,
                            status_code: e && e.status
                        }, o = {
                            input: t.args,
                            response: e,
                            startTimestamp: n,
                            endTimestamp: r
                        };
                        Pn({
                            category: "fetch",
                            data: i,
                            type: "http",
                            level: Hn(i.status_code)
                        }, o);
                    }
                };
            }(e)), t.history && Er(function(e) {
                return function(t) {
                    if (bt() !== e) return;
                    let n = t.from, r = t.to;
                    const i = Un(tr.location.href);
                    let o = n ? Un(n) : void 0;
                    const s = Un(r);
                    o && o.path || (o = i), i.protocol === s.protocol && i.host === s.host && (r = s.relative), i.protocol === o.protocol && i.host === o.host && (n = o.relative), Pn({
                        category: "navigation",
                        data: {
                            from: n,
                            to: r
                        }
                    });
                };
            }(e)), t.sentry && e.on("beforeSendEvent", function(e) {
                return function(t) {
                    bt() === e && Pn({
                        category: "sentry." + ("transaction" === t.type ? "transaction" : "event"),
                        event_id: t.event_id,
                        level: t.level,
                        message: He(t)
                    }, {
                        event: t
                    });
                };
            }(e));
        }
    };
};
const $r = [
    "EventTarget",
    "Window",
    "Node",
    "ApplicationCache",
    "AudioTrackList",
    "BroadcastChannel",
    "ChannelMergerNode",
    "CryptoOperation",
    "EventSource",
    "FileReader",
    "HTMLUnknownElement",
    "IDBDatabase",
    "IDBRequest",
    "IDBTransaction",
    "KeyOperation",
    "MediaController",
    "MessagePort",
    "ModalWindow",
    "Notification",
    "SVGElementInstance",
    "Screen",
    "SharedWorker",
    "TextTrack",
    "TextTrackCue",
    "TextTrackList",
    "WebSocket",
    "WebSocketWorker",
    "Worker",
    "XMLHttpRequest",
    "XMLHttpRequestEventTarget",
    "XMLHttpRequestUpload"
], qr = (e = {})=>{
    const t = {
        XMLHttpRequest: !0,
        eventTarget: !0,
        requestAnimationFrame: !0,
        setInterval: !0,
        setTimeout: !0,
        ...e
    };
    return {
        name: "BrowserApiErrors",
        setupOnce () {
            t.setTimeout && Le(tr, "setTimeout", zr), t.setInterval && Le(tr, "setInterval", zr), t.requestAnimationFrame && Le(tr, "requestAnimationFrame", Wr), t.XMLHttpRequest && "XMLHttpRequest" in tr && Le(XMLHttpRequest.prototype, "send", Hr);
            const e = t.eventTarget;
            if (e) {
                (Array.isArray(e) ? e : $r).forEach(Gr);
            }
        }
    };
};
function zr(e) {
    return function(...t) {
        const n = t[0];
        return t[0] = ir(n, {
            mechanism: {
                data: {
                    function: te(e)
                },
                handled: !1,
                type: "instrument"
            }
        }), e.apply(this, t);
    };
}
function Wr(e) {
    return function(t) {
        return e.apply(this, [
            ir(t, {
                mechanism: {
                    data: {
                        function: "requestAnimationFrame",
                        handler: te(e)
                    },
                    handled: !1,
                    type: "instrument"
                }
            })
        ]);
    };
}
function Hr(e) {
    return function(...t) {
        const n = this;
        return [
            "onload",
            "onerror",
            "onprogress",
            "onreadystatechange"
        ].forEach((e)=>{
            e in n && "function" == typeof n[e] && Le(n, e, function(t) {
                const n = {
                    mechanism: {
                        data: {
                            function: e,
                            handler: te(t)
                        },
                        handled: !1,
                        type: "instrument"
                    }
                }, r = Re(t);
                return r && (n.mechanism.data.handler = te(r)), ir(t, n);
            });
        }), e.apply(this, t);
    };
}
function Gr(e) {
    const t = tr[e], n = t && t.prototype;
    n && n.hasOwnProperty && n.hasOwnProperty("addEventListener") && (Le(n, "addEventListener", function(t) {
        return function(n, r, i) {
            try {
                "function" == typeof r.handleEvent && (r.handleEvent = ir(r.handleEvent, {
                    mechanism: {
                        data: {
                            function: "handleEvent",
                            handler: te(r),
                            target: e
                        },
                        handled: !1,
                        type: "instrument"
                    }
                }));
            } catch (e) {}
            return t.apply(this, [
                n,
                ir(r, {
                    mechanism: {
                        data: {
                            function: "addEventListener",
                            handler: te(r),
                            target: e
                        },
                        handled: !1,
                        type: "instrument"
                    }
                }),
                i
            ]);
        };
    }), Le(n, "removeEventListener", function(e) {
        return function(t, n, r) {
            try {
                const i = n.__sentry_wrapped__;
                i && e.call(this, t, i, r);
            } catch (e) {}
            return e.call(this, t, n, r);
        };
    }));
}
const Qr = ()=>({
        name: "BrowserSession",
        setupOnce () {
            void 0 !== tr.document ? (dn({
                ignoreDuration: !0
            }), fn(), Er(({ from: e, to: t })=>{
                void 0 !== e && e !== t && (dn({
                    ignoreDuration: !0
                }), fn());
            })) : or && Q.warn("Using the `browserSessionIntegration` in non-browser environments is not supported.");
        }
    }), Kr = (e = {})=>{
    const t = {
        onerror: !0,
        onunhandledrejection: !0,
        ...e
    };
    return {
        name: "GlobalHandlers",
        setupOnce () {
            Error.stackTraceLimit = 50;
        },
        setup (e) {
            t.onerror && (!function(e) {
                !function(e) {
                    const t = "error";
                    oe(t, e), se(t, le);
                }((t)=>{
                    const { stackParser: n, attachStacktrace: r } = Xr();
                    if (bt() !== e || rr()) return;
                    const { msg: i, url: o, line: s, column: a, error: c } = t, l = function(e, t, n, r) {
                        const i = e.exception = e.exception || {}, o = i.values = i.values || [], s = o[0] = o[0] || {}, a = s.stacktrace = s.stacktrace || {}, c = a.frames = a.frames || [], l = r, u = n, d = be(t) && t.length > 0 ? t : function() {
                            try {
                                return Te.document.location.href;
                            } catch (e) {
                                return "";
                            }
                        }();
                        0 === c.length && c.push({
                            colno: l,
                            filename: d,
                            function: K,
                            in_app: !0,
                            lineno: u
                        });
                        return e;
                    }(fr(n, c || i, void 0, r, !1), o, s, a);
                    l.level = "error", un(l, {
                        originalException: c,
                        mechanism: {
                            handled: !1,
                            type: "onerror"
                        }
                    });
                });
            }(e), Yr("onerror")), t.onunhandledrejection && (!function(e) {
                !function(e) {
                    const t = "unhandledrejection";
                    oe(t, e), se(t, de);
                }((t)=>{
                    const { stackParser: n, attachStacktrace: r } = Xr();
                    if (bt() !== e || rr()) return;
                    const i = function(e) {
                        if (we(e)) return e;
                        try {
                            if ("reason" in e) return e.reason;
                            if ("detail" in e && "reason" in e.detail) return e.detail.reason;
                        } catch (e) {}
                        return e;
                    }(t), o = we(i) ? {
                        exception: {
                            values: [
                                {
                                    type: "UnhandledRejection",
                                    value: `Non-Error promise rejection captured with value: ${String(i)}`
                                }
                            ]
                        }
                    } : fr(n, i, void 0, r, !0);
                    o.level = "error", un(o, {
                        originalException: i,
                        mechanism: {
                            handled: !1,
                            type: "onunhandledrejection"
                        }
                    });
                });
            }(e), Yr("onunhandledrejection"));
        }
    };
};
function Yr(e) {
    or && Q.log(`Global Handler attached: ${e}`);
}
function Xr() {
    const e = bt();
    return e && e.getOptions() || {
        stackParser: ()=>[],
        attachStacktrace: !1
    };
}
const Zr = ()=>({
        name: "HttpContext",
        preprocessEvent (e) {
            if (!tr.navigator && !tr.location && !tr.document) return;
            const t = e.request && e.request.url || tr.location && tr.location.href, { referrer: n } = tr.document || {}, { userAgent: r } = tr.navigator || {}, i = {
                ...e.request && e.request.headers,
                ...n && {
                    Referer: n
                },
                ...r && {
                    "User-Agent": r
                }
            }, o = {
                ...e.request,
                ...t && {
                    url: t
                },
                headers: i
            };
            e.request = o;
        }
    }), ei = (e = {})=>{
    const t = e.limit || 5, n = e.key || "cause";
    return {
        name: "LinkedErrors",
        preprocessEvent (e, r, i) {
            const o = i.getOptions();
            Nn(sr, o.stackParser, o.maxValueLength, n, t, e, r);
        }
    };
};
var ti = "new", ni = "loading", ri = "loaded", ii = "joining-meeting", oi = "joined-meeting", si = "left-meeting", ai = "error", ci = "blocked", li = "off", ui = "sendable", di = "loading", pi = "interrupted", hi = "playable", fi = "unknown", vi = "full", gi = "lobby", mi = "none", yi = "base", bi = "*", _i = "ejected", wi = "nbf-room", Si = "nbf-token", ki = "exp-room", Mi = "exp-token", Ci = "no-room", Ei = "meeting-full", Ti = "end-of-life", Oi = "not-allowed", Pi = "connection-error", Ai = "cam-in-use", ji = "mic-in-use", Ii = "cam-mic-in-use", xi = "permissions", Li = "undefined-mediadevices", Di = "not-found", Ni = "constraints", Ri = "unknown", Fi = "iframe-ready-for-launch-config", Bi = "iframe-launch-config", Ui = "theme-updated", Vi = "loading", Ji = "load-attempt-failed", $i = "loaded", qi = "started-camera", zi = "camera-error", Wi = "joining-meeting", Hi = "joined-meeting", Gi = "left-meeting", Qi = "participant-joined", Ki = "participant-updated", Yi = "participant-left", Xi = "participant-counts-updated", Zi = "access-state-updated", eo = "meeting-session-summary-updated", to = "meeting-session-state-updated", no = "meeting-session-data-error", ro = "waiting-participant-added", io = "waiting-participant-updated", oo = "waiting-participant-removed", so = "track-started", ao = "track-stopped", co = "transcription-started", lo = "transcription-stopped", uo = "transcription-error", po = "recording-started", ho = "recording-stopped", fo = "recording-stats", vo = "recording-error", go = "recording-upload-completed", mo = "recording-data", yo = "app-message", bo = "transcription-message", _o = "remote-media-player-started", wo = "remote-media-player-updated", So = "remote-media-player-stopped", ko = "local-screen-share-started", Mo = "local-screen-share-stopped", Co = "local-screen-share-canceled", Eo = "active-speaker-change", To = "active-speaker-mode-change", Oo = "network-quality-change", Po = "network-connection", Ao = "cpu-load-change", jo = "face-counts-updated", Io = "fullscreen", xo = "exited-fullscreen", Lo = "live-streaming-started", Do = "live-streaming-updated", No = "live-streaming-stopped", Ro = "live-streaming-error", Fo = "lang-updated", Bo = "receive-settings-updated", Uo = "input-settings-updated", Vo = "nonfatal-error", Jo = "error", $o = 4096, qo = 102400, zo = "iframe-call-message", Wo = "local-screen-start", Ho = "daily-method-update-live-streaming-endpoints", Go = "transmit-log", Qo = "daily-custom-track", Ko = {
    NONE: "none",
    BGBLUR: "background-blur",
    BGIMAGE: "background-image",
    FACE_DETECTION: "face-detection"
}, Yo = {
    NONE: "none",
    NOISE_CANCELLATION: "noise-cancellation"
}, Xo = {
    PLAY: "play",
    PAUSE: "pause"
}, Zo = [
    "jpg",
    "png",
    "jpeg"
], es = "add-endpoints", ts = "remove-endpoints", ns = "sip-call-transfer";
function rs() {
    return !is() && "undefined" != typeof window && window.navigator && window.navigator.userAgent ? window.navigator.userAgent : "";
}
function is() {
    return "undefined" != typeof navigator && navigator.product && "ReactNative" === navigator.product;
}
function os() {
    return navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
}
function ss() {
    return !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) && (function(e, t) {
        if (!e || !t) return !0;
        switch(e){
            case "Chrome":
                return t.major >= 75;
            case "Safari":
                return RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection") && !(13 === t.major && 0 === t.minor && 0 === t.point);
            case "Firefox":
                return t.major >= 67;
        }
        return !0;
    }(ms(), ys()) || is());
}
function as() {
    if (is()) return !1;
    if (!document) return !1;
    var e = document.createElement("iframe");
    return !!e.requestFullscreen || !!e.webkitRequestFullscreen;
}
var cs = "none", ls = "software", us = "hardware";
var ds = function() {
    try {
        var e, t = document.createElement("canvas"), n = !1;
        (e = t.getContext("webgl2", {
            failIfMajorPerformanceCaveat: !0
        })) || (n = !0, e = t.getContext("webgl2"));
        var r = null != e;
        return t.remove(), r ? n ? ls : us : cs;
    } catch (e) {
        return cs;
    }
}();
function ps() {
    var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
    return !is() && ds !== cs && (e ? function() {
        if (gs()) return !1;
        return [
            "Chrome",
            "Firefox"
        ].includes(ms());
    }() : function() {
        if (gs()) return !1;
        var e = ms();
        if ("Safari" === e) {
            var t = Ss();
            if (t.major < 15 || 15 === t.major && t.minor < 4) return !1;
        }
        if ("Chrome" === e) {
            return bs().major >= 77;
        }
        if ("Firefox" === e) {
            return ks().major >= 97;
        }
        return [
            "Chrome",
            "Firefox",
            "Safari"
        ].includes(e);
    }());
}
function hs() {
    if (is()) return !1;
    if (vs()) return !1;
    if ("undefined" == typeof AudioWorkletNode) return !1;
    switch(ms()){
        case "Chrome":
        case "Firefox":
            return !0;
        case "Safari":
            var e = ys();
            return e.major > 17 || 17 === e.major && e.minor >= 4;
    }
    return !1;
}
function fs() {
    return os() && !function() {
        var e, t = ms();
        if (!rs()) return !0;
        switch(t){
            case "Chrome":
                return (e = bs()).major && e.major > 0 && e.major < 75;
            case "Firefox":
                return (e = ks()).major < 91;
            case "Safari":
                return (e = Ss()).major < 13 || 13 === e.major && e.minor < 1;
            default:
                return !0;
        }
    }();
}
function vs() {
    return rs().match(/Linux; Android/);
}
function gs() {
    var e, t = rs(), n = t.match(/Mac/) && (!is() && "undefined" != typeof window && null !== (e = window) && void 0 !== e && null !== (e = e.navigator) && void 0 !== e && e.maxTouchPoints ? window.navigator.maxTouchPoints : 0) >= 5;
    return !!(t.match(/Mobi/) || t.match(/Android/) || n) || !!rs().match(/DailyAnd\//) || void 0;
}
function ms() {
    if ("undefined" != typeof window) {
        var e = rs();
        return _s() ? "Safari" : e.indexOf("Edge") > -1 ? "Edge" : e.match(/Chrome\//) ? "Chrome" : e.indexOf("Safari") > -1 || ws() ? "Safari" : e.indexOf("Firefox") > -1 ? "Firefox" : e.indexOf("MSIE") > -1 || e.indexOf(".NET") > -1 ? "IE" : "Unknown Browser";
    }
}
function ys() {
    switch(ms()){
        case "Chrome":
            return bs();
        case "Safari":
            return Ss();
        case "Firefox":
            return ks();
        case "Edge":
            return function() {
                var e = 0, t = 0;
                if ("undefined" != typeof window) {
                    var n = rs().match(/Edge\/(\d+).(\d+)/);
                    if (n) try {
                        e = parseInt(n[1]), t = parseInt(n[2]);
                    } catch (e) {}
                }
                return {
                    major: e,
                    minor: t
                };
            }();
    }
}
function bs() {
    var e = 0, t = 0, n = 0, r = 0, i = !1;
    if ("undefined" != typeof window) {
        var o = rs(), s = o.match(/Chrome\/(\d+).(\d+).(\d+).(\d+)/);
        if (s) try {
            e = parseInt(s[1]), t = parseInt(s[2]), n = parseInt(s[3]), r = parseInt(s[4]), i = o.indexOf("OPR/") > -1;
        } catch (e) {}
    }
    return {
        major: e,
        minor: t,
        build: n,
        patch: r,
        opera: i
    };
}
function _s() {
    return !!rs().match(/iPad|iPhone|iPod/i) && os();
}
function ws() {
    return rs().indexOf("AppleWebKit/605.1.15") > -1;
}
function Ss() {
    var e = 0, t = 0, n = 0;
    if ("undefined" != typeof window) {
        var r = rs().match(/Version\/(\d+).(\d+)(.(\d+))?/);
        if (r) try {
            e = parseInt(r[1]), t = parseInt(r[2]), n = parseInt(r[4]);
        } catch (e) {}
        else (_s() || ws()) && (e = 14, t = 0, n = 3);
    }
    return {
        major: e,
        minor: t,
        point: n
    };
}
function ks() {
    var e = 0, t = 0;
    if ("undefined" != typeof window) {
        var n = rs().match(/Firefox\/(\d+).(\d+)/);
        if (n) try {
            e = parseInt(n[1]), t = parseInt(n[2]);
        } catch (e) {}
    }
    return {
        major: e,
        minor: t
    };
}
var Ms = function() {
    return o(function e() {
        t(this, e);
    }, [
        {
            key: "addListenerForMessagesFromCallMachine",
            value: function(e, t, n) {
                R();
            }
        },
        {
            key: "addListenerForMessagesFromDailyJs",
            value: function(e, t, n) {
                R();
            }
        },
        {
            key: "sendMessageToCallMachine",
            value: function(e, t, n, r) {
                R();
            }
        },
        {
            key: "sendMessageToDailyJs",
            value: function(e, t) {
                R();
            }
        },
        {
            key: "removeListener",
            value: function(e) {
                R();
            }
        }
    ]);
}();
function Cs(e, t) {
    var n = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(e);
        t && (r = r.filter(function(t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), n.push.apply(n, r);
    }
    return n;
}
function Es(e) {
    for(var t = 1; t < arguments.length; t++){
        var n = null != arguments[t] ? arguments[t] : {};
        t % 2 ? Cs(Object(n), !0).forEach(function(t) {
            u(e, t, n[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : Cs(Object(n)).forEach(function(t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
        });
    }
    return e;
}
function Ts() {
    try {
        var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (e) {}
    return (Ts = function() {
        return !!e;
    })();
}
var Os = function() {
    function e() {
        var n, r, i, o;
        return t(this, e), r = this, i = a(i = e), (n = s(r, Ts() ? Reflect.construct(i, o || [], a(r).constructor) : i.apply(r, o)))._wrappedListeners = {}, n._messageCallbacks = {}, n;
    }
    return l(e, Ms), o(e, [
        {
            key: "addListenerForMessagesFromCallMachine",
            value: function(e, t, n) {
                var r = this, i = function(i) {
                    if (i.data && "iframe-call-message" === i.data.what && (!i.data.callClientId || i.data.callClientId === t) && (!i.data.from || "module" !== i.data.from)) {
                        var o = Es({}, i.data);
                        if (delete o.from, o.callbackStamp && r._messageCallbacks[o.callbackStamp]) {
                            var s = o.callbackStamp;
                            r._messageCallbacks[s].call(n, o), delete r._messageCallbacks[s];
                        }
                        delete o.what, delete o.callbackStamp, e.call(n, o);
                    }
                };
                this._wrappedListeners[e] = i, window.addEventListener("message", i);
            }
        },
        {
            key: "addListenerForMessagesFromDailyJs",
            value: function(e, t, n) {
                var r = function(r) {
                    var i;
                    if (!(!r.data || r.data.what !== zo || !r.data.action || r.data.from && "module" !== r.data.from || r.data.callClientId && t && r.data.callClientId !== t || null != r && null !== (i = r.data) && void 0 !== i && i.callFrameId)) {
                        var o = r.data;
                        e.call(n, o);
                    }
                };
                this._wrappedListeners[e] = r, window.addEventListener("message", r);
            }
        },
        {
            key: "sendMessageToCallMachine",
            value: function(e, t, n, r) {
                if (!n) throw new Error("undefined callClientId. Are you trying to use a DailyCall instance previously destroyed?");
                var i = Es({}, e);
                if (i.what = zo, i.from = "module", i.callClientId = n, t) {
                    var o = N();
                    this._messageCallbacks[o] = t, i.callbackStamp = o;
                }
                var s = r ? r.contentWindow : window, a = this._callMachineTargetOrigin(r);
                a && s.postMessage(i, a);
            }
        },
        {
            key: "sendMessageToDailyJs",
            value: function(e, t) {
                e.what = zo, e.callClientId = t, e.from = "embedded", window.postMessage(e, this._targetOriginFromWindowLocation());
            }
        },
        {
            key: "removeListener",
            value: function(e) {
                var t = this._wrappedListeners[e];
                t && (window.removeEventListener("message", t), delete this._wrappedListeners[e]);
            }
        },
        {
            key: "forwardPackagedMessageToCallMachine",
            value: function(e, t, n) {
                var r = Es({}, e);
                r.callClientId = n;
                var i = t ? t.contentWindow : window, o = this._callMachineTargetOrigin(t);
                o && i.postMessage(r, o);
            }
        },
        {
            key: "addListenerForPackagedMessagesFromCallMachine",
            value: function(e, t) {
                var n = function(n) {
                    if (n.data && "iframe-call-message" === n.data.what && (!n.data.callClientId || n.data.callClientId === t) && (!n.data.from || "module" !== n.data.from)) {
                        var r = n.data;
                        e(r);
                    }
                };
                return this._wrappedListeners[e] = n, window.addEventListener("message", n), e;
            }
        },
        {
            key: "removeListenerForPackagedMessagesFromCallMachine",
            value: function(e) {
                var t = this._wrappedListeners[e];
                t && (window.removeEventListener("message", t), delete this._wrappedListeners[e]);
            }
        },
        {
            key: "_callMachineTargetOrigin",
            value: function(e) {
                return e ? e.src ? new URL(e.src).origin : void 0 : this._targetOriginFromWindowLocation();
            }
        },
        {
            key: "_targetOriginFromWindowLocation",
            value: function() {
                return "file:" === window.location.protocol ? "*" : window.location.origin;
            }
        }
    ]);
}();
function Ps(e, t) {
    var n = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(e);
        t && (r = r.filter(function(t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), n.push.apply(n, r);
    }
    return n;
}
function As() {
    try {
        var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (e) {}
    return (As = function() {
        return !!e;
    })();
}
var js = function() {
    function e() {
        var n, r, i, o;
        return t(this, e), r = this, i = a(i = e), n = s(r, As() ? Reflect.construct(i, o || [], a(r).constructor) : i.apply(r, o)), global.callMachineToDailyJsEmitter = global.callMachineToDailyJsEmitter || new y.EventEmitter, global.dailyJsToCallMachineEmitter = global.dailyJsToCallMachineEmitter || new y.EventEmitter, n._wrappedListeners = {}, n._messageCallbacks = {}, n;
    }
    return l(e, Ms), o(e, [
        {
            key: "addListenerForMessagesFromCallMachine",
            value: function(e, t, n) {
                this._addListener(e, global.callMachineToDailyJsEmitter, t, n, "received call machine message");
            }
        },
        {
            key: "addListenerForMessagesFromDailyJs",
            value: function(e, t, n) {
                this._addListener(e, global.dailyJsToCallMachineEmitter, t, n, "received daily-js message");
            }
        },
        {
            key: "sendMessageToCallMachine",
            value: function(e, t, n) {
                this._sendMessage(e, global.dailyJsToCallMachineEmitter, n, t, "sending message to call machine");
            }
        },
        {
            key: "sendMessageToDailyJs",
            value: function(e, t) {
                this._sendMessage(e, global.callMachineToDailyJsEmitter, t, null, "sending message to daily-js");
            }
        },
        {
            key: "removeListener",
            value: function(e) {
                var t = this._wrappedListeners[e];
                t && (global.callMachineToDailyJsEmitter.removeListener("message", t), global.dailyJsToCallMachineEmitter.removeListener("message", t), delete this._wrappedListeners[e]);
            }
        },
        {
            key: "_addListener",
            value: function(e, t, n, r, i) {
                var o = this, s = function(t) {
                    if (t.callClientId === n) {
                        if (t.callbackStamp && o._messageCallbacks[t.callbackStamp]) {
                            var i = t.callbackStamp;
                            o._messageCallbacks[i].call(r, t), delete o._messageCallbacks[i];
                        }
                        e.call(r, t);
                    }
                };
                this._wrappedListeners[e] = s, t.addListener("message", s);
            }
        },
        {
            key: "_sendMessage",
            value: function(e, t, n, r, i) {
                var o = function(e) {
                    for(var t = 1; t < arguments.length; t++){
                        var n = null != arguments[t] ? arguments[t] : {};
                        t % 2 ? Ps(Object(n), !0).forEach(function(t) {
                            u(e, t, n[t]);
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : Ps(Object(n)).forEach(function(t) {
                            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
                        });
                    }
                    return e;
                }({}, e);
                if (o.callClientId = n, r) {
                    var s = N();
                    this._messageCallbacks[s] = r, o.callbackStamp = s;
                }
                t.emit("message", o);
            }
        }
    ]);
}(), Is = "replace", xs = "shallow-merge", Ls = [
    Is,
    xs
];
var Ds = function() {
    function e() {
        var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = n.data, i = n.mergeStrategy, o = void 0 === i ? Is : i;
        t(this, e), e._validateMergeStrategy(o), e._validateData(r, o), this.mergeStrategy = o, this.data = r;
    }
    return o(e, [
        {
            key: "isNoOp",
            value: function() {
                return e.isNoOpUpdate(this.data, this.mergeStrategy);
            }
        }
    ], [
        {
            key: "isNoOpUpdate",
            value: function(e, t) {
                return 0 === Object.keys(e).length && t === xs;
            }
        },
        {
            key: "_validateMergeStrategy",
            value: function(e) {
                if (!Ls.includes(e)) throw Error("Unrecognized mergeStrategy provided. Options are: [".concat(Ls, "]"));
            }
        },
        {
            key: "_validateData",
            value: function(e, t) {
                if (!function(e) {
                    if (null == e || "object" !== n(e)) return !1;
                    var t = Object.getPrototypeOf(e);
                    return null == t || t === Object.prototype;
                }(e)) throw Error("Meeting session data must be a plain (map-like) object");
                var r;
                try {
                    if (r = JSON.stringify(e), t === Is) {
                        var i = JSON.parse(r);
                        S(i, e) || console.warn("The meeting session data provided will be modified when serialized.", i, e);
                    } else if (t === xs) {
                        for(var o in e)if (Object.hasOwnProperty.call(e, o) && void 0 !== e[o]) {
                            var s = JSON.parse(JSON.stringify(e[o]));
                            S(e[o], s) || console.warn("At least one key in the meeting session data provided will be modified when serialized.", s, e[o]);
                        }
                    }
                } catch (e) {
                    throw Error("Meeting session data must be serializable to JSON: ".concat(e));
                }
                if (r.length > qo) throw Error("Meeting session data is too large (".concat(r.length, " characters). Maximum size suppported is ").concat(qo, "."));
            }
        }
    ]);
}();
function Ns() {
    try {
        var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (e) {}
    return (Ns = function() {
        return !!e;
    })();
}
function Rs(e) {
    var t = "function" == typeof Map ? new Map : void 0;
    return Rs = function(e) {
        if (null === e || !function(e) {
            try {
                return -1 !== Function.toString.call(e).indexOf("[native code]");
            } catch (t) {
                return "function" == typeof e;
            }
        }(e)) return e;
        if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");
        if (void 0 !== t) {
            if (t.has(e)) return t.get(e);
            t.set(e, n);
        }
        function n() {
            return function(e, t, n) {
                if (Ns()) return Reflect.construct.apply(null, arguments);
                var r = [
                    null
                ];
                r.push.apply(r, t);
                var i = new (e.bind.apply(e, r));
                return n && c(i, n.prototype), i;
            }(e, arguments, a(this).constructor);
        }
        return n.prototype = Object.create(e.prototype, {
            constructor: {
                value: n,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), c(n, e);
    }, Rs(e);
}
function Fs() {
    try {
        var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (e) {}
    return (Fs = function() {
        return !!e;
    })();
}
function Bs(e) {
    var t, n = null === (t = window._daily) || void 0 === t ? void 0 : t.pendings;
    if (n) {
        var r = n.indexOf(e);
        -1 !== r && n.splice(r, 1);
    }
}
var Us = function() {
    return o(function e(n) {
        t(this, e), this._currentLoad = null, this._callClientId = n;
    }, [
        {
            key: "load",
            value: function() {
                var e, t = this, n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = arguments.length > 1 ? arguments[1] : void 0, i = arguments.length > 2 ? arguments[2] : void 0;
                if (this.loaded) return window._daily.instances[this._callClientId].callMachine.reset(), void r(!0);
                e = this._callClientId, window._daily.pendings.push(e), this._currentLoad && this._currentLoad.cancel(), this._currentLoad = new Vs(n, function() {
                    r(!1);
                }, function(e, n) {
                    n || Bs(t._callClientId), i(e, n);
                }), this._currentLoad.start();
            }
        },
        {
            key: "cancel",
            value: function() {
                this._currentLoad && this._currentLoad.cancel(), Bs(this._callClientId);
            }
        },
        {
            key: "loaded",
            get: function() {
                return this._currentLoad && this._currentLoad.succeeded;
            }
        }
    ]);
}(), Vs = function() {
    return o(function e() {
        var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = arguments.length > 1 ? arguments[1] : void 0, i = arguments.length > 2 ? arguments[2] : void 0;
        t(this, e), this._attemptsRemaining = 3, this._currentAttempt = null, this._dailyConfig = n, this._successCallback = r, this._failureCallback = i;
    }, [
        {
            key: "start",
            value: function() {
                var e = this;
                if (!this._currentAttempt) {
                    var t = function(n) {
                        e._currentAttempt.cancelled || (e._attemptsRemaining--, e._failureCallback(n, e._attemptsRemaining > 0), e._attemptsRemaining <= 0 || setTimeout(function() {
                            e._currentAttempt.cancelled || (e._currentAttempt = new qs(e._dailyConfig, e._successCallback, t), e._currentAttempt.start());
                        }, 3e3));
                    };
                    this._currentAttempt = new qs(this._dailyConfig, this._successCallback, t), this._currentAttempt.start();
                }
            }
        },
        {
            key: "cancel",
            value: function() {
                this._currentAttempt && this._currentAttempt.cancel();
            }
        },
        {
            key: "cancelled",
            get: function() {
                return this._currentAttempt && this._currentAttempt.cancelled;
            }
        },
        {
            key: "succeeded",
            get: function() {
                return this._currentAttempt && this._currentAttempt.succeeded;
            }
        }
    ]);
}(), Js = function() {
    function e() {
        return t(this, e), n = this, i = arguments, r = a(r = e), s(n, Fs() ? Reflect.construct(r, i || [], a(n).constructor) : r.apply(n, i));
        "TURBOPACK unreachable";
        var n, r, i;
    }
    return l(e, Rs(Error)), o(e);
}(), $s = 2e4, qs = function() {
    return o(function e(n, r, i) {
        t(this, e), this._loadAttemptImpl = is() || !n.avoidEval ? new zs(n, r, i) : new Ws(n, r, i);
    }, [
        {
            key: "start",
            value: (e = p(function*() {
                return this._loadAttemptImpl.start();
            }), function() {
                return e.apply(this, arguments);
            })
        },
        {
            key: "cancel",
            value: function() {
                this._loadAttemptImpl.cancel();
            }
        },
        {
            key: "cancelled",
            get: function() {
                return this._loadAttemptImpl.cancelled;
            }
        },
        {
            key: "succeeded",
            get: function() {
                return this._loadAttemptImpl.succeeded;
            }
        }
    ]);
    "TURBOPACK unreachable";
    var e;
}(), zs = function() {
    return o(function e(n, r, i) {
        t(this, e), this.cancelled = !1, this.succeeded = !1, this._networkTimedOut = !1, this._networkTimeout = null, this._iosCache = "undefined" != typeof iOSCallObjectBundleCache && iOSCallObjectBundleCache, this._refetchHeaders = null, this._dailyConfig = n, this._successCallback = r, this._failureCallback = i;
    }, [
        {
            key: "start",
            value: (i = p(function*() {
                var e = B(this._dailyConfig);
                !(yield this._tryLoadFromIOSCache(e)) && this._loadFromNetwork(e);
            }), function() {
                return i.apply(this, arguments);
            })
        },
        {
            key: "cancel",
            value: function() {
                clearTimeout(this._networkTimeout), this.cancelled = !0;
            }
        },
        {
            key: "_tryLoadFromIOSCache",
            value: (r = p(function*(e) {
                if (!this._iosCache) return !1;
                try {
                    var t = yield this._iosCache.get(e);
                    return !!this.cancelled || !!t && (t.code ? (Function('"use strict";' + t.code)(), this.succeeded = !0, this._successCallback(), !0) : (this._refetchHeaders = t.refetchHeaders, !1));
                } catch (e) {
                    return !1;
                }
            }), function(e) {
                return r.apply(this, arguments);
            })
        },
        {
            key: "_loadFromNetwork",
            value: (n = p(function*(e) {
                var t = this;
                this._networkTimeout = setTimeout(function() {
                    t._networkTimedOut = !0, t._failureCallback({
                        msg: "Timed out (>".concat($s, " ms) when loading call object bundle ").concat(e),
                        type: "timeout"
                    });
                }, $s);
                try {
                    var n = this._refetchHeaders ? {
                        headers: this._refetchHeaders
                    } : {}, r = yield fetch(e, n);
                    if (clearTimeout(this._networkTimeout), this.cancelled || this._networkTimedOut) throw new Js;
                    var i = yield this._getBundleCodeFromResponse(e, r);
                    if (this.cancelled) throw new Js;
                    Function('"use strict";' + i)(), this._iosCache && this._iosCache.set(e, i, r.headers), this.succeeded = !0, this._successCallback();
                } catch (t) {
                    if (clearTimeout(this._networkTimeout), t instanceof Js || this.cancelled || this._networkTimedOut) return;
                    this._failureCallback({
                        msg: "Failed to load call object bundle ".concat(e, ": ").concat(t),
                        type: t.message
                    });
                }
            }), function(e) {
                return n.apply(this, arguments);
            })
        },
        {
            key: "_getBundleCodeFromResponse",
            value: (e = p(function*(e, t) {
                if (t.ok) return yield t.text();
                if (this._iosCache && 304 === t.status) return (yield this._iosCache.renew(e, t.headers)).code;
                throw new Error("Received ".concat(t.status, " response"));
            }), function(t, n) {
                return e.apply(this, arguments);
            })
        }
    ]);
    "TURBOPACK unreachable";
    var e, n, r, i;
}(), Ws = function() {
    return o(function e(n, r, i) {
        t(this, e), this.cancelled = !1, this.succeeded = !1, this._dailyConfig = n, this._successCallback = r, this._failureCallback = i, this._attemptId = N(), this._networkTimeout = null, this._scriptElement = null;
    }, [
        {
            key: "start",
            value: function() {
                window._dailyCallMachineLoadWaitlist || (window._dailyCallMachineLoadWaitlist = new Set);
                var e = B(this._dailyConfig);
                "object" === ("undefined" == typeof document ? "undefined" : n(document)) ? this._startLoading(e) : this._failureCallback({
                    msg: "Call object bundle must be loaded in a DOM/web context",
                    type: "missing context"
                });
            }
        },
        {
            key: "cancel",
            value: function() {
                this._stopLoading(), this.cancelled = !0;
            }
        },
        {
            key: "_startLoading",
            value: function(e) {
                var t = this;
                this._signUpForCallMachineLoadWaitlist(), this._networkTimeout = setTimeout(function() {
                    t._stopLoading(), t._failureCallback({
                        msg: "Timed out (>".concat($s, " ms) when loading call object bundle ").concat(e),
                        type: "timeout"
                    });
                }, $s);
                var n = document.getElementsByTagName("head")[0], r = document.createElement("script");
                this._scriptElement = r, r.onload = function() {
                    t._stopLoading(), t.succeeded = !0, t._successCallback();
                }, r.onerror = function(e) {
                    t._stopLoading(), t._failureCallback({
                        msg: "Failed to load call object bundle ".concat(e.target.src),
                        type: e.message
                    });
                }, r.src = e, n.appendChild(r);
            }
        },
        {
            key: "_stopLoading",
            value: function() {
                this._withdrawFromCallMachineLoadWaitlist(), clearTimeout(this._networkTimeout), this._scriptElement && (this._scriptElement.onload = null, this._scriptElement.onerror = null);
            }
        },
        {
            key: "_signUpForCallMachineLoadWaitlist",
            value: function() {
                window._dailyCallMachineLoadWaitlist.add(this._attemptId);
            }
        },
        {
            key: "_withdrawFromCallMachineLoadWaitlist",
            value: function() {
                window._dailyCallMachineLoadWaitlist.delete(this._attemptId);
            }
        }
    ]);
}(), Hs = function(e, t, n) {
    return !0 === Ks(e.local, t, n);
}, Gs = function(e, t, n) {
    return e.local.streams && e.local.streams[t] && e.local.streams[t].stream && e.local.streams[t].stream["get".concat("video" === n ? "Video" : "Audio", "Tracks")]()[0];
}, Qs = function(e, t, n, r) {
    var i = Ys(e, t, n, r);
    return i && i.pendingTrack;
}, Ks = function(e, t, n) {
    if (!e) return !1;
    var r = function(e) {
        switch(e){
            case "avatar":
                return !0;
            case "staged":
                return e;
            default:
                return !!e;
        }
    }, i = e.public.subscribedTracks;
    return i && i[t] ? -1 === [
        "cam-audio",
        "cam-video",
        "screen-video",
        "screen-audio",
        "rmpAudio",
        "rmpVideo"
    ].indexOf(n) && i[t].custom ? [
        !0,
        "staged"
    ].includes(i[t].custom) ? r(i[t].custom) : r(i[t].custom[n]) : r(i[t][n]) : !i || r(i.ALL);
}, Ys = function(e, t, n, r) {
    var i = Object.values(e.streams || {}).filter(function(e) {
        return e.participantId === t && e.type === n && e.pendingTrack && e.pendingTrack.kind === r;
    }).sort(function(e, t) {
        return new Date(t.starttime) - new Date(e.starttime);
    });
    return i && i[0];
}, Xs = function(e, t) {
    var n = e.local.public.customTracks;
    if (n && n[t]) return n[t].track;
};
function Zs(e, t) {
    for(var n = t.getState(), r = 0, i = [
        "cam",
        "screen"
    ]; r < i.length; r++)for(var o = i[r], s = 0, a = [
        "video",
        "audio"
    ]; s < a.length; s++){
        var c = a[s], l = "cam" === o ? c : "screen".concat(c.charAt(0).toUpperCase() + c.slice(1)), u = e.tracks[l];
        if (u) {
            var d = e.local ? Gs(n, o, c) : Qs(n, e.session_id, o, c);
            "playable" === u.state && (u.track = d), u.persistentTrack = d;
        }
    }
}
function ea(e, t) {
    try {
        var n = t.getState();
        for(var r in e.tracks)if (!ta(r)) {
            var i = e.tracks[r].kind;
            if (i) {
                var o = e.tracks[r];
                if (o) {
                    var s = e.local ? Xs(n, r) : Qs(n, e.session_id, r, i);
                    "playable" === o.state && (e.tracks[r].track = s), o.persistentTrack = s;
                }
            } else console.error("unknown type for custom track");
        }
    } catch (e) {
        console.error(e);
    }
}
function ta(e) {
    return [
        "video",
        "audio",
        "screenVideo",
        "screenAudio"
    ].includes(e);
}
function na(e, t, n) {
    var r = n.getState();
    if (e.local) {
        if (e.audio) try {
            e.audioTrack = r.local.streams.cam.stream.getAudioTracks()[0], e.audioTrack || (e.audio = !1);
        } catch (e) {}
        if (e.video) try {
            e.videoTrack = r.local.streams.cam.stream.getVideoTracks()[0], e.videoTrack || (e.video = !1);
        } catch (e) {}
        if (e.screen) try {
            e.screenVideoTrack = r.local.streams.screen.stream.getVideoTracks()[0], e.screenAudioTrack = r.local.streams.screen.stream.getAudioTracks()[0], e.screenVideoTrack || e.screenAudioTrack || (e.screen = !1);
        } catch (e) {}
    } else {
        var i = !0;
        try {
            var o = r.participants[e.session_id];
            o && o.public && o.public.rtcType && "peer-to-peer" === o.public.rtcType.impl && o.private && ![
                "connected",
                "completed"
            ].includes(o.private.peeringState) && (i = !1);
        } catch (e) {
            console.error(e);
        }
        if (!i) return e.audio = !1, e.audioTrack = !1, e.video = !1, e.videoTrack = !1, e.screen = !1, void (e.screenTrack = !1);
        try {
            r.streams;
            if (e.audio && Hs(r, e.session_id, "cam-audio")) {
                var s = Qs(r, e.session_id, "cam", "audio");
                s && (t && t.audioTrack && t.audioTrack.id === s.id ? e.audioTrack = s : s.muted || (e.audioTrack = s)), e.audioTrack || (e.audio = !1);
            }
            if (e.video && Hs(r, e.session_id, "cam-video")) {
                var a = Qs(r, e.session_id, "cam", "video");
                a && (t && t.videoTrack && t.videoTrack.id === a.id ? e.videoTrack = a : a.muted || (e.videoTrack = a)), e.videoTrack || (e.video = !1);
            }
            if (e.screen && Hs(r, e.session_id, "screen-audio")) {
                var c = Qs(r, e.session_id, "screen", "audio");
                c && (t && t.screenAudioTrack && t.screenAudioTrack.id === c.id ? e.screenAudioTrack = c : c.muted || (e.screenAudioTrack = c));
            }
            if (e.screen && Hs(r, e.session_id, "screen-video")) {
                var l = Qs(r, e.session_id, "screen", "video");
                l && (t && t.screenVideoTrack && t.screenVideoTrack.id === l.id ? e.screenVideoTrack = l : l.muted || (e.screenVideoTrack = l));
            }
            e.screenVideoTrack || e.screenAudioTrack || (e.screen = !1);
        } catch (e) {
            console.error("unexpected error matching up tracks", e);
        }
    }
}
function ra(e, t) {
    var n = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
    if (!n) {
        if (Array.isArray(e) || (n = function(e, t) {
            if (e) {
                if ("string" == typeof e) return ia(e, t);
                var n = ({}).toString.call(e).slice(8, -1);
                return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? ia(e, t) : void 0;
            }
        }(e)) || t && e && "number" == typeof e.length) {
            n && (e = n);
            var r = 0, i = function() {};
            return {
                s: i,
                n: function() {
                    return r >= e.length ? {
                        done: !0
                    } : {
                        done: !1,
                        value: e[r++]
                    };
                },
                e: function(e) {
                    throw e;
                },
                f: i
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o, s = !0, a = !1;
    return {
        s: function() {
            n = n.call(e);
        },
        n: function() {
            var e = n.next();
            return s = e.done, e;
        },
        e: function(e) {
            a = !0, o = e;
        },
        f: function() {
            try {
                s || null == n.return || n.return();
            } finally{
                if (a) throw o;
            }
        }
    };
}
function ia(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for(var n = 0, r = Array(t); n < t; n++)r[n] = e[n];
    return r;
}
var oa = new Map, sa = null;
function aa(e, t) {
    var n = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
    if (!n) {
        if (Array.isArray(e) || (n = function(e, t) {
            if (e) {
                if ("string" == typeof e) return ca(e, t);
                var n = ({}).toString.call(e).slice(8, -1);
                return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? ca(e, t) : void 0;
            }
        }(e)) || t && e && "number" == typeof e.length) {
            n && (e = n);
            var r = 0, i = function() {};
            return {
                s: i,
                n: function() {
                    return r >= e.length ? {
                        done: !0
                    } : {
                        done: !1,
                        value: e[r++]
                    };
                },
                e: function(e) {
                    throw e;
                },
                f: i
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o, s = !0, a = !1;
    return {
        s: function() {
            n = n.call(e);
        },
        n: function() {
            var e = n.next();
            return s = e.done, e;
        },
        e: function(e) {
            a = !0, o = e;
        },
        f: function() {
            try {
                s || null == n.return || n.return();
            } finally{
                if (a) throw o;
            }
        }
    };
}
function ca(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for(var n = 0, r = Array(t); n < t; n++)r[n] = e[n];
    return r;
}
var la = new Map, ua = null;
function da(e) {
    ha() ? function(e) {
        oa.has(e) || (oa.set(e, {}), navigator.mediaDevices.enumerateDevices().then(function(t) {
            oa.has(e) && (oa.get(e).lastDevicesString = JSON.stringify(t), sa || (sa = function() {
                var e = p(function*() {
                    var e, t = yield navigator.mediaDevices.enumerateDevices(), n = ra(oa.keys());
                    try {
                        for(n.s(); !(e = n.n()).done;){
                            var r = e.value, i = JSON.stringify(t);
                            i !== oa.get(r).lastDevicesString && (oa.get(r).lastDevicesString = i, r(t));
                        }
                    } catch (e) {
                        n.e(e);
                    } finally{
                        n.f();
                    }
                });
                return function() {
                    return e.apply(this, arguments);
                };
            }(), navigator.mediaDevices.addEventListener("devicechange", sa)));
        }).catch(function() {}));
    }(e) : function(e) {
        la.has(e) || (la.set(e, {}), navigator.mediaDevices.enumerateDevices().then(function(t) {
            la.has(e) && (la.get(e).lastDevicesString = JSON.stringify(t), ua || (ua = setInterval(p(function*() {
                var e, t = yield navigator.mediaDevices.enumerateDevices(), n = aa(la.keys());
                try {
                    for(n.s(); !(e = n.n()).done;){
                        var r = e.value, i = JSON.stringify(t);
                        i !== la.get(r).lastDevicesString && (la.get(r).lastDevicesString = i, r(t));
                    }
                } catch (e) {
                    n.e(e);
                } finally{
                    n.f();
                }
            }), 3e3)));
        }));
    }(e);
}
function pa(e) {
    ha() ? function(e) {
        oa.has(e) && (oa.delete(e), 0 === oa.size && sa && (navigator.mediaDevices.removeEventListener("devicechange", sa), sa = null));
    }(e) : function(e) {
        la.has(e) && (la.delete(e), 0 === la.size && ua && (clearInterval(ua), ua = null));
    }(e);
}
function ha() {
    var e;
    return is() || void 0 !== (null === (e = navigator.mediaDevices) || void 0 === e ? void 0 : e.ondevicechange);
}
var fa = new Set;
function va(e, t) {
    var n = t.isLocalScreenVideo;
    return e && "live" === e.readyState && !function(e, t) {
        return (!t.isLocalScreenVideo || "Chrome" !== ms()) && e.muted && !fa.has(e.id);
    }(e, {
        isLocalScreenVideo: n
    });
}
function ga(e, t) {
    var n = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(e);
        t && (r = r.filter(function(t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), n.push.apply(n, r);
    }
    return n;
}
function ma(e) {
    for(var t = 1; t < arguments.length; t++){
        var n = null != arguments[t] ? arguments[t] : {};
        t % 2 ? ga(Object(n), !0).forEach(function(t) {
            u(e, t, n[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : ga(Object(n)).forEach(function(t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
        });
    }
    return e;
}
var ya = Object.freeze({
    VIDEO: "video",
    AUDIO: "audio",
    SCREEN_VIDEO: "screenVideo",
    SCREEN_AUDIO: "screenAudio",
    CUSTOM_VIDEO: "customVideo",
    CUSTOM_AUDIO: "customAudio"
}), ba = Object.freeze({
    PARTICIPANTS: "participants",
    STREAMING: "streaming",
    TRANSCRIPTION: "transcription"
}), _a = Object.values(ya), wa = [
    "v",
    "a",
    "sv",
    "sa",
    "cv",
    "ca"
];
Object.freeze(_a.reduce(function(e, t, n) {
    return e[t] = wa[n], e;
}, {})), Object.freeze(wa.reduce(function(e, t, n) {
    return e[t] = _a[n], e;
}, {}));
var Sa = [
    ya.VIDEO,
    ya.AUDIO,
    ya.SCREEN_VIDEO,
    ya.SCREEN_AUDIO
], ka = Object.values(ba), Ma = [
    "p",
    "s",
    "t"
];
Object.freeze(ka.reduce(function(e, t, n) {
    return e[t] = Ma[n], e;
}, {})), Object.freeze(Ma.reduce(function(e, t, n) {
    return e[t] = ka[n], e;
}, {}));
var Ca = function() {
    function e() {
        var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = n.base, i = n.byUserId, o = n.byParticipantId;
        t(this, e), this.base = r, this.byUserId = i, this.byParticipantId = o;
    }
    return o(e, [
        {
            key: "clone",
            value: function() {
                var t = new e;
                if (this.base instanceof Ea ? t.base = this.base.clone() : t.base = this.base, void 0 !== this.byUserId) for(var n in t.byUserId = {}, this.byUserId){
                    var r = this.byUserId[n];
                    t.byUserId[n] = r instanceof Ea ? r.clone() : r;
                }
                if (void 0 !== this.byParticipantId) for(var i in t.byParticipantId = {}, this.byParticipantId){
                    var o = this.byParticipantId[i];
                    t.byParticipantId[i] = o instanceof Ea ? o.clone() : o;
                }
                return t;
            }
        },
        {
            key: "toJSONObject",
            value: function() {
                var e = {};
                if ("boolean" == typeof this.base ? e.base = this.base : this.base instanceof Ea && (e.base = this.base.toJSONObject()), void 0 !== this.byUserId) for(var t in e.byUserId = {}, this.byUserId){
                    var n = this.byUserId[t];
                    e.byUserId[t] = n instanceof Ea ? n.toJSONObject() : n;
                }
                if (void 0 !== this.byParticipantId) for(var r in e.byParticipantId = {}, this.byParticipantId){
                    var i = this.byParticipantId[r];
                    e.byParticipantId[r] = i instanceof Ea ? i.toJSONObject() : i;
                }
                return e;
            }
        },
        {
            key: "toMinifiedJSONObject",
            value: function() {
                var e = {};
                if (void 0 !== this.base && ("boolean" == typeof this.base ? e.b = this.base : e.b = this.base.toMinifiedJSONObject()), void 0 !== this.byUserId) for(var t in e.u = {}, this.byUserId){
                    var n = this.byUserId[t];
                    e.u[t] = "boolean" == typeof n ? n : n.toMinifiedJSONObject();
                }
                if (void 0 !== this.byParticipantId) for(var r in e.p = {}, this.byParticipantId){
                    var i = this.byParticipantId[r];
                    e.p[r] = "boolean" == typeof i ? i : i.toMinifiedJSONObject();
                }
                return e;
            }
        },
        {
            key: "normalize",
            value: function() {
                return this.base instanceof Ea && (this.base = this.base.normalize()), this.byUserId && (this.byUserId = Object.fromEntries(Object.entries(this.byUserId).map(function(e) {
                    var t = f(e, 2), n = t[0], r = t[1];
                    return [
                        n,
                        r instanceof Ea ? r.normalize() : r
                    ];
                }))), this.byParticipantId && (this.byParticipantId = Object.fromEntries(Object.entries(this.byParticipantId).map(function(e) {
                    var t = f(e, 2), n = t[0], r = t[1];
                    return [
                        n,
                        r instanceof Ea ? r.normalize() : r
                    ];
                }))), this;
            }
        }
    ], [
        {
            key: "fromJSONObject",
            value: function(t) {
                var n, r, i;
                if (void 0 !== t.base && (n = "boolean" == typeof t.base ? t.base : Ea.fromJSONObject(t.base)), void 0 !== t.byUserId) for(var o in r = {}, t.byUserId){
                    var s = t.byUserId[o];
                    r[o] = "boolean" == typeof s ? s : Ea.fromJSONObject(s);
                }
                if (void 0 !== t.byParticipantId) for(var a in i = {}, t.byParticipantId){
                    var c = t.byParticipantId[a];
                    i[a] = "boolean" == typeof c ? c : Ea.fromJSONObject(c);
                }
                return new e({
                    base: n,
                    byUserId: r,
                    byParticipantId: i
                });
            }
        },
        {
            key: "fromMinifiedJSONObject",
            value: function(t) {
                var n, r, i;
                if (void 0 !== t.b && (n = "boolean" == typeof t.b ? t.b : Ea.fromMinifiedJSONObject(t.b)), void 0 !== t.u) for(var o in r = {}, t.u){
                    var s = t.u[o];
                    r[o] = "boolean" == typeof s ? s : Ea.fromMinifiedJSONObject(s);
                }
                if (void 0 !== t.p) for(var a in i = {}, t.p){
                    var c = t.p[a];
                    i[a] = "boolean" == typeof c ? c : Ea.fromMinifiedJSONObject(c);
                }
                return new e({
                    base: n,
                    byUserId: r,
                    byParticipantId: i
                });
            }
        },
        {
            key: "validateJSONObject",
            value: function(e) {
                if ("object" !== n(e)) return [
                    !1,
                    "canReceive must be an object"
                ];
                for(var t = [
                    "base",
                    "byUserId",
                    "byParticipantId"
                ], r = 0, i = Object.keys(e); r < i.length; r++){
                    var o = i[r];
                    if (!t.includes(o)) return [
                        !1,
                        "canReceive can only contain keys (".concat(t.join(", "), ")")
                    ];
                    if ("base" === o) {
                        var s = f(Ea.validateJSONObject(e.base, !0), 2), a = s[0], c = s[1];
                        if (!a) return [
                            !1,
                            c
                        ];
                    } else {
                        if ("object" !== n(e[o])) return [
                            !1,
                            "invalid (non-object) value for field '".concat(o, "' in canReceive")
                        ];
                        for(var l = 0, u = Object.values(e[o]); l < u.length; l++){
                            var d = u[l], p = f(Ea.validateJSONObject(d), 2), h = p[0], v = p[1];
                            if (!h) return [
                                !1,
                                v
                            ];
                        }
                    }
                }
                return [
                    !0
                ];
            }
        }
    ]);
}(), Ea = function() {
    function e() {
        var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = n.video, i = n.audio, o = n.screenVideo, s = n.screenAudio, a = n.customVideo, c = n.customAudio;
        t(this, e), this.video = r, this.audio = i, this.screenVideo = o, this.screenAudio = s, this.customVideo = a, this.customAudio = c;
    }
    return o(e, [
        {
            key: "clone",
            value: function() {
                var t = new e;
                return void 0 !== this.video && (t.video = this.video), void 0 !== this.audio && (t.audio = this.audio), void 0 !== this.screenVideo && (t.screenVideo = this.screenVideo), void 0 !== this.screenAudio && (t.screenAudio = this.screenAudio), void 0 !== this.customVideo && (t.customVideo = ma({}, this.customVideo)), void 0 !== this.customAudio && (t.customAudio = ma({}, this.customAudio)), t;
            }
        },
        {
            key: "toJSONObject",
            value: function() {
                var e = {};
                return void 0 !== this.video && (e.video = this.video), void 0 !== this.audio && (e.audio = this.audio), void 0 !== this.screenVideo && (e.screenVideo = this.screenVideo), void 0 !== this.screenAudio && (e.screenAudio = this.screenAudio), void 0 !== this.customVideo && (e.customVideo = ma({}, this.customVideo)), void 0 !== this.customAudio && (e.customAudio = ma({}, this.customAudio)), e;
            }
        },
        {
            key: "toMinifiedJSONObject",
            value: function() {
                var e = {};
                return void 0 !== this.video && (e.v = this.video), void 0 !== this.audio && (e.a = this.audio), void 0 !== this.screenVideo && (e.sv = this.screenVideo), void 0 !== this.screenAudio && (e.sa = this.screenAudio), void 0 !== this.customVideo && (e.cv = ma({}, this.customVideo)), void 0 !== this.customAudio && (e.ca = ma({}, this.customAudio)), e;
            }
        },
        {
            key: "normalize",
            value: function() {
                function e(e, t) {
                    return e && 1 === Object.keys(e).length && e["*"] === t;
                }
                return !(!0 !== this.video || !0 !== this.audio || !0 !== this.screenVideo || !0 !== this.screenAudio || !e(this.customVideo, !0) || !e(this.customAudio, !0)) || (!1 !== this.video || !1 !== this.audio || !1 !== this.screenVideo || !1 !== this.screenAudio || !e(this.customVideo, !1) || !e(this.customAudio, !1)) && this;
            }
        }
    ], [
        {
            key: "fromBoolean",
            value: function(t) {
                return new e({
                    video: t,
                    audio: t,
                    screenVideo: t,
                    screenAudio: t,
                    customVideo: {
                        "*": t
                    },
                    customAudio: {
                        "*": t
                    }
                });
            }
        },
        {
            key: "fromJSONObject",
            value: function(t) {
                return new e({
                    video: t.video,
                    audio: t.audio,
                    screenVideo: t.screenVideo,
                    screenAudio: t.screenAudio,
                    customVideo: void 0 !== t.customVideo ? ma({}, t.customVideo) : void 0,
                    customAudio: void 0 !== t.customAudio ? ma({}, t.customAudio) : void 0
                });
            }
        },
        {
            key: "fromMinifiedJSONObject",
            value: function(t) {
                return new e({
                    video: t.v,
                    audio: t.a,
                    screenVideo: t.sv,
                    screenAudio: t.sa,
                    customVideo: t.cv,
                    customAudio: t.ca
                });
            }
        },
        {
            key: "validateJSONObject",
            value: function(e, t) {
                if ("boolean" == typeof e) return [
                    !0
                ];
                if ("object" !== n(e)) return [
                    !1,
                    "invalid (non-object, non-boolean) value in canReceive"
                ];
                for(var r = Object.keys(e), i = 0, o = r; i < o.length; i++){
                    var s = o[i];
                    if (!_a.includes(s)) return [
                        !1,
                        "invalid media type '".concat(s, "' in canReceive")
                    ];
                    if (Sa.includes(s)) {
                        if ("boolean" != typeof e[s]) return [
                            !1,
                            "invalid (non-boolean) value for media type '".concat(s, "' in canReceive")
                        ];
                    } else {
                        if ("object" !== n(e[s])) return [
                            !1,
                            "invalid (non-object) value for media type '".concat(s, "' in canReceive")
                        ];
                        for(var a = 0, c = Object.values(e[s]); a < c.length; a++){
                            if ("boolean" != typeof c[a]) return [
                                !1,
                                "invalid (non-boolean) value for entry within '".concat(s, "' in canReceive")
                            ];
                        }
                        if (t && void 0 === e[s]["*"]) return [
                            !1,
                            'canReceive "base" permission must specify "*" as an entry within \''.concat(s, "'")
                        ];
                    }
                }
                return t && r.length !== _a.length ? [
                    !1,
                    'canReceive "base" permission must specify all media types: '.concat(_a.join(", "), " (or be set to a boolean shorthand)")
                ] : [
                    !0
                ];
            }
        }
    ]);
}(), Ta = [
    "result"
], Oa = [
    "preserveIframe"
];
function Pa(e, t) {
    var n = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(e);
        t && (r = r.filter(function(t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), n.push.apply(n, r);
    }
    return n;
}
function Aa(e) {
    for(var t = 1; t < arguments.length; t++){
        var n = null != arguments[t] ? arguments[t] : {};
        t % 2 ? Pa(Object(n), !0).forEach(function(t) {
            u(e, t, n[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : Pa(Object(n)).forEach(function(t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
        });
    }
    return e;
}
function ja() {
    try {
        var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (e) {}
    return (ja = function() {
        return !!e;
    })();
}
function Ia(e, t) {
    var n = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
    if (!n) {
        if (Array.isArray(e) || (n = function(e, t) {
            if (e) {
                if ("string" == typeof e) return xa(e, t);
                var n = ({}).toString.call(e).slice(8, -1);
                return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? xa(e, t) : void 0;
            }
        }(e)) || t && e && "number" == typeof e.length) {
            n && (e = n);
            var r = 0, i = function() {};
            return {
                s: i,
                n: function() {
                    return r >= e.length ? {
                        done: !0
                    } : {
                        done: !1,
                        value: e[r++]
                    };
                },
                e: function(e) {
                    throw e;
                },
                f: i
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o, s = !0, a = !1;
    return {
        s: function() {
            n = n.call(e);
        },
        n: function() {
            var e = n.next();
            return s = e.done, e;
        },
        e: function(e) {
            a = !0, o = e;
        },
        f: function() {
            try {
                s || null == n.return || n.return();
            } finally{
                if (a) throw o;
            }
        }
    };
}
function xa(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for(var n = 0, r = Array(t); n < t; n++)r[n] = e[n];
    return r;
}
var La = {};
var Da = "video", Na = "voice", Ra = is() ? {
    data: {}
} : {
    data: {},
    topology: "none"
}, Fa = {
    present: 0,
    hidden: 0
}, Ba = {
    maxBitrate: {
        min: 1e5,
        max: 25e5
    },
    maxFramerate: {
        min: 1,
        max: 30
    },
    scaleResolutionDownBy: {
        min: 1,
        max: 8
    }
}, Ua = Object.keys(Ba), Va = [
    "state",
    "volume",
    "simulcastEncodings"
], Ja = {
    androidInCallNotification: {
        title: "string",
        subtitle: "string",
        iconName: "string",
        disableForCustomOverride: "boolean"
    },
    disableAutoDeviceManagement: {
        audio: "boolean",
        video: "boolean"
    }
}, $a = {
    id: {
        iconPath: "string",
        iconPathDarkMode: "string",
        label: "string",
        tooltip: "string",
        visualState: "'default' | 'sidebar-open' | 'active'"
    }
}, qa = {
    id: {
        allow: "string",
        controlledBy: "'*' | 'owners' | string[]",
        csp: "string",
        iconURL: "string",
        label: "string",
        loading: "'eager' | 'lazy'",
        location: "'main' | 'sidebar'",
        name: "string",
        referrerPolicy: "string",
        sandbox: "string",
        src: "string",
        srcdoc: "string",
        shared: "string[] | 'owners' | boolean"
    }
}, za = {
    customIntegrations: {
        validate: vc,
        help: hc()
    },
    customTrayButtons: {
        validate: fc,
        help: "customTrayButtons should be a dictionary of the type ".concat(JSON.stringify($a))
    },
    url: {
        validate: function(e) {
            return "string" == typeof e;
        },
        help: "url should be a string"
    },
    baseUrl: {
        validate: function(e) {
            return "string" == typeof e;
        },
        help: "baseUrl should be a string"
    },
    token: {
        validate: function(e) {
            return "string" == typeof e;
        },
        help: "token should be a string",
        queryString: "t"
    },
    dailyConfig: {
        validate: function(e, t) {
            try {
                return t.validateDailyConfig(e), !0;
            } catch (e) {
                console.error("Failed to validate dailyConfig", e);
            }
            return !1;
        },
        help: "Unsupported dailyConfig. Check error logs for detailed info."
    },
    reactNativeConfig: {
        validate: function(e) {
            return gc(e, Ja);
        },
        help: "reactNativeConfig should look like ".concat(JSON.stringify(Ja), ", all fields optional")
    },
    lang: {
        validate: function(e) {
            return [
                "da",
                "de",
                "en-us",
                "en",
                "es",
                "fi",
                "fr",
                "it",
                "jp",
                "ka",
                "nl",
                "no",
                "pl",
                "pt",
                "pt-BR",
                "ru",
                "sv",
                "tr",
                "user"
            ].includes(e);
        },
        help: "language not supported. Options are: da, de, en-us, en, es, fi, fr, it, jp, ka, nl, no, pl, pt, pt-BR, ru, sv, tr, user"
    },
    userName: !0,
    userData: {
        validate: function(e) {
            try {
                return ic(e), !0;
            } catch (e) {
                return console.error(e), !1;
            }
        },
        help: "invalid userData type provided"
    },
    startVideoOff: !0,
    startAudioOff: !0,
    allowLocalVideo: !0,
    allowLocalAudio: !0,
    activeSpeakerMode: !0,
    showLeaveButton: !0,
    showLocalVideo: !0,
    showParticipantsBar: !0,
    showFullscreenButton: !0,
    showUserNameChangeUI: !0,
    iframeStyle: !0,
    customLayout: !0,
    cssFile: !0,
    cssText: !0,
    bodyClass: !0,
    videoSource: {
        validate: function(e, t) {
            if ("boolean" == typeof e) return t._preloadCache.allowLocalVideo = e, !0;
            var n;
            if (e instanceof MediaStreamTrack) t._sharedTracks.videoTrack = e, n = {
                customTrack: Qo
            };
            else {
                if (delete t._sharedTracks.videoTrack, "string" != typeof e) return console.error("videoSource must be a MediaStreamTrack, boolean, or a string"), !1;
                n = {
                    deviceId: e
                };
            }
            return t._updatePreloadCacheInputSettings({
                video: {
                    settings: n
                }
            }, !1), !0;
        }
    },
    audioSource: {
        validate: function(e, t) {
            if ("boolean" == typeof e) return t._preloadCache.allowLocalAudio = e, !0;
            var n;
            if (e instanceof MediaStreamTrack) t._sharedTracks.audioTrack = e, n = {
                customTrack: Qo
            };
            else {
                if (delete t._sharedTracks.audioTrack, "string" != typeof e) return console.error("audioSource must be a MediaStreamTrack, boolean, or a string"), !1;
                n = {
                    deviceId: e
                };
            }
            return t._updatePreloadCacheInputSettings({
                audio: {
                    settings: n
                }
            }, !1), !0;
        }
    },
    subscribeToTracksAutomatically: {
        validate: function(e, t) {
            return t._preloadCache.subscribeToTracksAutomatically = e, !0;
        }
    },
    theme: {
        validate: function(e) {
            var t = [
                "accent",
                "accentText",
                "background",
                "backgroundAccent",
                "baseText",
                "border",
                "mainAreaBg",
                "mainAreaBgAccent",
                "mainAreaText",
                "supportiveText"
            ], r = function(e) {
                for(var n = 0, r = Object.keys(e); n < r.length; n++){
                    var i = r[n];
                    if (!t.includes(i)) return console.error('unsupported color "'.concat(i, '". Valid colors: ').concat(t.join(", "))), !1;
                    if (!e[i].match(/^#[0-9a-f]{6}|#[0-9a-f]{3}$/i)) return console.error("".concat(i, ' theme color should be provided in valid hex color format. Received: "').concat(e[i], '"')), !1;
                }
                return !0;
            };
            return "object" === n(e) && ("light" in e && "dark" in e || "colors" in e) ? "light" in e && "dark" in e ? "colors" in e.light ? "colors" in e.dark ? r(e.light.colors) && r(e.dark.colors) : (console.error('Dark theme is missing "colors" property.', e), !1) : (console.error('Light theme is missing "colors" property.', e), !1) : r(e.colors) : (console.error('Theme must contain either both "light" and "dark" properties, or "colors".', e), !1);
        },
        help: "unsupported theme configuration. Check error logs for detailed info."
    },
    layoutConfig: {
        validate: function(e) {
            if ("grid" in e) {
                var t = e.grid;
                if ("maxTilesPerPage" in t) {
                    if (!Number.isInteger(t.maxTilesPerPage)) return console.error("grid.maxTilesPerPage should be an integer. You passed ".concat(t.maxTilesPerPage, ".")), !1;
                    if (t.maxTilesPerPage > 49) return console.error("grid.maxTilesPerPage can't be larger than 49 without sacrificing browser performance. Please contact us at https://www.daily.co/contact to talk about your use case."), !1;
                }
                if ("minTilesPerPage" in t) {
                    if (!Number.isInteger(t.minTilesPerPage)) return console.error("grid.minTilesPerPage should be an integer. You passed ".concat(t.minTilesPerPage, ".")), !1;
                    if (t.minTilesPerPage < 1) return console.error("grid.minTilesPerPage can't be lower than 1."), !1;
                    if ("maxTilesPerPage" in t && t.minTilesPerPage > t.maxTilesPerPage) return console.error("grid.minTilesPerPage can't be higher than grid.maxTilesPerPage."), !1;
                }
            }
            return !0;
        },
        help: "unsupported layoutConfig. Check error logs for detailed info."
    },
    receiveSettings: {
        validate: function(e) {
            return oc(e, {
                allowAllParticipantsKey: !1
            });
        },
        help: pc({
            allowAllParticipantsKey: !1
        })
    },
    sendSettings: {
        validate: function(e, t) {
            return !!function(e, t) {
                try {
                    return t.validateUpdateSendSettings(e), !0;
                } catch (e) {
                    return console.error("Failed to validate send settings", e), !1;
                }
            }(e, t) && (t._preloadCache.sendSettings = e, !0);
        },
        help: "Invalid sendSettings provided. Check error logs for detailed info."
    },
    inputSettings: {
        validate: function(e, t) {
            var n;
            return !!sc(e) && (t._inputSettings || (t._inputSettings = {}), ac(e, null === (n = t.properties) || void 0 === n ? void 0 : n.dailyConfig, t._sharedTracks), t._updatePreloadCacheInputSettings(e, !0), !0);
        },
        help: dc()
    },
    layout: {
        validate: function(e) {
            return "custom-v1" === e || "browser" === e || "none" === e;
        },
        help: 'layout may only be set to "custom-v1"',
        queryString: "layout"
    },
    emb: {
        queryString: "emb"
    },
    embHref: {
        queryString: "embHref"
    },
    dailyJsVersion: {
        queryString: "dailyJsVersion"
    },
    proxy: {
        queryString: "proxy"
    },
    strictMode: !0,
    allowMultipleCallInstances: !0
}, Wa = {
    styles: {
        validate: function(e) {
            for(var t in e)if ("cam" !== t && "screen" !== t) return !1;
            if (e.cam) {
                for(var n in e.cam)if ("div" !== n && "video" !== n) return !1;
            }
            if (e.screen) {
                for(var r in e.screen)if ("div" !== r && "video" !== r) return !1;
            }
            return !0;
        },
        help: "styles format should be a subset of: { cam: {div: {}, video: {}}, screen: {div: {}, video: {}} }"
    },
    setSubscribedTracks: {
        validate: function(e, t) {
            if (t._preloadCache.subscribeToTracksAutomatically) return !1;
            var n = [
                !0,
                !1,
                "staged"
            ];
            if (n.includes(e) || !is() && "avatar" === e) return !0;
            var r = [
                "audio",
                "video",
                "screenAudio",
                "screenVideo",
                "rmpAudio",
                "rmpVideo"
            ], i = function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                for(var o in e)if ("custom" === o) {
                    if (!n.includes(e[o]) && !i(e[o], !0)) return !1;
                } else {
                    var s = !t && !r.includes(o), a = !n.includes(e[o]);
                    if (s || a) return !1;
                }
                return !0;
            };
            return i(e);
        },
        help: "setSubscribedTracks cannot be used when setSubscribeToTracksAutomatically is enabled, and should be of the form: " + "true".concat(is() ? "" : " | 'avatar'", " | false | 'staged' | { [audio: true|false|'staged'], [video: true|false|'staged'], [screenAudio: true|false|'staged'], [screenVideo: true|false|'staged'] }")
    },
    setAudio: !0,
    setVideo: !0,
    setScreenShare: {
        validate: function(e) {
            return !1 === e;
        },
        help: "setScreenShare must be false, as it's only meant for stopping remote participants' screen shares"
    },
    eject: !0,
    updatePermissions: {
        validate: function(e) {
            for(var t = 0, n = Object.entries(e); t < n.length; t++){
                var r = f(n[t], 2), i = r[0], o = r[1];
                switch(i){
                    case "hasPresence":
                        if ("boolean" != typeof o) return !1;
                        break;
                    case "canSend":
                        if (o instanceof Set || o instanceof Array || Array.isArray(o)) {
                            var s, a = [
                                "video",
                                "audio",
                                "screenVideo",
                                "screenAudio",
                                "customVideo",
                                "customAudio"
                            ], c = Ia(o);
                            try {
                                for(c.s(); !(s = c.n()).done;){
                                    var l = s.value;
                                    if (!a.includes(l)) return !1;
                                }
                            } catch (e) {
                                c.e(e);
                            } finally{
                                c.f();
                            }
                        } else if ("boolean" != typeof o) return !1;
                        (o instanceof Array || Array.isArray(o)) && (e.canSend = new Set(o));
                        break;
                    case "canReceive":
                        var u = f(Ca.validateJSONObject(o), 2), d = u[0], p = u[1];
                        if (!d) return console.error(p), !1;
                        break;
                    case "canAdmin":
                        if (o instanceof Set || o instanceof Array || Array.isArray(o)) {
                            var h, v = [
                                "participants",
                                "streaming",
                                "transcription"
                            ], g = Ia(o);
                            try {
                                for(g.s(); !(h = g.n()).done;){
                                    var m = h.value;
                                    if (!v.includes(m)) return !1;
                                }
                            } catch (e) {
                                g.e(e);
                            } finally{
                                g.f();
                            }
                        } else if ("boolean" != typeof o) return !1;
                        (o instanceof Array || Array.isArray(o)) && (e.canAdmin = new Set(o));
                        break;
                    default:
                        return !1;
                }
            }
            return !0;
        },
        help: "updatePermissions can take hasPresence, canSend, canReceive, and canAdmin permissions. hasPresence must be a boolean. canSend can be a boolean or an Array or Set of media types (video, audio, screenVideo, screenAudio, customVideo, customAudio). canReceive must be an object specifying base, byUserId, and/or byParticipantId fields (see documentation for more details). canAdmin can be a boolean or an Array or Set of admin types (participants, streaming, transcription)."
    }
};
Promise.any || (Promise.any = function() {
    var e = p(function*(e) {
        return new Promise(function(t, n) {
            var r = [];
            e.forEach(function(i) {
                return Promise.resolve(i).then(function(e) {
                    t(e);
                }).catch(function(t) {
                    r.push(t), r.length === e.length && n(r);
                });
            });
        });
    });
    return function(t) {
        return e.apply(this, arguments);
    };
}());
var Ha = function() {
    function r(e) {
        var n, i, o, c, l, d, h = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        if (t(this, r), o = this, c = a(c = r), u(i = s(o, ja() ? Reflect.construct(c, l || [], a(o).constructor) : c.apply(o, l)), "startListeningForDeviceChanges", function() {
            da(i.handleDeviceChange);
        }), u(i, "stopListeningForDeviceChanges", function() {
            pa(i.handleDeviceChange);
        }), u(i, "handleDeviceChange", function(e) {
            e = e.map(function(e) {
                return JSON.parse(JSON.stringify(e));
            }), i.emitDailyJSEvent({
                action: "available-devices-updated",
                availableDevices: e
            });
        }), u(i, "handleNativeAppStateChange", function() {
            var e = p(function*(e) {
                if ("destroyed" === e) return console.warn("App has been destroyed before leaving the meeting. Cleaning up all the resources!"), void (yield i.destroy());
                var t = "active" === e;
                i.disableReactNativeAutoDeviceManagement("video") || (t ? i.camUnmutedBeforeLosingNativeActiveState && i.setLocalVideo(!0) : (i.camUnmutedBeforeLosingNativeActiveState = i.localVideo(), i.camUnmutedBeforeLosingNativeActiveState && i.setLocalVideo(!1)));
            });
            return function(t) {
                return e.apply(this, arguments);
            };
        }()), u(i, "handleNativeAudioFocusChange", function(e) {
            i.disableReactNativeAutoDeviceManagement("audio") || (i._hasNativeAudioFocus = e, i.toggleParticipantAudioBasedOnNativeAudioFocus(), i._hasNativeAudioFocus ? i.micUnmutedBeforeLosingNativeAudioFocus && i.setLocalAudio(!0) : (i.micUnmutedBeforeLosingNativeAudioFocus = i.localAudio(), i.setLocalAudio(!1)));
        }), u(i, "handleNativeSystemScreenCaptureStop", function() {
            i.stopScreenShare();
        }), i.strictMode = void 0 === h.strictMode || h.strictMode, i.allowMultipleCallInstances = null !== (n = h.allowMultipleCallInstances) && void 0 !== n && n, Object.keys(La).length && (i._logDuplicateInstanceAttempt(), !i.allowMultipleCallInstances)) {
            if (i.strictMode) throw new Error("Duplicate DailyIframe instances are not allowed");
            console.warn("Using strictMode: false to allow multiple call instances is now deprecated. Set `allowMultipleCallInstances: true`");
        }
        if (window._daily || (window._daily = {
            pendings: [],
            instances: {}
        }), i.callClientId = N(), La[(d = i).callClientId] = d, window._daily.instances[i.callClientId] = {}, i._sharedTracks = {}, window._daily.instances[i.callClientId].tracks = i._sharedTracks, h.dailyJsVersion = r.version(), i._iframe = e, i._callObjectMode = "none" === h.layout && !i._iframe, i._preloadCache = {
            subscribeToTracksAutomatically: !0,
            outputDeviceId: null,
            inputSettings: null,
            sendSettings: null,
            videoTrackForNetworkConnectivityTest: null,
            videoTrackForConnectionQualityTest: null
        }, void 0 !== h.showLocalVideo ? i._callObjectMode ? console.error("showLocalVideo is not available in call object mode") : i._showLocalVideo = !!h.showLocalVideo : i._showLocalVideo = !0, void 0 !== h.showParticipantsBar ? i._callObjectMode ? console.error("showParticipantsBar is not available in call object mode") : i._showParticipantsBar = !!h.showParticipantsBar : i._showParticipantsBar = !0, void 0 !== h.customIntegrations ? i._callObjectMode ? console.error("customIntegrations is not available in call object mode") : i._customIntegrations = h.customIntegrations : i._customIntegrations = {}, void 0 !== h.customTrayButtons ? i._callObjectMode ? console.error("customTrayButtons is not available in call object mode") : i._customTrayButtons = h.customTrayButtons : i._customTrayButtons = {}, void 0 !== h.activeSpeakerMode ? i._callObjectMode ? console.error("activeSpeakerMode is not available in call object mode") : i._activeSpeakerMode = !!h.activeSpeakerMode : i._activeSpeakerMode = !1, h.receiveSettings ? i._callObjectMode ? i._receiveSettings = h.receiveSettings : console.error("receiveSettings is only available in call object mode") : i._receiveSettings = {}, i.validateProperties(h), i.properties = Aa({}, h), i._inputSettings || (i._inputSettings = {}), i._callObjectLoader = i._callObjectMode ? new Us(i.callClientId) : null, i._callState = ti, i._isPreparingToJoin = !1, i._accessState = {
            access: fi
        }, i._meetingSessionSummary = {}, i._finalSummaryOfPrevSession = {}, i._meetingSessionState = _c(Ra, i._callObjectMode), i._nativeInCallAudioMode = Da, i._participants = {}, i._isScreenSharing = !1, i._participantCounts = Fa, i._rmpPlayerState = {}, i._waitingParticipants = {}, i._network = {
            threshold: "good",
            quality: 100,
            networkState: "unknown",
            stats: {}
        }, i._activeSpeaker = {}, i._localAudioLevel = 0, i._isLocalAudioLevelObserverRunning = !1, i._remoteParticipantsAudioLevel = {}, i._isRemoteParticipantsAudioLevelObserverRunning = !1, i._maxAppMessageSize = $o, i._messageChannel = is() ? new js : new Os, i._iframe && (i._iframe.requestFullscreen ? i._iframe.addEventListener("fullscreenchange", function() {
            document.fullscreenElement === i._iframe ? (i.emitDailyJSEvent({
                action: Io
            }), i.sendMessageToCallMachine({
                action: Io
            })) : (i.emitDailyJSEvent({
                action: xo
            }), i.sendMessageToCallMachine({
                action: xo
            }));
        }) : i._iframe.webkitRequestFullscreen && i._iframe.addEventListener("webkitfullscreenchange", function() {
            document.webkitFullscreenElement === i._iframe ? (i.emitDailyJSEvent({
                action: Io
            }), i.sendMessageToCallMachine({
                action: Io
            })) : (i.emitDailyJSEvent({
                action: xo
            }), i.sendMessageToCallMachine({
                action: xo
            }));
        })), is()) {
            var f = i.nativeUtils();
            f.addAudioFocusChangeListener && f.removeAudioFocusChangeListener && f.addAppStateChangeListener && f.removeAppStateChangeListener && f.addSystemScreenCaptureStopListener && f.removeSystemScreenCaptureStopListener || console.warn("expected (add|remove)(AudioFocusChange|AppActiveStateChange|SystemScreenCaptureStop)Listener to be available in React Native"), i._hasNativeAudioFocus = !0, f.addAudioFocusChangeListener(i.handleNativeAudioFocusChange), f.addAppStateChangeListener(i.handleNativeAppStateChange), f.addSystemScreenCaptureStopListener(i.handleNativeSystemScreenCaptureStop);
        }
        return i._callObjectMode && i.startListeningForDeviceChanges(), i._messageChannel.addListenerForMessagesFromCallMachine(i.handleMessageFromCallMachine, i.callClientId, i), i;
    }
    return l(r, b), o(r, [
        {
            key: "destroy",
            value: (ee = p(function*() {
                var e;
                try {
                    yield this.leave();
                } catch (e) {}
                var t = this._iframe;
                if (t) {
                    var n = t.parentElement;
                    n && n.removeChild(t);
                }
                if (this._messageChannel.removeListener(this.handleMessageFromCallMachine), is()) {
                    var r = this.nativeUtils();
                    r.removeAudioFocusChangeListener(this.handleNativeAudioFocusChange), r.removeAppStateChangeListener(this.handleNativeAppStateChange), r.removeSystemScreenCaptureStopListener(this.handleNativeSystemScreenCaptureStop);
                }
                this._callObjectMode && this.stopListeningForDeviceChanges(), this.resetMeetingDependentVars(), this._destroyed = !0, this.emitDailyJSEvent({
                    action: "call-instance-destroyed"
                }), delete La[this.callClientId], (null === (e = window) || void 0 === e || null === (e = e._daily) || void 0 === e ? void 0 : e.instances) && delete window._daily.instances[this.callClientId], this.strictMode && (this.callClientId = void 0);
            }), function() {
                return ee.apply(this, arguments);
            })
        },
        {
            key: "isDestroyed",
            value: function() {
                return !!this._destroyed;
            }
        },
        {
            key: "loadCss",
            value: function(e) {
                var t = e.bodyClass, n = e.cssFile, r = e.cssText;
                return nc(), this.sendMessageToCallMachine({
                    action: "load-css",
                    cssFile: this.absoluteUrl(n),
                    bodyClass: t,
                    cssText: r
                }), this;
            }
        },
        {
            key: "iframe",
            value: function() {
                return nc(), this._iframe;
            }
        },
        {
            key: "meetingState",
            value: function() {
                return this._callState;
            }
        },
        {
            key: "accessState",
            value: function() {
                return ec(this._callObjectMode, "accessState()"), this._accessState;
            }
        },
        {
            key: "participants",
            value: function() {
                return this._participants;
            }
        },
        {
            key: "participantCounts",
            value: function() {
                return this._participantCounts;
            }
        },
        {
            key: "waitingParticipants",
            value: function() {
                return ec(this._callObjectMode, "waitingParticipants()"), this._waitingParticipants;
            }
        },
        {
            key: "validateParticipantProperties",
            value: function(e, t) {
                for(var n in t){
                    if (!Wa[n]) throw new Error("unrecognized updateParticipant property ".concat(n));
                    if (Wa[n].validate && !Wa[n].validate(t[n], this, this._participants[e])) throw new Error(Wa[n].help);
                }
            }
        },
        {
            key: "updateParticipant",
            value: function(e, t) {
                return this._participants.local && this._participants.local.session_id === e && (e = "local"), e && t && (this.validateParticipantProperties(e, t), this.sendMessageToCallMachine({
                    action: "update-participant",
                    id: e,
                    properties: t
                })), this;
            }
        },
        {
            key: "updateParticipants",
            value: function(e) {
                var t = this._participants.local && this._participants.local.session_id;
                for(var n in e)n === t && (n = "local"), n && e[n] && this.validateParticipantProperties(n, e[n]);
                return this.sendMessageToCallMachine({
                    action: "update-participants",
                    participants: e
                }), this;
            }
        },
        {
            key: "updateWaitingParticipant",
            value: (Z = p(function*() {
                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                if (ec(this._callObjectMode, "updateWaitingParticipant()"), Qa(this._callState, "updateWaitingParticipant()"), "string" != typeof t || "object" !== n(r)) throw new Error("updateWaitingParticipant() must take an id string and a updates object");
                return new Promise(function(n, i) {
                    e.sendMessageToCallMachine({
                        action: "daily-method-update-waiting-participant",
                        id: t,
                        updates: r
                    }, function(e) {
                        e.error && i(e.error), e.id || i(new Error("unknown error in updateWaitingParticipant()")), n({
                            id: e.id
                        });
                    });
                });
            }), function() {
                return Z.apply(this, arguments);
            })
        },
        {
            key: "updateWaitingParticipants",
            value: (X = p(function*() {
                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                if (ec(this._callObjectMode, "updateWaitingParticipants()"), Qa(this._callState, "updateWaitingParticipants()"), "object" !== n(t)) throw new Error("updateWaitingParticipants() must take a mapping between ids and update objects");
                return new Promise(function(n, r) {
                    e.sendMessageToCallMachine({
                        action: "daily-method-update-waiting-participants",
                        updatesById: t
                    }, function(e) {
                        e.error && r(e.error), e.ids || r(new Error("unknown error in updateWaitingParticipants()")), n({
                            ids: e.ids
                        });
                    });
                });
            }), function() {
                return X.apply(this, arguments);
            })
        },
        {
            key: "requestAccess",
            value: (Y = p(function*() {
                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = t.access, r = void 0 === n ? {
                    level: vi
                } : n, i = t.name, o = void 0 === i ? "" : i;
                return ec(this._callObjectMode, "requestAccess()"), Qa(this._callState, "requestAccess()"), new Promise(function(t, n) {
                    e.sendMessageToCallMachine({
                        action: "daily-method-request-access",
                        access: r,
                        name: o
                    }, function(e) {
                        e.error && n(e.error), e.access || n(new Error("unknown error in requestAccess()")), t({
                            access: e.access,
                            granted: e.granted
                        });
                    });
                });
            }), function() {
                return Y.apply(this, arguments);
            })
        },
        {
            key: "localAudio",
            value: function() {
                return this._participants.local ? ![
                    "blocked",
                    "off"
                ].includes(this._participants.local.tracks.audio.state) : null;
            }
        },
        {
            key: "localVideo",
            value: function() {
                return this._participants.local ? ![
                    "blocked",
                    "off"
                ].includes(this._participants.local.tracks.video.state) : null;
            }
        },
        {
            key: "setLocalAudio",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                return "forceDiscardTrack" in t && (is() ? (console.warn("forceDiscardTrack option not supported in React Native; ignoring"), t = {}) : e && (console.warn("forceDiscardTrack option only supported when calling setLocalAudio(false); ignoring"), t = {})), this.sendMessageToCallMachine({
                    action: "local-audio",
                    state: e,
                    options: t
                }), this;
            }
        },
        {
            key: "localScreenAudio",
            value: function() {
                return this._participants.local ? ![
                    "blocked",
                    "off"
                ].includes(this._participants.local.tracks.screenAudio.state) : null;
            }
        },
        {
            key: "localScreenVideo",
            value: function() {
                return this._participants.local ? ![
                    "blocked",
                    "off"
                ].includes(this._participants.local.tracks.screenVideo.state) : null;
            }
        },
        {
            key: "updateScreenShare",
            value: function(e) {
                if (this._isScreenSharing) return this.sendMessageToCallMachine({
                    action: "local-screen-update",
                    options: e
                }), this;
                console.warn("There is no screen share in progress. Try calling startScreenShare first.");
            }
        },
        {
            key: "setLocalVideo",
            value: function(e) {
                return this.sendMessageToCallMachine({
                    action: "local-video",
                    state: e
                }), this;
            }
        },
        {
            key: "_setAllowLocalAudio",
            value: function(e) {
                if (this._preloadCache.allowLocalAudio = e, this._callMachineInitialized) return this.sendMessageToCallMachine({
                    action: "set-allow-local-audio",
                    state: e
                }), this;
            }
        },
        {
            key: "_setAllowLocalVideo",
            value: function(e) {
                if (this._preloadCache.allowLocalVideo = e, this._callMachineInitialized) return this.sendMessageToCallMachine({
                    action: "set-allow-local-video",
                    state: e
                }), this;
            }
        },
        {
            key: "getReceiveSettings",
            value: (K = p(function*(e) {
                var t = this, r = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).showInheritedValues, i = void 0 !== r && r;
                if (ec(this._callObjectMode, "getReceiveSettings()"), !this._callMachineInitialized) return this._receiveSettings;
                switch(n(e)){
                    case "string":
                        return new Promise(function(n) {
                            t.sendMessageToCallMachine({
                                action: "get-single-participant-receive-settings",
                                id: e,
                                showInheritedValues: i
                            }, function(e) {
                                n(e.receiveSettings);
                            });
                        });
                    case "undefined":
                        return this._receiveSettings;
                    default:
                        throw new Error('first argument to getReceiveSettings() must be a participant id (or "base"), or there should be no arguments');
                }
            }), function(e) {
                return K.apply(this, arguments);
            })
        },
        {
            key: "updateReceiveSettings",
            value: (Q = p(function*(e) {
                var t = this;
                if (ec(this._callObjectMode, "updateReceiveSettings()"), !oc(e, {
                    allowAllParticipantsKey: !0
                })) throw new Error(pc({
                    allowAllParticipantsKey: !0
                }));
                return Qa(this._callState, "updateReceiveSettings()", "To specify receive settings earlier, use the receiveSettings config property."), new Promise(function(n) {
                    t.sendMessageToCallMachine({
                        action: "update-receive-settings",
                        receiveSettings: e
                    }, function(e) {
                        n({
                            receiveSettings: e.receiveSettings
                        });
                    });
                });
            }), function(e) {
                return Q.apply(this, arguments);
            })
        },
        {
            key: "_prepInputSettingsForSharing",
            value: function(e, t) {
                if (e) {
                    var n = {};
                    if (e.audio) {
                        var r, i, o;
                        e.audio.settings && (!Object.keys(e.audio.settings).length && t || (n.audio = {
                            settings: Aa({}, e.audio.settings)
                        })), t && null !== (r = n.audio) && void 0 !== r && null !== (r = r.settings) && void 0 !== r && r.customTrack && (n.audio.settings = {
                            customTrack: this._sharedTracks.audioTrack
                        });
                        var s = "none" === (null === (i = e.audio.processor) || void 0 === i ? void 0 : i.type) && (null === (o = e.audio.processor) || void 0 === o ? void 0 : o._isDefaultWhenNone);
                        if (e.audio.processor && !s) {
                            var a = Aa({}, e.audio.processor);
                            delete a._isDefaultWhenNone, n.audio = Aa(Aa({}, n.audio), {}, {
                                processor: a
                            });
                        }
                    }
                    if (e.video) {
                        var c, l, u;
                        e.video.settings && (!Object.keys(e.video.settings).length && t || (n.video = {
                            settings: Aa({}, e.video.settings)
                        })), t && null !== (c = n.video) && void 0 !== c && null !== (c = c.settings) && void 0 !== c && c.customTrack && (n.video.settings = {
                            customTrack: this._sharedTracks.videoTrack
                        });
                        var d = "none" === (null === (l = e.video.processor) || void 0 === l ? void 0 : l.type) && (null === (u = e.video.processor) || void 0 === u ? void 0 : u._isDefaultWhenNone);
                        if (e.video.processor && !d) {
                            var p = Aa({}, e.video.processor);
                            delete p._isDefaultWhenNone, n.video = Aa(Aa({}, n.video), {}, {
                                processor: p
                            });
                        }
                    }
                    return n;
                }
            }
        },
        {
            key: "getInputSettings",
            value: function() {
                var e = this;
                return nc(), new Promise(function(t) {
                    t(e._getInputSettings());
                });
            }
        },
        {
            key: "_getInputSettings",
            value: function() {
                var e, t, n, r, i, o, s = {
                    processor: {
                        type: "none",
                        _isDefaultWhenNone: !0
                    }
                };
                this._inputSettings ? (e = (null === (n = this._inputSettings) || void 0 === n ? void 0 : n.video) || s, t = (null === (r = this._inputSettings) || void 0 === r ? void 0 : r.audio) || s) : (e = (null === (i = this._preloadCache) || void 0 === i || null === (i = i.inputSettings) || void 0 === i ? void 0 : i.video) || s, t = (null === (o = this._preloadCache) || void 0 === o || null === (o = o.inputSettings) || void 0 === o ? void 0 : o.audio) || s);
                var a = {
                    audio: t,
                    video: e
                };
                return this._prepInputSettingsForSharing(a, !0);
            }
        },
        {
            key: "_updatePreloadCacheInputSettings",
            value: function(e, t) {
                var n = this._inputSettings || {}, r = {};
                if (e.video) {
                    var i, o, s;
                    if (r.video = {}, e.video.settings) r.video.settings = {}, t || e.video.settings.customTrack || null === (s = n.video) || void 0 === s || !s.settings ? r.video.settings = e.video.settings : r.video.settings = Aa(Aa({}, n.video.settings), e.video.settings), Object.keys(r.video.settings).length || delete r.video.settings;
                    else null !== (i = n.video) && void 0 !== i && i.settings && (r.video.settings = n.video.settings);
                    e.video.processor ? r.video.processor = e.video.processor : null !== (o = n.video) && void 0 !== o && o.processor && (r.video.processor = n.video.processor);
                } else n.video && (r.video = n.video);
                if (e.audio) {
                    var a, c, l;
                    if (r.audio = {}, e.audio.settings) r.audio.settings = {}, t || e.audio.settings.customTrack || null === (l = n.audio) || void 0 === l || !l.settings ? r.audio.settings = e.audio.settings : r.audio.settings = Aa(Aa({}, n.audio.settings), e.audio.settings), Object.keys(r.audio.settings).length || delete r.audio.settings;
                    else null !== (a = n.audio) && void 0 !== a && a.settings && (r.audio.settings = n.audio.settings);
                    e.audio.processor ? r.audio.processor = e.audio.processor : null !== (c = n.audio) && void 0 !== c && c.processor && (r.audio.processor = n.audio.processor);
                } else n.audio && (r.audio = n.audio);
                this._maybeUpdateInputSettings(r);
            }
        },
        {
            key: "_devicesFromInputSettings",
            value: function(e) {
                var t, n, r = (null == e || null === (t = e.video) || void 0 === t || null === (t = t.settings) || void 0 === t ? void 0 : t.deviceId) || null, i = (null == e || null === (n = e.audio) || void 0 === n || null === (n = n.settings) || void 0 === n ? void 0 : n.deviceId) || null, o = this._preloadCache.outputDeviceId || null;
                return {
                    camera: r ? {
                        deviceId: r
                    } : {},
                    mic: i ? {
                        deviceId: i
                    } : {},
                    speaker: o ? {
                        deviceId: o
                    } : {}
                };
            }
        },
        {
            key: "updateInputSettings",
            value: (G = p(function*(e) {
                var t = this;
                return nc(), sc(e) ? e.video || e.audio ? (ac(e, this.properties.dailyConfig, this._sharedTracks), this._callObjectMode && !this._callMachineInitialized ? (this._updatePreloadCacheInputSettings(e, !0), this._getInputSettings()) : new Promise(function(n, r) {
                    t.sendMessageToCallMachine({
                        action: "update-input-settings",
                        inputSettings: e
                    }, function(i) {
                        if (i.error) r(i.error);
                        else {
                            if (i.returnPreloadCache) return t._updatePreloadCacheInputSettings(e, !0), void n(t._getInputSettings());
                            t._maybeUpdateInputSettings(i.inputSettings), n(t._prepInputSettingsForSharing(i.inputSettings, !0));
                        }
                    });
                })) : this._getInputSettings() : (console.error(dc()), Promise.reject(dc()));
            }), function(e) {
                return G.apply(this, arguments);
            })
        },
        {
            key: "setBandwidth",
            value: function(e) {
                var t = e.kbs, n = e.trackConstraints;
                if (nc(), this._callMachineInitialized) return this.sendMessageToCallMachine({
                    action: "set-bandwidth",
                    kbs: t,
                    trackConstraints: n
                }), this;
            }
        },
        {
            key: "getDailyLang",
            value: function() {
                var e = this;
                if (nc(), this._callMachineInitialized) return new Promise(function(t) {
                    e.sendMessageToCallMachine({
                        action: "get-daily-lang"
                    }, function(e) {
                        delete e.action, delete e.callbackStamp, t(e);
                    });
                });
            }
        },
        {
            key: "setDailyLang",
            value: function(e) {
                return nc(), this.sendMessageToCallMachine({
                    action: "set-daily-lang",
                    lang: e
                }), this;
            }
        },
        {
            key: "setProxyUrl",
            value: function(e) {
                return this.sendMessageToCallMachine({
                    action: "set-proxy-url",
                    proxyUrl: e
                }), this;
            }
        },
        {
            key: "setIceConfig",
            value: function(e) {
                return this.sendMessageToCallMachine({
                    action: "set-ice-config",
                    iceConfig: e
                }), this;
            }
        },
        {
            key: "meetingSessionSummary",
            value: function() {
                return [
                    si,
                    ai
                ].includes(this._callState) ? this._finalSummaryOfPrevSession : this._meetingSessionSummary;
            }
        },
        {
            key: "getMeetingSession",
            value: (H = p(function*() {
                var e = this;
                return console.warn("getMeetingSession() is deprecated: use meetingSessionSummary(), which will return immediately"), Qa(this._callState, "getMeetingSession()"), new Promise(function(t) {
                    e.sendMessageToCallMachine({
                        action: "get-meeting-session"
                    }, function(e) {
                        delete e.action, delete e.callbackStamp, t(e);
                    });
                });
            }), function() {
                return H.apply(this, arguments);
            })
        },
        {
            key: "meetingSessionState",
            value: function() {
                return Qa(this._callState, "meetingSessionState"), this._meetingSessionState;
            }
        },
        {
            key: "setMeetingSessionData",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "replace";
                ec(this._callObjectMode, "setMeetingSessionData()"), Qa(this._callState, "setMeetingSessionData");
                try {
                    !function(e, t) {
                        new Ds({
                            data: e,
                            mergeStrategy: t
                        });
                    }(e, t);
                } catch (e) {
                    throw console.error(e), e;
                }
                try {
                    this.sendMessageToCallMachine({
                        action: "set-session-data",
                        data: e,
                        mergeStrategy: t
                    });
                } catch (e) {
                    throw new Error("Error setting meeting session data: ".concat(e));
                }
            }
        },
        {
            key: "setUserName",
            value: function(e, t) {
                var n = this;
                return this.properties.userName = e, new Promise(function(r) {
                    n.sendMessageToCallMachine({
                        action: "set-user-name",
                        name: null != e ? e : "",
                        thisMeetingOnly: is() || !!t && !!t.thisMeetingOnly
                    }, function(e) {
                        delete e.action, delete e.callbackStamp, r(e);
                    });
                });
            }
        },
        {
            key: "setUserData",
            value: (W = p(function*(e) {
                var t = this;
                try {
                    ic(e);
                } catch (e) {
                    throw console.error(e), e;
                }
                if (this.properties.userData = e, this._callMachineInitialized) return new Promise(function(n) {
                    try {
                        t.sendMessageToCallMachine({
                            action: "set-user-data",
                            userData: e
                        }, function(e) {
                            delete e.action, delete e.callbackStamp, n(e);
                        });
                    } catch (e) {
                        throw new Error("Error setting user data: ".concat(e));
                    }
                });
            }), function(e) {
                return W.apply(this, arguments);
            })
        },
        {
            key: "validateAudioLevelInterval",
            value: function(e) {
                if (e && (e < 100 || "number" != typeof e)) throw new Error("The interval must be a number greater than or equal to 100 milliseconds.");
            }
        },
        {
            key: "startLocalAudioLevelObserver",
            value: function(e) {
                var t = this;
                if ("undefined" == typeof AudioWorkletNode && !is()) throw new Error("startLocalAudioLevelObserver() is not supported on this browser");
                if (this.validateAudioLevelInterval(e), this._callMachineInitialized) return this._isLocalAudioLevelObserverRunning = !0, new Promise(function(n, r) {
                    t.sendMessageToCallMachine({
                        action: "start-local-audio-level-observer",
                        interval: e
                    }, function(e) {
                        t._isLocalAudioLevelObserverRunning = !e.error, e.error ? r({
                            error: e.error
                        }) : n();
                    });
                });
                this._preloadCache.localAudioLevelObserver = {
                    enabled: !0,
                    interval: e
                };
            }
        },
        {
            key: "isLocalAudioLevelObserverRunning",
            value: function() {
                return this._isLocalAudioLevelObserverRunning;
            }
        },
        {
            key: "stopLocalAudioLevelObserver",
            value: function() {
                this._preloadCache.localAudioLevelObserver = null, this._localAudioLevel = 0, this._isLocalAudioLevelObserverRunning = !1, this.sendMessageToCallMachine({
                    action: "stop-local-audio-level-observer"
                });
            }
        },
        {
            key: "startRemoteParticipantsAudioLevelObserver",
            value: function(e) {
                var t = this;
                if (this.validateAudioLevelInterval(e), this._callMachineInitialized) return this._isRemoteParticipantsAudioLevelObserverRunning = !0, new Promise(function(n, r) {
                    t.sendMessageToCallMachine({
                        action: "start-remote-participants-audio-level-observer",
                        interval: e
                    }, function(e) {
                        t._isRemoteParticipantsAudioLevelObserverRunning = !e.error, e.error ? r({
                            error: e.error
                        }) : n();
                    });
                });
                this._preloadCache.remoteParticipantsAudioLevelObserver = {
                    enabled: !0,
                    interval: e
                };
            }
        },
        {
            key: "isRemoteParticipantsAudioLevelObserverRunning",
            value: function() {
                return this._isRemoteParticipantsAudioLevelObserverRunning;
            }
        },
        {
            key: "stopRemoteParticipantsAudioLevelObserver",
            value: function() {
                this._preloadCache.remoteParticipantsAudioLevelObserver = null, this._remoteParticipantsAudioLevel = {}, this._isRemoteParticipantsAudioLevelObserverRunning = !1, this.sendMessageToCallMachine({
                    action: "stop-remote-participants-audio-level-observer"
                });
            }
        },
        {
            key: "startCamera",
            value: (z = p(function*() {
                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                if (ec(this._callObjectMode, "startCamera()"), Ya(this._callState, this._isPreparingToJoin, "startCamera()", "Did you mean to use setLocalAudio() and/or setLocalVideo() instead?"), this.needsLoad()) try {
                    yield this.load(t);
                } catch (e) {
                    return Promise.reject(e);
                }
                else {
                    if (this._didPreAuth) {
                        if (t.url && t.url !== this.properties.url) return console.error("url in startCamera() is different than the one used in preAuth()"), Promise.reject();
                        if (t.token && t.token !== this.properties.token) return console.error("token in startCamera() is different than the one used in preAuth()"), Promise.reject();
                    }
                    this.validateProperties(t), this.properties = Aa(Aa({}, this.properties), t);
                }
                return new Promise(function(t) {
                    e._preloadCache.inputSettings = e._prepInputSettingsForSharing(e._inputSettings, !1), e.sendMessageToCallMachine({
                        action: "start-camera",
                        properties: Ga(e.properties, e.callClientId),
                        preloadCache: Ga(e._preloadCache, e.callClientId)
                    }, function(e) {
                        t({
                            camera: e.camera,
                            mic: e.mic,
                            speaker: e.speaker
                        });
                    });
                });
            }), function() {
                return z.apply(this, arguments);
            })
        },
        {
            key: "validateCustomTrack",
            value: function(e, t, n) {
                if (n && n.length > 50) throw new Error("Custom track `trackName` must not be more than 50 characters");
                if (t && "music" !== t && "speech" !== t && !(t instanceof Object)) throw new Error("Custom track `mode` must be either `music` | `speech` | `DailyMicAudioModeSettings` or `undefined`");
                if (!!n && [
                    "cam-audio",
                    "cam-video",
                    "screen-video",
                    "screen-audio",
                    "rmpAudio",
                    "rmpVideo",
                    "customVideoDefaults"
                ].includes(n)) throw new Error("Custom track `trackName` must not match a track name already used by daily: cam-audio, cam-video, customVideoDefaults, screen-video, screen-audio, rmpAudio, rmpVideo");
                if (!(e instanceof MediaStreamTrack)) throw new Error("Custom tracks provided must be instances of MediaStreamTrack");
            }
        },
        {
            key: "startCustomTrack",
            value: function() {
                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                    track: track,
                    mode: mode,
                    trackName: trackName
                };
                return nc(), Qa(this._callState, "startCustomTrack()"), this.validateCustomTrack(t.track, t.mode, t.trackName), new Promise(function(n, r) {
                    e._sharedTracks.customTrack = t.track, t.track = Qo, e.sendMessageToCallMachine({
                        action: "start-custom-track",
                        properties: t
                    }, function(e) {
                        e.error ? r({
                            error: e.error
                        }) : n(e.mediaTag);
                    });
                });
            }
        },
        {
            key: "stopCustomTrack",
            value: function(e) {
                var t = this;
                return nc(), Qa(this._callState, "stopCustomTrack()"), new Promise(function(n) {
                    t.sendMessageToCallMachine({
                        action: "stop-custom-track",
                        mediaTag: e
                    }, function(e) {
                        n(e.mediaTag);
                    });
                });
            }
        },
        {
            key: "setCamera",
            value: function(e) {
                var t = this;
                return rc(), Xa(this._callMachineInitialized, "setCamera()"), new Promise(function(n) {
                    t.sendMessageToCallMachine({
                        action: "set-camera",
                        cameraDeviceId: e
                    }, function(e) {
                        n({
                            device: e.device
                        });
                    });
                });
            }
        },
        {
            key: "setAudioDevice",
            value: (q = p(function*(e) {
                return rc(), this.nativeUtils().setAudioDevice(e), {
                    deviceId: yield this.nativeUtils().getAudioDevice()
                };
            }), function(e) {
                return q.apply(this, arguments);
            })
        },
        {
            key: "cycleCamera",
            value: function() {
                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return new Promise(function(n) {
                    e.sendMessageToCallMachine({
                        action: "cycle-camera",
                        properties: t
                    }, function(e) {
                        n({
                            device: e.device
                        });
                    });
                });
            }
        },
        {
            key: "cycleMic",
            value: function() {
                var e = this;
                return nc(), new Promise(function(t) {
                    e.sendMessageToCallMachine({
                        action: "cycle-mic"
                    }, function(e) {
                        t({
                            device: e.device
                        });
                    });
                });
            }
        },
        {
            key: "getCameraFacingMode",
            value: function() {
                var e = this;
                return rc(), new Promise(function(t) {
                    e.sendMessageToCallMachine({
                        action: "get-camera-facing-mode"
                    }, function(e) {
                        t(e.facingMode);
                    });
                });
            }
        },
        {
            key: "setInputDevicesAsync",
            value: ($ = p(function*(e) {
                var t = this, n = e.audioDeviceId, r = e.videoDeviceId, i = e.audioSource, o = e.videoSource;
                if (nc(), void 0 !== i && (n = i), void 0 !== o && (r = o), "boolean" == typeof n && (this._setAllowLocalAudio(n), n = void 0), "boolean" == typeof r && (this._setAllowLocalVideo(r), r = void 0), !n && !r) return yield this.getInputDevices();
                var s = {};
                return n && (n instanceof MediaStreamTrack ? (this._sharedTracks.audioTrack = n, n = Qo, s.audio = {
                    settings: {
                        customTrack: n
                    }
                }) : (delete this._sharedTracks.audioTrack, s.audio = {
                    settings: {
                        deviceId: n
                    }
                })), r && (r instanceof MediaStreamTrack ? (this._sharedTracks.videoTrack = r, r = Qo, s.video = {
                    settings: {
                        customTrack: r
                    }
                }) : (delete this._sharedTracks.videoTrack, s.video = {
                    settings: {
                        deviceId: r
                    }
                })), this._callObjectMode && this.needsLoad() ? (this._updatePreloadCacheInputSettings(s, !1), this._devicesFromInputSettings(this._inputSettings)) : new Promise(function(e) {
                    t.sendMessageToCallMachine({
                        action: "set-input-devices",
                        audioDeviceId: n,
                        videoDeviceId: r
                    }, function(n) {
                        if (delete n.action, delete n.callbackStamp, n.returnPreloadCache) return t._updatePreloadCacheInputSettings(s, !1), void e(t._devicesFromInputSettings(t._inputSettings));
                        e(n);
                    });
                });
            }), function(e) {
                return $.apply(this, arguments);
            })
        },
        {
            key: "setOutputDeviceAsync",
            value: (J = p(function*(e) {
                var t = this, n = e.outputDeviceId;
                return nc(), n && (this._preloadCache.outputDeviceId = n), this._callObjectMode && this.needsLoad() ? this._devicesFromInputSettings(this._inputSettings) : new Promise(function(e) {
                    t.sendMessageToCallMachine({
                        action: "set-output-device",
                        outputDeviceId: n
                    }, function(n) {
                        delete n.action, delete n.callbackStamp, n.returnPreloadCache ? e(t._devicesFromInputSettings(t._inputSettings)) : e(n);
                    });
                });
            }), function(e) {
                return J.apply(this, arguments);
            })
        },
        {
            key: "getInputDevices",
            value: (V = p(function*() {
                var e = this;
                return this._callObjectMode && this.needsLoad() ? this._devicesFromInputSettings(this._inputSettings) : new Promise(function(t) {
                    e.sendMessageToCallMachine({
                        action: "get-input-devices"
                    }, function(n) {
                        n.returnPreloadCache ? t(e._devicesFromInputSettings(e._inputSettings)) : t({
                            camera: n.camera,
                            mic: n.mic,
                            speaker: n.speaker
                        });
                    });
                });
            }), function() {
                return V.apply(this, arguments);
            })
        },
        {
            key: "nativeInCallAudioMode",
            value: function() {
                return rc(), this._nativeInCallAudioMode;
            }
        },
        {
            key: "setNativeInCallAudioMode",
            value: function(e) {
                if (rc(), [
                    Da,
                    Na
                ].includes(e)) {
                    if (e !== this._nativeInCallAudioMode) return this._nativeInCallAudioMode = e, !this.disableReactNativeAutoDeviceManagement("audio") && Ka(this._callState, this._isPreparingToJoin) && this.nativeUtils().setAudioMode(this._nativeInCallAudioMode), this;
                } else console.error("invalid in-call audio mode specified: ", e);
            }
        },
        {
            key: "preAuth",
            value: (U = p(function*() {
                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                if (ec(this._callObjectMode, "preAuth()"), Ya(this._callState, this._isPreparingToJoin, "preAuth()"), this.needsLoad() && (yield this.load(t)), !t.url) throw new Error("preAuth() requires at least a url to be provided");
                return this.validateProperties(t), this.properties = Aa(Aa({}, this.properties), t), new Promise(function(t, n) {
                    e._preloadCache.inputSettings = e._prepInputSettingsForSharing(e._inputSettings, !1), e.sendMessageToCallMachine({
                        action: "daily-method-preauth",
                        properties: Ga(e.properties, e.callClientId),
                        preloadCache: Ga(e._preloadCache, e.callClientId)
                    }, function(r) {
                        return r.error ? n(r.error) : r.access ? (e._didPreAuth = !0, void t({
                            access: r.access
                        })) : n(new Error("unknown error in preAuth()"));
                    });
                });
            }), function() {
                return U.apply(this, arguments);
            })
        },
        {
            key: "load",
            value: (R = p(function*(e) {
                var t = this;
                if (this.needsLoad()) {
                    if (this._destroyed && (this._logUseAfterDestroy(), this.strictMode)) throw new Error("Use after destroy");
                    if (e && (this.validateProperties(e), this.properties = Aa(Aa({}, this.properties), e)), !this._callObjectMode && !this.properties.url) throw new Error("can't load iframe meeting because url property isn't set");
                    return this._updateCallState(ni), this.emitDailyJSEvent({
                        action: Vi
                    }), this._callObjectMode ? new Promise(function(e, n) {
                        t._callObjectLoader.cancel();
                        var r = Date.now();
                        t._callObjectLoader.load(t.properties.dailyConfig, function(n) {
                            t._bundleLoadTime = n ? "no-op" : Date.now() - r, t._updateCallState(ri), n && t.emitDailyJSEvent({
                                action: $i
                            }), e();
                        }, function(e, r) {
                            if (t.emitDailyJSEvent({
                                action: Ji
                            }), !r) {
                                t._updateCallState(ai), t.resetMeetingDependentVars();
                                var i = {
                                    action: Jo,
                                    errorMsg: e.msg,
                                    error: {
                                        type: "connection-error",
                                        msg: "Failed to load call object bundle.",
                                        details: {
                                            on: "load",
                                            sourceError: e,
                                            bundleUrl: B(t.properties.dailyConfig)
                                        }
                                    }
                                };
                                t._maybeSendToSentry(i), t.emitDailyJSEvent(i), n(e.msg);
                            }
                        });
                    }) : (this._iframe.src = F(this.assembleMeetingUrl(), this.properties.dailyConfig), new Promise(function(e, n) {
                        t._loadedCallback = function(r) {
                            t._callState !== ai ? (t._updateCallState(ri), (t.properties.cssFile || t.properties.cssText) && t.loadCss(t.properties), e()) : n(r);
                        };
                    }));
                }
            }), function(e) {
                return R.apply(this, arguments);
            })
        },
        {
            key: "join",
            value: (L = p(function*() {
                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                this._testCallInProgress && this.stopTestCallQuality();
                var n = !1;
                if (this.needsLoad()) {
                    this.updateIsPreparingToJoin(!0);
                    try {
                        yield this.load(t);
                    } catch (e) {
                        return this.updateIsPreparingToJoin(!1), Promise.reject(e);
                    }
                } else {
                    if (n = !(!this.properties.cssFile && !this.properties.cssText), this._didPreAuth) {
                        if (t.url && t.url !== this.properties.url) return console.error("url in join() is different than the one used in preAuth()"), this.updateIsPreparingToJoin(!1), Promise.reject();
                        if (t.token && t.token !== this.properties.token) return console.error("token in join() is different than the one used in preAuth()"), this.updateIsPreparingToJoin(!1), Promise.reject();
                    }
                    if (t.url && !this._callObjectMode && t.url && t.url !== this.properties.url) return console.error("url in join() is different than the one used in load() (".concat(this.properties.url, " -> ").concat(t.url, ")")), this.updateIsPreparingToJoin(!1), Promise.reject();
                    this.validateProperties(t), this.properties = Aa(Aa({}, this.properties), t);
                }
                return void 0 !== t.showLocalVideo && (this._callObjectMode ? console.error("showLocalVideo is not available in callObject mode") : this._showLocalVideo = !!t.showLocalVideo), void 0 !== t.showParticipantsBar && (this._callObjectMode ? console.error("showParticipantsBar is not available in callObject mode") : this._showParticipantsBar = !!t.showParticipantsBar), this._callState === oi || this._callState === ii ? (console.warn("already joined meeting, call leave() before joining again"), void this.updateIsPreparingToJoin(!1)) : (this._updateCallState(ii, !1), this.emitDailyJSEvent({
                    action: Wi
                }), this._preloadCache.inputSettings = this._prepInputSettingsForSharing(this._inputSettings || {}, !1), this.sendMessageToCallMachine({
                    action: "join-meeting",
                    properties: Ga(this.properties, this.callClientId),
                    preloadCache: Ga(this._preloadCache, this.callClientId)
                }), new Promise(function(t, r) {
                    e._joinedCallback = function(i, o) {
                        if (e._callState !== ai) {
                            if (e._updateCallState(oi), i) for(var s in i){
                                if (e._callObjectMode) {
                                    var a = e._callMachine().store;
                                    Zs(i[s], a), ea(i[s], a), na(i[s], e._participants[s], a);
                                }
                                e._participants[s] = Aa({}, i[s]), e.toggleParticipantAudioBasedOnNativeAudioFocus();
                            }
                            n && e.loadCss(e.properties), t(i);
                        } else r(o);
                    };
                }));
            }), function() {
                return L.apply(this, arguments);
            })
        },
        {
            key: "leave",
            value: (x = p(function*() {
                var e = this;
                return this._testCallInProgress && this.stopTestCallQuality(), new Promise(function(t) {
                    e._callState === si || e._callState === ai ? t() : e._callObjectLoader && !e._callObjectLoader.loaded ? (e._callObjectLoader.cancel(), e._updateCallState(si), e.resetMeetingDependentVars(), e.emitDailyJSEvent({
                        action: si
                    }), t()) : (e._resolveLeave = t, e.sendMessageToCallMachine({
                        action: "leave-meeting"
                    }));
                });
            }), function() {
                return x.apply(this, arguments);
            })
        },
        {
            key: "startScreenShare",
            value: (I = p(function*() {
                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                if (Xa(this._callMachineInitialized, "startScreenShare()"), t.screenVideoSendSettings && this._validateVideoSendSettings("screenVideo", t.screenVideoSendSettings), t.mediaStream && (this._sharedTracks.screenMediaStream = t.mediaStream, t.mediaStream = Qo), "undefined" != typeof DailyNativeUtils && void 0 !== DailyNativeUtils.isIOS && DailyNativeUtils.isIOS) {
                    var n = this.nativeUtils();
                    if (yield n.isScreenBeingCaptured()) return void this.emitDailyJSEvent({
                        action: Vo,
                        type: "screen-share-error",
                        errorMsg: "Could not start the screen sharing. The screen is already been captured!"
                    });
                    n.setSystemScreenCaptureStartCallback(function() {
                        n.setSystemScreenCaptureStartCallback(null), e.sendMessageToCallMachine({
                            action: Wo,
                            captureOptions: t
                        });
                    }), n.presentSystemScreenCapturePrompt();
                } else this.sendMessageToCallMachine({
                    action: Wo,
                    captureOptions: t
                });
            }), function() {
                return I.apply(this, arguments);
            })
        },
        {
            key: "stopScreenShare",
            value: function() {
                Xa(this._callMachineInitialized, "stopScreenShare()"), this.sendMessageToCallMachine({
                    action: "local-screen-stop"
                });
            }
        },
        {
            key: "startRecording",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = e.type;
                if (t && "cloud" !== t && "raw-tracks" !== t && "local" !== t) throw new Error("invalid type: ".concat(t, ", allowed values 'cloud', 'raw-tracks', or 'local'"));
                this.sendMessageToCallMachine(Aa({
                    action: "local-recording-start"
                }, e));
            }
        },
        {
            key: "updateRecording",
            value: function(e) {
                var t = e.layout, n = void 0 === t ? {
                    preset: "default"
                } : t, r = e.instanceId;
                this.sendMessageToCallMachine({
                    action: "daily-method-update-recording",
                    layout: n,
                    instanceId: r
                });
            }
        },
        {
            key: "stopRecording",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                this.sendMessageToCallMachine(Aa({
                    action: "local-recording-stop"
                }, e));
            }
        },
        {
            key: "startLiveStreaming",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                this.sendMessageToCallMachine(Aa({
                    action: "daily-method-start-live-streaming"
                }, e));
            }
        },
        {
            key: "updateLiveStreaming",
            value: function(e) {
                var t = e.layout, n = void 0 === t ? {
                    preset: "default"
                } : t, r = e.instanceId;
                this.sendMessageToCallMachine({
                    action: "daily-method-update-live-streaming",
                    layout: n,
                    instanceId: r
                });
            }
        },
        {
            key: "addLiveStreamingEndpoints",
            value: function(e) {
                var t = e.endpoints, n = e.instanceId;
                this.sendMessageToCallMachine({
                    action: Ho,
                    endpointsOp: es,
                    endpoints: t,
                    instanceId: n
                });
            }
        },
        {
            key: "removeLiveStreamingEndpoints",
            value: function(e) {
                var t = e.endpoints, n = e.instanceId;
                this.sendMessageToCallMachine({
                    action: Ho,
                    endpointsOp: ts,
                    endpoints: t,
                    instanceId: n
                });
            }
        },
        {
            key: "stopLiveStreaming",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                this.sendMessageToCallMachine(Aa({
                    action: "daily-method-stop-live-streaming"
                }, e));
            }
        },
        {
            key: "validateDailyConfig",
            value: function(e) {
                e.camSimulcastEncodings && (console.warn("camSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide camera simulcast settings."), this.validateSimulcastEncodings(e.camSimulcastEncodings)), e.screenSimulcastEncodings && console.warn("screenSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide screen simulcast settings."), vs() && e.noAutoDefaultDeviceChange && console.warn("noAutoDefaultDeviceChange is not supported on Android, and will be ignored.");
            }
        },
        {
            key: "validateSimulcastEncodings",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                if (e) {
                    if (!(e instanceof Array || Array.isArray(e))) throw new Error("encodings must be an Array");
                    if (!bc(e.length, 1, 3)) throw new Error("encodings must be an Array with between 1 to ".concat(3, " layers"));
                    for(var r = 0; r < e.length; r++){
                        var i = e[r];
                        for(var o in this._validateEncodingLayerHasValidProperties(i), i)if (Ua.includes(o)) {
                            if ("number" != typeof i[o]) throw new Error("".concat(o, " must be a number"));
                            if (t) {
                                var s = t[o], a = s.min, c = s.max;
                                if (!bc(i[o], a, c)) throw new Error("".concat(o, " value not in range. valid range: ").concat(a, " to ").concat(c));
                            }
                        } else if (![
                            "active",
                            "scalabilityMode"
                        ].includes(o)) throw new Error("Invalid key ".concat(o, ", valid keys are:") + Object.values(Ua));
                        if (n && !i.hasOwnProperty("maxBitrate")) throw new Error("maxBitrate is not specified");
                    }
                }
            }
        },
        {
            key: "startRemoteMediaPlayer",
            value: (j = p(function*(e) {
                var t = this, n = e.url, r = e.settings, i = void 0 === r ? {
                    state: Xo.PLAY
                } : r;
                try {
                    !function(e) {
                        if ("string" != typeof e) throw new Error('url parameter must be "string" type');
                    }(n), yc(i), function(e) {
                        for(var t in e)if (!Va.includes(t)) throw new Error("Invalid key ".concat(t, ", valid keys are: ").concat(Va));
                        e.simulcastEncodings && this.validateSimulcastEncodings(e.simulcastEncodings, Ba, !0);
                    }(i);
                } catch (e) {
                    throw console.error("invalid argument Error: ".concat(e)), console.error('startRemoteMediaPlayer arguments must be of the form:\n  { url: "playback url",\n  settings?:\n  {state: "play"|"pause", simulcastEncodings?: [{}] } }'), e;
                }
                return new Promise(function(e, r) {
                    t.sendMessageToCallMachine({
                        action: "daily-method-start-remote-media-player",
                        url: n,
                        settings: i
                    }, function(t) {
                        t.error ? r({
                            error: t.error,
                            errorMsg: t.errorMsg
                        }) : e({
                            session_id: t.session_id,
                            remoteMediaPlayerState: {
                                state: t.state,
                                settings: t.settings
                            }
                        });
                    });
                });
            }), function(e) {
                return j.apply(this, arguments);
            })
        },
        {
            key: "stopRemoteMediaPlayer",
            value: (A = p(function*(e) {
                var t = this;
                if ("string" != typeof e) throw new Error(" remotePlayerID must be of type string");
                return new Promise(function(n, r) {
                    t.sendMessageToCallMachine({
                        action: "daily-method-stop-remote-media-player",
                        session_id: e
                    }, function(e) {
                        e.error ? r({
                            error: e.error,
                            errorMsg: e.errorMsg
                        }) : n();
                    });
                });
            }), function(e) {
                return A.apply(this, arguments);
            })
        },
        {
            key: "updateRemoteMediaPlayer",
            value: (P = p(function*(e) {
                var t = this, n = e.session_id, r = e.settings;
                try {
                    yc(r);
                } catch (e) {
                    throw console.error("invalid argument Error: ".concat(e)), console.error('updateRemoteMediaPlayer arguments must be of the form:\n  session_id: "participant session",\n  { settings?: {state: "play"|"pause"} }'), e;
                }
                return new Promise(function(e, i) {
                    t.sendMessageToCallMachine({
                        action: "daily-method-update-remote-media-player",
                        session_id: n,
                        settings: r
                    }, function(t) {
                        t.error ? i({
                            error: t.error,
                            errorMsg: t.errorMsg
                        }) : e({
                            session_id: t.session_id,
                            remoteMediaPlayerState: {
                                state: t.state,
                                settings: t.settings
                            }
                        });
                    });
                });
            }), function(e) {
                return P.apply(this, arguments);
            })
        },
        {
            key: "startTranscription",
            value: function(e) {
                Qa(this._callState, "startTranscription()"), this.sendMessageToCallMachine(Aa({
                    action: "daily-method-start-transcription"
                }, e));
            }
        },
        {
            key: "updateTranscription",
            value: function(e) {
                if (Qa(this._callState, "updateTranscription()"), !e) throw new Error("updateTranscription Error: options is mandatory");
                if ("object" !== n(e)) throw new Error("updateTranscription Error: options must be object type");
                if (e.participants && !Array.isArray(e.participants)) throw new Error("updateTranscription Error: participants must be an array");
                this.sendMessageToCallMachine(Aa({
                    action: "daily-method-update-transcription"
                }, e));
            }
        },
        {
            key: "stopTranscription",
            value: function(e) {
                if (Qa(this._callState, "stopTranscription()"), e && "object" !== n(e)) throw new Error("stopTranscription Error: options must be object type");
                if (e && !e.instanceId) throw new Error('"instanceId" not provided');
                this.sendMessageToCallMachine(Aa({
                    action: "daily-method-stop-transcription"
                }, e));
            }
        },
        {
            key: "startDialOut",
            value: (O = p(function*(e) {
                var t = this;
                Qa(this._callState, "startDialOut()");
                var n = function(e) {
                    if (e) {
                        if (!Array.isArray(e)) throw new Error("Error starting dial out: audio codec must be an array");
                        if (e.length <= 0) throw new Error("Error starting dial out: audio codec array specified but empty");
                        e.forEach(function(e) {
                            if ("string" != typeof e) throw new Error("Error starting dial out: audio codec must be a string");
                            if ("OPUS" !== e && "PCMU" !== e && "PCMA" !== e && "G722" !== e) throw new Error("Error starting dial out: audio codec must be one of OPUS, PCMU, PCMA, G722");
                        });
                    }
                };
                if (!e.sipUri && !e.phoneNumber) throw new Error("Error starting dial out: either a sip uri or phone number must be provided");
                if (e.sipUri && e.phoneNumber) throw new Error("Error starting dial out: only one of sip uri or phone number must be provided");
                if (e.sipUri) {
                    if ("string" != typeof e.sipUri) throw new Error("Error starting dial out: sipUri must be a string");
                    if (!e.sipUri.startsWith("sip:")) throw new Error("Error starting dial out: Invalid SIP URI, must start with 'sip:'");
                    if (e.video && "boolean" != typeof e.video) throw new Error("Error starting dial out: video must be a boolean value");
                    !function(e) {
                        if (e && (n(e.audio), e.video)) {
                            if (!Array.isArray(e.video)) throw new Error("Error starting dial out: video codec must be an array");
                            if (e.video.length <= 0) throw new Error("Error starting dial out: video codec array specified but empty");
                            e.video.forEach(function(e) {
                                if ("string" != typeof e) throw new Error("Error starting dial out: video codec must be a string");
                                if ("H264" !== e && "VP8" !== e) throw new Error("Error starting dial out: video codec must be H264 or VP8");
                            });
                        }
                    }(e.codecs);
                }
                if (e.phoneNumber) {
                    if ("string" != typeof e.phoneNumber) throw new Error("Error starting dial out: phoneNumber must be a string");
                    if (!/^\+\d{1,}$/.test(e.phoneNumber)) throw new Error("Error starting dial out: Invalid phone number, must be valid phone number as per E.164");
                    e.codecs && n(e.codecs.audio);
                }
                if (e.callerId) {
                    if ("string" != typeof e.callerId) throw new Error("Error starting dial out: callerId must be a string");
                    if (e.sipUri) throw new Error("Error starting dial out: callerId not allowed with sipUri");
                }
                if (e.displayName) {
                    if ("string" != typeof e.displayName) throw new Error("Error starting dial out: displayName must be a string");
                    if (e.displayName.length >= 200) throw new Error("Error starting dial out: displayName length must be less than 200");
                }
                if (e.userId) {
                    if ("string" != typeof e.userId) throw new Error("Error starting dial out: userId must be a string");
                    if (e.userId.length > 36) throw new Error("Error starting dial out: userId length must be less than or equal to 36");
                }
                if (e.permissions && e.permissions.canReceive) {
                    var r = f(Ca.validateJSONObject(e.permissions.canReceive), 2), i = r[0], o = r[1];
                    if (!i) throw new Error(o);
                }
                return new Promise(function(n, r) {
                    t.sendMessageToCallMachine(Aa({
                        action: "dialout-start"
                    }, e), function(e) {
                        e.error ? r(e.error) : n(e);
                    });
                });
            }), function(e) {
                return O.apply(this, arguments);
            })
        },
        {
            key: "stopDialOut",
            value: function(e) {
                var t = this;
                return Qa(this._callState, "stopDialOut()"), new Promise(function(n, r) {
                    t.sendMessageToCallMachine(Aa({
                        action: "dialout-stop"
                    }, e), function(e) {
                        e.error ? r(e.error) : n(e);
                    });
                });
            }
        },
        {
            key: "sipCallTransfer",
            value: (T = p(function*(e) {
                var t = this;
                if (Qa(this._callState, "sipCallTransfer()"), !e) throw new Error("sipCallTransfer() requires a sessionId and toEndPoint");
                return e.useSipRefer = !1, mc(e, "sipCallTransfer"), new Promise(function(n, r) {
                    t.sendMessageToCallMachine(Aa({
                        action: ns
                    }, e), function(e) {
                        e.error ? r(e.error) : n(e);
                    });
                });
            }), function(e) {
                return T.apply(this, arguments);
            })
        },
        {
            key: "sipRefer",
            value: (E = p(function*(e) {
                var t = this;
                if (Qa(this._callState, "sipRefer()"), !e) throw new Error("sessionId and toEndPoint are mandatory parameter");
                return e.useSipRefer = !0, mc(e, "sipRefer"), new Promise(function(n, r) {
                    t.sendMessageToCallMachine(Aa({
                        action: ns
                    }, e), function(e) {
                        e.error ? r(e.error) : n(e);
                    });
                });
            }), function(e) {
                return E.apply(this, arguments);
            })
        },
        {
            key: "sendDTMF",
            value: (C = p(function*(e) {
                var t = this;
                return Qa(this._callState, "sendDTMF()"), function(e) {
                    var t = e.sessionId, n = e.tones;
                    if (!t || !n) throw new Error("sessionId and tones are mandatory parameter");
                    if ("string" != typeof t || "string" != typeof n) throw new Error("sessionId and tones should be of string type");
                    if (n.length > 20) throw new Error("tones string must be upto 20 characters");
                    var r = /[^0-9A-D*#]/g, i = n.match(r);
                    if (i && i[0]) throw new Error("".concat(i[0], " is not valid DTMF tone"));
                }(e), new Promise(function(n, r) {
                    t.sendMessageToCallMachine(Aa({
                        action: "send-dtmf"
                    }, e), function(e) {
                        e.error ? r(e.error) : n(e);
                    });
                });
            }), function(e) {
                return C.apply(this, arguments);
            })
        },
        {
            key: "getNetworkStats",
            value: function() {
                var e = this;
                if (this._callState !== oi) {
                    return Promise.resolve(Aa({
                        stats: {
                            latest: {}
                        }
                    }, this._network));
                }
                return new Promise(function(t) {
                    e.sendMessageToCallMachine({
                        action: "get-calc-stats"
                    }, function(n) {
                        t(Aa(Aa({}, e._network), {}, {
                            stats: n.stats
                        }));
                    });
                });
            }
        },
        {
            key: "testWebsocketConnectivity",
            value: (M = p(function*() {
                var e = this;
                if (Za(this._testCallInProgress, "testWebsocketConnectivity()"), this.needsLoad()) try {
                    yield this.load();
                } catch (e) {
                    return Promise.reject(e);
                }
                return new Promise(function(t, n) {
                    e.sendMessageToCallMachine({
                        action: "test-websocket-connectivity"
                    }, function(e) {
                        e.error ? n(e.error) : t(e.results);
                    });
                });
            }), function() {
                return M.apply(this, arguments);
            })
        },
        {
            key: "abortTestWebsocketConnectivity",
            value: function() {
                this.sendMessageToCallMachine({
                    action: "abort-test-websocket-connectivity"
                });
            }
        },
        {
            key: "_validateVideoTrackForNetworkTests",
            value: function(e) {
                return e ? e instanceof MediaStreamTrack ? !!va(e, {
                    isLocalScreenVideo: !1
                }) || (console.error("Video track is not playable. This test needs a live video track."), !1) : (console.error("Video track needs to be of type `MediaStreamTrack`."), !1) : (console.error("Missing video track. You must provide a video track in order to run this test."), !1);
            }
        },
        {
            key: "testCallQuality",
            value: (k = p(function*() {
                var t = this;
                nc(), ec(this._callObjectMode, "testCallQuality()"), Xa(this._callMachineInitialized, "testCallQuality()", null, !0), Ya(this._callState, this._isPreparingToJoin, "testCallQuality()");
                var n = this._testCallAlreadyInProgress, r = function(e) {
                    n || (t._testCallInProgress = e);
                };
                if (r(!0), this.needsLoad()) try {
                    var i = this._callState;
                    yield this.load(), this._callState = i;
                } catch (e) {
                    return r(!1), Promise.reject(e);
                }
                return new Promise(function(n) {
                    t.sendMessageToCallMachine({
                        action: "test-call-quality",
                        dailyJsVersion: t.properties.dailyJsVersion
                    }, function(i) {
                        var o = i.results, s = o.result, a = e(o, Ta);
                        if ("failed" === s) {
                            var c, l = Aa({}, a);
                            null !== (c = a.error) && void 0 !== c && c.details ? (a.error.details = JSON.parse(a.error.details), l.error = Aa(Aa({}, l.error), {}, {
                                details: Aa({}, l.error.details)
                            }), l.error.details.duringTest = "testCallQuality") : (l.error = l.error ? Aa({}, l.error) : {}, l.error.details = {
                                duringTest: "testCallQuality"
                            }), t._maybeSendToSentry(l);
                        }
                        r(!1), n(Aa({
                            result: s
                        }, a));
                    });
                });
            }), function() {
                return k.apply(this, arguments);
            })
        },
        {
            key: "stopTestCallQuality",
            value: function() {
                this.sendMessageToCallMachine({
                    action: "stop-test-call-quality"
                });
            }
        },
        {
            key: "testConnectionQuality",
            value: (w = p(function*(e) {
                var t;
                is() ? (console.warn("testConnectionQuality() is deprecated: use testPeerToPeerCallQuality() instead"), t = yield this.testPeerToPeerCallQuality(e)) : (console.warn("testConnectionQuality() is deprecated: use testCallQuality() instead"), t = yield this.testCallQuality());
                var n = {
                    result: t.result,
                    secondsElapsed: t.secondsElapsed
                };
                return t.data && (n.data = {
                    maxRTT: t.data.maxRoundTripTime,
                    packetLoss: t.data.avgRecvPacketLoss
                }), n;
            }), function(e) {
                return w.apply(this, arguments);
            })
        },
        {
            key: "testPeerToPeerCallQuality",
            value: (_ = p(function*(e) {
                var t = this;
                if (Za(this._testCallInProgress, "testPeerToPeerCallQuality()"), this.needsLoad()) try {
                    yield this.load();
                } catch (e) {
                    return Promise.reject(e);
                }
                var n = e.videoTrack, r = e.duration;
                if (!this._validateVideoTrackForNetworkTests(n)) throw new Error("Video track error");
                return this._sharedTracks.videoTrackForConnectionQualityTest = n, new Promise(function(e, n) {
                    t.sendMessageToCallMachine({
                        action: "test-p2p-call-quality",
                        duration: r
                    }, function(t) {
                        t.error ? n(t.error) : e(t.results);
                    });
                });
            }), function(e) {
                return _.apply(this, arguments);
            })
        },
        {
            key: "stopTestConnectionQuality",
            value: function() {
                is() ? (console.warn("stopTestConnectionQuality() is deprecated: use testPeerToPeerCallQuality() and stopTestPeerToPeerCallQuality() instead"), this.stopTestPeerToPeerCallQuality()) : (console.warn("stopTestConnectionQuality() is deprecated: use testCallQuality() and stopTestCallQuality() instead"), this.stopTestCallQuality());
            }
        },
        {
            key: "stopTestPeerToPeerCallQuality",
            value: function() {
                this.sendMessageToCallMachine({
                    action: "stop-test-p2p-call-quality"
                });
            }
        },
        {
            key: "testNetworkConnectivity",
            value: (y = p(function*(e) {
                var t = this;
                if (Za(this._testCallInProgress, "testNetworkConnectivity()"), this.needsLoad()) try {
                    yield this.load();
                } catch (e) {
                    return Promise.reject(e);
                }
                if (!this._validateVideoTrackForNetworkTests(e)) throw new Error("Video track error");
                return this._sharedTracks.videoTrackForNetworkConnectivityTest = e, new Promise(function(e, n) {
                    t.sendMessageToCallMachine({
                        action: "test-network-connectivity"
                    }, function(t) {
                        t.error ? n(t.error) : e(t.results);
                    });
                });
            }), function(e) {
                return y.apply(this, arguments);
            })
        },
        {
            key: "abortTestNetworkConnectivity",
            value: function() {
                this.sendMessageToCallMachine({
                    action: "abort-test-network-connectivity"
                });
            }
        },
        {
            key: "getCpuLoadStats",
            value: function() {
                var e = this;
                return new Promise(function(t) {
                    if (e._callState === oi) {
                        e.sendMessageToCallMachine({
                            action: "get-cpu-load-stats"
                        }, function(e) {
                            t(e.cpuStats);
                        });
                    } else t({
                        cpuLoadState: void 0,
                        cpuLoadStateReason: void 0,
                        stats: {}
                    });
                });
            }
        },
        {
            key: "_validateEncodingLayerHasValidProperties",
            value: function(e) {
                var t;
                if (!((null === (t = Object.keys(e)) || void 0 === t ? void 0 : t.length) > 0)) throw new Error("Empty encoding is not allowed. At least one of these valid keys should be specified:" + Object.values(Ua));
            }
        },
        {
            key: "_validateVideoSendSettings",
            value: function(e, t) {
                var r = "screenVideo" === e ? [
                    "default-screen-video",
                    "detail-optimized",
                    "motion-optimized",
                    "motion-and-detail-balanced"
                ] : [
                    "default-video",
                    "bandwidth-optimized",
                    "bandwidth-and-quality-balanced",
                    "quality-optimized",
                    "adaptive-2-layers",
                    "adaptive-3-layers"
                ], i = "Video send settings should be either an object or one of the supported presets: ".concat(r.join());
                if ("string" == typeof t) {
                    if (!r.includes(t)) throw new Error(i);
                } else {
                    if ("object" !== n(t)) throw new Error(i);
                    if (!t.maxQuality && !t.encodings && void 0 === t.allowAdaptiveLayers) throw new Error("Video send settings must contain at least maxQuality, allowAdaptiveLayers or encodings attribute");
                    if (t.maxQuality && -1 === [
                        "low",
                        "medium",
                        "high"
                    ].indexOf(t.maxQuality)) throw new Error("maxQuality must be either low, medium or high");
                    if (t.encodings) {
                        var o = !1;
                        switch(Object.keys(t.encodings).length){
                            case 1:
                                o = !t.encodings.low;
                                break;
                            case 2:
                                o = !t.encodings.low || !t.encodings.medium;
                                break;
                            case 3:
                                o = !t.encodings.low || !t.encodings.medium || !t.encodings.high;
                                break;
                            default:
                                o = !0;
                        }
                        if (o) throw new Error("Encodings must be defined as: low, low and medium, or low, medium and high.");
                        t.encodings.low && this._validateEncodingLayerHasValidProperties(t.encodings.low), t.encodings.medium && this._validateEncodingLayerHasValidProperties(t.encodings.medium), t.encodings.high && this._validateEncodingLayerHasValidProperties(t.encodings.high);
                    }
                }
            }
        },
        {
            key: "validateUpdateSendSettings",
            value: function(e) {
                var t = this;
                if (!e || 0 === Object.keys(e).length) throw new Error("Send settings must contain at least information for one track!");
                Object.entries(e).forEach(function(e) {
                    var n = f(e, 2), r = n[0], i = n[1];
                    t._validateVideoSendSettings(r, i);
                });
            }
        },
        {
            key: "updateSendSettings",
            value: function(e) {
                var t = this;
                return this.validateUpdateSendSettings(e), this.needsLoad() ? (this._preloadCache.sendSettings = e, {
                    sendSettings: this._preloadCache.sendSettings
                }) : new Promise(function(n, r) {
                    t.sendMessageToCallMachine({
                        action: "update-send-settings",
                        sendSettings: e
                    }, function(e) {
                        e.error ? r(e.error) : n(e.sendSettings);
                    });
                });
            }
        },
        {
            key: "getSendSettings",
            value: function() {
                return this._sendSettings || this._preloadCache.sendSettings;
            }
        },
        {
            key: "getLocalAudioLevel",
            value: function() {
                return this._localAudioLevel;
            }
        },
        {
            key: "getRemoteParticipantsAudioLevel",
            value: function() {
                return this._remoteParticipantsAudioLevel;
            }
        },
        {
            key: "getActiveSpeaker",
            value: function() {
                return nc(), this._activeSpeaker;
            }
        },
        {
            key: "setActiveSpeakerMode",
            value: function(e) {
                return nc(), this.sendMessageToCallMachine({
                    action: "set-active-speaker-mode",
                    enabled: e
                }), this;
            }
        },
        {
            key: "activeSpeakerMode",
            value: function() {
                return nc(), this._activeSpeakerMode;
            }
        },
        {
            key: "subscribeToTracksAutomatically",
            value: function() {
                return this._preloadCache.subscribeToTracksAutomatically;
            }
        },
        {
            key: "setSubscribeToTracksAutomatically",
            value: function(e) {
                return Qa(this._callState, "setSubscribeToTracksAutomatically()", "Use the subscribeToTracksAutomatically configuration property."), this._preloadCache.subscribeToTracksAutomatically = e, this.sendMessageToCallMachine({
                    action: "daily-method-subscribe-to-tracks-automatically",
                    enabled: e
                }), this;
            }
        },
        {
            key: "enumerateDevices",
            value: (m = p(function*() {
                var e = this;
                if (this._callObjectMode) {
                    var t = yield navigator.mediaDevices.enumerateDevices();
                    return "Firefox" === ms() && ys().major > 115 && ys().major < 123 && (t = t.filter(function(e) {
                        return "audiooutput" !== e.kind;
                    })), {
                        devices: t.map(function(e) {
                            var t = JSON.parse(JSON.stringify(e));
                            if (!is() && "videoinput" === e.kind && e.getCapabilities) {
                                var n, r = e.getCapabilities();
                                t.facing = (null == r || null === (n = r.facingMode) || void 0 === n ? void 0 : n.length) >= 1 ? r.facingMode[0] : void 0;
                            }
                            return t;
                        })
                    };
                }
                return new Promise(function(t) {
                    e.sendMessageToCallMachine({
                        action: "enumerate-devices"
                    }, function(e) {
                        t({
                            devices: e.devices
                        });
                    });
                });
            }), function() {
                return m.apply(this, arguments);
            })
        },
        {
            key: "sendAppMessage",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "*";
                if (Qa(this._callState, "sendAppMessage()"), JSON.stringify(e).length > this._maxAppMessageSize) throw new Error("Message data too large. Max size is " + this._maxAppMessageSize);
                return this.sendMessageToCallMachine({
                    action: "app-msg",
                    data: e,
                    to: t
                }), this;
            }
        },
        {
            key: "addFakeParticipant",
            value: function(e) {
                return nc(), Qa(this._callState, "addFakeParticipant()"), this.sendMessageToCallMachine(Aa({
                    action: "add-fake-participant"
                }, e)), this;
            }
        },
        {
            key: "setShowNamesMode",
            value: function(e) {
                return tc(this._callObjectMode, "setShowNamesMode()"), nc(), e && "always" !== e && "never" !== e ? (console.error('setShowNamesMode argument should be "always", "never", or false'), this) : (this.sendMessageToCallMachine({
                    action: "set-show-names",
                    mode: e
                }), this);
            }
        },
        {
            key: "setShowLocalVideo",
            value: function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                return tc(this._callObjectMode, "setShowLocalVideo()"), nc(), Qa(this._callState, "setShowLocalVideo()"), "boolean" != typeof e ? (console.error("setShowLocalVideo only accepts a boolean value"), this) : (this.sendMessageToCallMachine({
                    action: "set-show-local-video",
                    show: e
                }), this._showLocalVideo = e, this);
            }
        },
        {
            key: "showLocalVideo",
            value: function() {
                return tc(this._callObjectMode, "showLocalVideo()"), nc(), this._showLocalVideo;
            }
        },
        {
            key: "setShowParticipantsBar",
            value: function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                return tc(this._callObjectMode, "setShowParticipantsBar()"), nc(), Qa(this._callState, "setShowParticipantsBar()"), "boolean" != typeof e ? (console.error("setShowParticipantsBar only accepts a boolean value"), this) : (this.sendMessageToCallMachine({
                    action: "set-show-participants-bar",
                    show: e
                }), this._showParticipantsBar = e, this);
            }
        },
        {
            key: "showParticipantsBar",
            value: function() {
                return tc(this._callObjectMode, "showParticipantsBar()"), nc(), this._showParticipantsBar;
            }
        },
        {
            key: "customIntegrations",
            value: function() {
                return nc(), tc(this._callObjectMode, "customIntegrations()"), this._customIntegrations;
            }
        },
        {
            key: "setCustomIntegrations",
            value: function(e) {
                return nc(), tc(this._callObjectMode, "setCustomIntegrations()"), Qa(this._callState, "setCustomIntegrations()"), vc(e) ? (this.sendMessageToCallMachine({
                    action: "set-custom-integrations",
                    integrations: e
                }), this._customIntegrations = e, this) : this;
            }
        },
        {
            key: "startCustomIntegrations",
            value: function(e) {
                var t = this;
                if (nc(), tc(this._callObjectMode, "startCustomIntegrations()"), Qa(this._callState, "startCustomIntegrations()"), Array.isArray(e) && e.some(function(e) {
                    return "string" != typeof e;
                }) || !Array.isArray(e) && "string" != typeof e) return console.error("startCustomIntegrations() only accepts string | string[]"), this;
                var n = "string" == typeof e ? [
                    e
                ] : e, r = n.filter(function(e) {
                    return !(e in t._customIntegrations);
                });
                return r.length ? (console.error("Can't find custom integration(s): \"".concat(r.join(", "), '"')), this) : (this.sendMessageToCallMachine({
                    action: "start-custom-integrations",
                    ids: n
                }), this);
            }
        },
        {
            key: "stopCustomIntegrations",
            value: function(e) {
                var t = this;
                if (nc(), tc(this._callObjectMode, "stopCustomIntegrations()"), Qa(this._callState, "stopCustomIntegrations()"), Array.isArray(e) && e.some(function(e) {
                    return "string" != typeof e;
                }) || !Array.isArray(e) && "string" != typeof e) return console.error("stopCustomIntegrations() only accepts string | string[]"), this;
                var n = "string" == typeof e ? [
                    e
                ] : e, r = n.filter(function(e) {
                    return !(e in t._customIntegrations);
                });
                return r.length ? (console.error("Can't find custom integration(s): \"".concat(r.join(", "), '"')), this) : (this.sendMessageToCallMachine({
                    action: "stop-custom-integrations",
                    ids: n
                }), this);
            }
        },
        {
            key: "customTrayButtons",
            value: function() {
                return tc(this._callObjectMode, "customTrayButtons()"), nc(), this._customTrayButtons;
            }
        },
        {
            key: "updateCustomTrayButtons",
            value: function(e) {
                return tc(this._callObjectMode, "updateCustomTrayButtons()"), nc(), Qa(this._callState, "updateCustomTrayButtons()"), fc(e) ? (this.sendMessageToCallMachine({
                    action: "update-custom-tray-buttons",
                    btns: e
                }), this._customTrayButtons = e, this) : (console.error("updateCustomTrayButtons only accepts a dictionary of the type ".concat(JSON.stringify($a))), this);
            }
        },
        {
            key: "theme",
            value: function() {
                return tc(this._callObjectMode, "theme()"), this.properties.theme;
            }
        },
        {
            key: "setTheme",
            value: function(e) {
                var t = this;
                return tc(this._callObjectMode, "setTheme()"), new Promise(function(n, r) {
                    try {
                        t.validateProperties({
                            theme: e
                        }), t.properties.theme = Aa({}, e), t.sendMessageToCallMachine({
                            action: "set-theme",
                            theme: t.properties.theme
                        });
                        try {
                            t.emitDailyJSEvent({
                                action: Ui,
                                theme: t.properties.theme
                            });
                        } catch (e) {
                            console.log("could not emit 'theme-updated'", e);
                        }
                        n(t.properties.theme);
                    } catch (e) {
                        r(e);
                    }
                });
            }
        },
        {
            key: "requestFullscreen",
            value: (g = p(function*() {
                if (nc(), this._iframe && !document.fullscreenElement && as()) try {
                    (yield this._iframe.requestFullscreen) ? this._iframe.requestFullscreen() : this._iframe.webkitRequestFullscreen();
                } catch (e) {
                    console.log("could not make video call fullscreen", e);
                }
            }), function() {
                return g.apply(this, arguments);
            })
        },
        {
            key: "exitFullscreen",
            value: function() {
                nc(), document.fullscreenElement ? document.exitFullscreen() : document.webkitFullscreenElement && document.webkitExitFullscreen();
            }
        },
        {
            key: "getSidebarView",
            value: (v = p(function*() {
                var e = this;
                return this._callObjectMode ? (console.error("getSidebarView is not available in callObject mode"), Promise.resolve(null)) : new Promise(function(t) {
                    e.sendMessageToCallMachine({
                        action: "get-sidebar-view"
                    }, function(e) {
                        t(e.view);
                    });
                });
            }), function() {
                return v.apply(this, arguments);
            })
        },
        {
            key: "setSidebarView",
            value: function(e) {
                return this._callObjectMode ? (console.error("setSidebarView is not available in callObject mode"), this) : (this.sendMessageToCallMachine({
                    action: "set-sidebar-view",
                    view: e
                }), this);
            }
        },
        {
            key: "room",
            value: (h = p(function*() {
                var e = this, t = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).includeRoomConfigDefaults, n = void 0 === t || t;
                return this._accessState.access === fi || this.needsLoad() ? this.properties.url ? {
                    roomUrlPendingJoin: this.properties.url
                } : null : new Promise(function(t) {
                    e.sendMessageToCallMachine({
                        action: "lib-room-info",
                        includeRoomConfigDefaults: n
                    }, function(e) {
                        delete e.action, delete e.callbackStamp, t(e);
                    });
                });
            }), function() {
                return h.apply(this, arguments);
            })
        },
        {
            key: "geo",
            value: (d = p(function*() {
                try {
                    var e = yield fetch("https://gs.daily.co/_ks_/x-swsl/:");
                    return {
                        current: (yield e.json()).geo
                    };
                } catch (e) {
                    return console.error("geo lookup failed", e), {
                        current: ""
                    };
                }
            }), function() {
                return d.apply(this, arguments);
            })
        },
        {
            key: "setNetworkTopology",
            value: (c = p(function*(e) {
                var t = this;
                return nc(), Qa(this._callState, "setNetworkTopology()"), new Promise(function(n, r) {
                    t.sendMessageToCallMachine({
                        action: "set-network-topology",
                        opts: e
                    }, function(e) {
                        e.error ? r({
                            error: e.error
                        }) : n({
                            workerId: e.workerId
                        });
                    });
                });
            }), function(e) {
                return c.apply(this, arguments);
            })
        },
        {
            key: "getNetworkTopology",
            value: (i = p(function*() {
                var e = this;
                return new Promise(function(t, n) {
                    e.needsLoad() && t({
                        topology: "none"
                    }), e.sendMessageToCallMachine({
                        action: "get-network-topology"
                    }, function(e) {
                        e.error ? n({
                            error: e.error
                        }) : t({
                            topology: e.topology
                        });
                    });
                });
            }), function() {
                return i.apply(this, arguments);
            })
        },
        {
            key: "setPlayNewParticipantSound",
            value: function(e) {
                if (nc(), "number" != typeof e && !0 !== e && !1 !== e) throw new Error("argument to setShouldPlayNewParticipantSound should be true, false, or a number, but is ".concat(e));
                this.sendMessageToCallMachine({
                    action: "daily-method-set-play-ding",
                    arg: e
                });
            }
        },
        {
            key: "on",
            value: function(e, t) {
                return b.prototype.on.call(this, e, t);
            }
        },
        {
            key: "once",
            value: function(e, t) {
                return b.prototype.once.call(this, e, t);
            }
        },
        {
            key: "off",
            value: function(e, t) {
                return b.prototype.off.call(this, e, t);
            }
        },
        {
            key: "validateProperties",
            value: function(e) {
                var t, n;
                if (null != e && null !== (t = e.dailyConfig) && void 0 !== t && t.userMediaAudioConstraints) {
                    var r, i;
                    is() || console.warn("userMediaAudioConstraints is deprecated. You can override constraints with inputSettings.audio.settings, found in DailyCallOptions.");
                    var o = e.inputSettings || {};
                    o.audio = (null === (r = e.inputSettings) || void 0 === r ? void 0 : r.audio) || {}, o.audio.settings = (null === (i = e.inputSettings) || void 0 === i || null === (i = i.audio) || void 0 === i ? void 0 : i.settings) || {}, o.audio.settings = Aa(Aa({}, o.audio.settings), e.dailyConfig.userMediaAudioConstraints), e.inputSettings = o, delete e.dailyConfig.userMediaAudioConstraints;
                }
                if (null != e && null !== (n = e.dailyConfig) && void 0 !== n && n.userMediaVideoConstraints) {
                    var s, a;
                    is() || console.warn("userMediaVideoConstraints is deprecated. You can override constraints with inputSettings.video.settings, found in DailyCallOptions.");
                    var c = e.inputSettings || {};
                    c.video = (null === (s = e.inputSettings) || void 0 === s ? void 0 : s.video) || {}, c.video.settings = (null === (a = e.inputSettings) || void 0 === a || null === (a = a.video) || void 0 === a ? void 0 : a.settings) || {}, c.video.settings = Aa(Aa({}, c.video.settings), e.dailyConfig.userMediaVideoConstraints), e.inputSettings = c, delete e.dailyConfig.userMediaVideoConstraints;
                }
                for(var l in e){
                    if (!za[l]) throw new Error("unrecognized property '".concat(l, "'"));
                    if (za[l].validate && !za[l].validate(e[l], this)) throw new Error("property '".concat(l, "': ").concat(za[l].help));
                }
            }
        },
        {
            key: "assembleMeetingUrl",
            value: function() {
                var e, t, n = Aa(Aa({}, this.properties), {}, {
                    emb: this.callClientId,
                    embHref: encodeURIComponent(window.location.href),
                    proxy: null !== (e = this.properties.dailyConfig) && void 0 !== e && e.proxyUrl ? encodeURIComponent(null === (t = this.properties.dailyConfig) || void 0 === t ? void 0 : t.proxyUrl) : void 0
                }), r = n.url.match(/\?/) ? "&" : "?";
                return n.url + r + Object.keys(za).filter(function(e) {
                    return za[e].queryString && void 0 !== n[e];
                }).map(function(e) {
                    return "".concat(za[e].queryString, "=").concat(n[e]);
                }).join("&");
            }
        },
        {
            key: "needsLoad",
            value: function() {
                return [
                    ti,
                    ni,
                    si,
                    ai
                ].includes(this._callState);
            }
        },
        {
            key: "sendMessageToCallMachine",
            value: function(e, t) {
                if (this._destroyed && (this._logUseAfterDestroy(), this.strictMode)) throw new Error("Use after destroy");
                this._messageChannel.sendMessageToCallMachine(e, t, this.callClientId, this._iframe);
            }
        },
        {
            key: "forwardPackagedMessageToCallMachine",
            value: function(e) {
                this._messageChannel.forwardPackagedMessageToCallMachine(e, this._iframe, this.callClientId);
            }
        },
        {
            key: "addListenerForPackagedMessagesFromCallMachine",
            value: function(e) {
                return this._messageChannel.addListenerForPackagedMessagesFromCallMachine(e, this.callClientId);
            }
        },
        {
            key: "removeListenerForPackagedMessagesFromCallMachine",
            value: function(e) {
                this._messageChannel.removeListenerForPackagedMessagesFromCallMachine(e);
            }
        },
        {
            key: "handleMessageFromCallMachine",
            value: function(t) {
                switch(t.action){
                    case Fi:
                        this.sendMessageToCallMachine(Aa({
                            action: Bi
                        }, this.properties));
                        break;
                    case "call-machine-initialized":
                        this._callMachineInitialized = !0;
                        var n = {
                            action: Go,
                            level: "log",
                            code: 1011,
                            stats: {
                                event: "bundle load",
                                time: "no-op" === this._bundleLoadTime ? 0 : this._bundleLoadTime,
                                preLoaded: "no-op" === this._bundleLoadTime,
                                url: B(this.properties.dailyConfig)
                            }
                        };
                        this.sendMessageToCallMachine(n), this._delayDuplicateInstanceLog && this._logDuplicateInstanceAttempt();
                        break;
                    case $i:
                        this._loadedCallback && (this._loadedCallback(), this._loadedCallback = null), this.emitDailyJSEvent(t);
                        break;
                    case Hi:
                        var r, i = Aa({}, t);
                        delete i.internal, this._maxAppMessageSize = (null === (r = t.internal) || void 0 === r ? void 0 : r._maxAppMessageSize) || $o, this._joinedCallback && (this._joinedCallback(t.participants), this._joinedCallback = null), this.emitDailyJSEvent(i);
                        break;
                    case Qi:
                    case Ki:
                        if (this._callState === si) return;
                        if (t.participant && t.participant.session_id) {
                            var o = t.participant.local ? "local" : t.participant.session_id;
                            if (this._callObjectMode) {
                                var s = this._callMachine().store;
                                Zs(t.participant, s), ea(t.participant, s), na(t.participant, this._participants[o], s);
                            }
                            try {
                                this.maybeParticipantTracksStopped(this._participants[o], t.participant), this.maybeParticipantTracksStarted(this._participants[o], t.participant), this.maybeEventRecordingStopped(this._participants[o], t.participant), this.maybeEventRecordingStarted(this._participants[o], t.participant);
                            } catch (e) {
                                console.error("track events error", e);
                            }
                            this.compareEqualForParticipantUpdateEvent(t.participant, this._participants[o]) || (this._participants[o] = Aa({}, t.participant), this.toggleParticipantAudioBasedOnNativeAudioFocus(), this.emitDailyJSEvent(t));
                        }
                        break;
                    case Yi:
                        if (t.participant && t.participant.session_id) {
                            var a = this._participants[t.participant.session_id];
                            a && this.maybeParticipantTracksStopped(a, null), delete this._participants[t.participant.session_id], this.emitDailyJSEvent(t);
                        }
                        break;
                    case Xi:
                        S(this._participantCounts, t.participantCounts) || (this._participantCounts = t.participantCounts, this.emitDailyJSEvent(t));
                        break;
                    case Zi:
                        var c = {
                            access: t.access
                        };
                        t.awaitingAccess && (c.awaitingAccess = t.awaitingAccess), S(this._accessState, c) || (this._accessState = c, this.emitDailyJSEvent(t));
                        break;
                    case eo:
                        if (t.meetingSession) {
                            this._meetingSessionSummary = t.meetingSession, this.emitDailyJSEvent(t);
                            var l = Aa(Aa({}, t), {}, {
                                action: "meeting-session-updated"
                            });
                            this.emitDailyJSEvent(l);
                        }
                        break;
                    case Jo:
                        var u;
                        this._iframe && !t.preserveIframe && (this._iframe.src = ""), this._updateCallState(ai), this.resetMeetingDependentVars(), this._loadedCallback && (this._loadedCallback(t.errorMsg), this._loadedCallback = null), t.preserveIframe;
                        var d = e(t, Oa);
                        null != d && null !== (u = d.error) && void 0 !== u && u.details && (d.error.details = JSON.parse(d.error.details)), this._maybeSendToSentry(t), this._joinedCallback && (this._joinedCallback(null, d), this._joinedCallback = null), this.emitDailyJSEvent(d);
                        break;
                    case Gi:
                        this._callState !== ai && this._updateCallState(si), this.resetMeetingDependentVars(), this._resolveLeave && (this._resolveLeave(), this._resolveLeave = null), this.emitDailyJSEvent(t);
                        break;
                    case "selected-devices-updated":
                        t.devices && this.emitDailyJSEvent(t);
                        break;
                    case Oo:
                        var p = t.state, h = t.threshold, f = t.quality, v = p.state, g = p.reasons;
                        v === this._network.networkState && S(g, this._network.networkStateReasons) && h === this._network.threshold && f === this._network.quality || (this._network.networkState = v, this._network.networkStateReasons = g, this._network.quality = f, this._network.threshold = h, t.networkState = v, g.length && (t.networkStateReasons = g), delete t.state, this.emitDailyJSEvent(t));
                        break;
                    case Ao:
                        t && t.cpuLoadState && this.emitDailyJSEvent(t);
                        break;
                    case jo:
                        t && void 0 !== t.faceCounts && this.emitDailyJSEvent(t);
                        break;
                    case Eo:
                        var m = t.activeSpeaker;
                        this._activeSpeaker.peerId !== m.peerId && (this._activeSpeaker.peerId = m.peerId, this.emitDailyJSEvent({
                            action: t.action,
                            activeSpeaker: this._activeSpeaker
                        }));
                        break;
                    case "show-local-video-changed":
                        if (this._callObjectMode) return;
                        var y = t.show;
                        this._showLocalVideo = y, this.emitDailyJSEvent({
                            action: t.action,
                            show: y
                        });
                        break;
                    case To:
                        var b = t.enabled;
                        this._activeSpeakerMode !== b && (this._activeSpeakerMode = b, this.emitDailyJSEvent({
                            action: t.action,
                            enabled: this._activeSpeakerMode
                        }));
                        break;
                    case ro:
                    case io:
                    case oo:
                        this._waitingParticipants = t.allWaitingParticipants, this.emitDailyJSEvent({
                            action: t.action,
                            participant: t.participant
                        });
                        break;
                    case Bo:
                        S(this._receiveSettings, t.receiveSettings) || (this._receiveSettings = t.receiveSettings, this.emitDailyJSEvent({
                            action: t.action,
                            receiveSettings: t.receiveSettings
                        }));
                        break;
                    case Uo:
                        this._maybeUpdateInputSettings(t.inputSettings);
                        break;
                    case "send-settings-updated":
                        S(this._sendSettings, t.sendSettings) || (this._sendSettings = t.sendSettings, this._preloadCache.sendSettings = null, this.emitDailyJSEvent({
                            action: t.action,
                            sendSettings: t.sendSettings
                        }));
                        break;
                    case "local-audio-level":
                        this._localAudioLevel = t.audioLevel, this._preloadCache.localAudioLevelObserver = null, this.emitDailyJSEvent(t);
                        break;
                    case "remote-participants-audio-level":
                        this._remoteParticipantsAudioLevel = t.participantsAudioLevel, this._preloadCache.remoteParticipantsAudioLevelObserver = null, this.emitDailyJSEvent(t);
                        break;
                    case _o:
                        var _ = t.session_id;
                        this._rmpPlayerState[_] = t.playerState, this.emitDailyJSEvent(t);
                        break;
                    case So:
                        delete this._rmpPlayerState[t.session_id], this.emitDailyJSEvent(t);
                        break;
                    case wo:
                        var w = t.session_id, k = this._rmpPlayerState[w];
                        k && this.compareEqualForRMPUpdateEvent(k, t.remoteMediaPlayerState) || (this._rmpPlayerState[w] = t.remoteMediaPlayerState, this.emitDailyJSEvent(t));
                        break;
                    case "custom-button-click":
                    case "sidebar-view-changed":
                        this.emitDailyJSEvent(t);
                        break;
                    case to:
                        var M = this._meetingSessionState.topology !== (t.meetingSessionState && t.meetingSessionState.topology);
                        this._meetingSessionState = _c(t.meetingSessionState, this._callObjectMode), (this._callObjectMode || M) && this.emitDailyJSEvent(t);
                        break;
                    case ko:
                        this._isScreenSharing = !0, this.emitDailyJSEvent(t);
                        break;
                    case Mo:
                    case Co:
                        this._isScreenSharing = !1, this.emitDailyJSEvent(t);
                        break;
                    case po:
                    case ho:
                    case fo:
                    case vo:
                    case go:
                    case co:
                    case lo:
                    case uo:
                    case qi:
                    case zi:
                    case yo:
                    case bo:
                    case "test-completed":
                    case Po:
                    case mo:
                    case Lo:
                    case Do:
                    case No:
                    case Ro:
                    case Vo:
                    case Fo:
                    case "dialin-ready":
                    case "dialin-connected":
                    case "dialin-error":
                    case "dialin-stopped":
                    case "dialin-warning":
                    case "dialout-connected":
                    case "dialout-answered":
                    case "dialout-error":
                    case "dialout-stopped":
                    case "dialout-warning":
                        this.emitDailyJSEvent(t);
                        break;
                    case "request-fullscreen":
                        this.requestFullscreen();
                        break;
                    case "request-exit-fullscreen":
                        this.exitFullscreen();
                }
            }
        },
        {
            key: "maybeEventRecordingStopped",
            value: function(e, t) {
                var n = "record";
                e && (t.local || !1 !== t[n] || e[n] === t[n] || this.emitDailyJSEvent({
                    action: ho
                }));
            }
        },
        {
            key: "maybeEventRecordingStarted",
            value: function(e, t) {
                var n = "record";
                e && (t.local || !0 !== t[n] || e[n] === t[n] || this.emitDailyJSEvent({
                    action: po
                }));
            }
        },
        {
            key: "_trackStatePlayable",
            value: function(e) {
                return !(!e || e.state !== hi);
            }
        },
        {
            key: "_trackChanged",
            value: function(e, t) {
                return !((null == e ? void 0 : e.id) === (null == t ? void 0 : t.id));
            }
        },
        {
            key: "maybeEventTrackStopped",
            value: function(e, t, n) {
                var r, i, o = null !== (r = null == t ? void 0 : t.tracks[e]) && void 0 !== r ? r : null, s = null !== (i = null == n ? void 0 : n.tracks[e]) && void 0 !== i ? i : null, a = null == o ? void 0 : o.track;
                if (a) {
                    var c = this._trackStatePlayable(o), l = this._trackStatePlayable(s), u = this._trackChanged(a, null == s ? void 0 : s.track);
                    c && (l && !u || this.emitDailyJSEvent({
                        action: ao,
                        track: a,
                        participant: null != n ? n : t,
                        type: e
                    }));
                }
            }
        },
        {
            key: "maybeEventTrackStarted",
            value: function(e, t, n) {
                var r, i, o = null !== (r = null == t ? void 0 : t.tracks[e]) && void 0 !== r ? r : null, s = null !== (i = null == n ? void 0 : n.tracks[e]) && void 0 !== i ? i : null, a = null == s ? void 0 : s.track;
                if (a) {
                    var c = this._trackStatePlayable(o), l = this._trackStatePlayable(s), u = this._trackChanged(null == o ? void 0 : o.track, a);
                    l && (c && !u || this.emitDailyJSEvent({
                        action: so,
                        track: a,
                        participant: n,
                        type: e
                    }));
                }
            }
        },
        {
            key: "maybeParticipantTracksStopped",
            value: function(e, t) {
                if (e) for(var n in e.tracks)this.maybeEventTrackStopped(n, e, t);
            }
        },
        {
            key: "maybeParticipantTracksStarted",
            value: function(e, t) {
                if (t) for(var n in t.tracks)this.maybeEventTrackStarted(n, e, t);
            }
        },
        {
            key: "compareEqualForRMPUpdateEvent",
            value: function(e, t) {
                var n, r;
                return e.state === t.state && (null === (n = e.settings) || void 0 === n ? void 0 : n.volume) === (null === (r = t.settings) || void 0 === r ? void 0 : r.volume);
            }
        },
        {
            key: "emitDailyJSEvent",
            value: function(e) {
                try {
                    e.callClientId = this.callClientId, this.emit(e.action, e);
                } catch (t) {
                    console.log("could not emit", e, t);
                }
            }
        },
        {
            key: "compareEqualForParticipantUpdateEvent",
            value: function(e, t) {
                return !!S(e, t) && (!e.videoTrack || !t.videoTrack || e.videoTrack.id === t.videoTrack.id && e.videoTrack.muted === t.videoTrack.muted && e.videoTrack.enabled === t.videoTrack.enabled) && (!e.audioTrack || !t.audioTrack || e.audioTrack.id === t.audioTrack.id && e.audioTrack.muted === t.audioTrack.muted && e.audioTrack.enabled === t.audioTrack.enabled);
            }
        },
        {
            key: "nativeUtils",
            value: function() {
                return is() ? "undefined" == typeof DailyNativeUtils ? (console.warn("in React Native, DailyNativeUtils is expected to be available"), null) : DailyNativeUtils : null;
            }
        },
        {
            key: "updateIsPreparingToJoin",
            value: function(e) {
                this._updateCallState(this._callState, e);
            }
        },
        {
            key: "_updateCallState",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._isPreparingToJoin;
                if (e !== this._callState || t !== this._isPreparingToJoin) {
                    var n = this._callState, r = this._isPreparingToJoin;
                    this._callState = e, this._isPreparingToJoin = t;
                    var i = this._callState === oi;
                    this.updateShowAndroidOngoingMeetingNotification(i);
                    var o = Ka(n, r), s = Ka(this._callState, this._isPreparingToJoin);
                    o !== s && (this.updateKeepDeviceAwake(s), this.updateDeviceAudioMode(s), this.updateNoOpRecordingEnsuringBackgroundContinuity(s));
                }
            }
        },
        {
            key: "resetMeetingDependentVars",
            value: function() {
                this._participants = {}, this._participantCounts = Fa, this._waitingParticipants = {}, this._activeSpeaker = {}, this._activeSpeakerMode = !1, this._didPreAuth = !1, this._accessState = {
                    access: fi
                }, this._finalSummaryOfPrevSession = this._meetingSessionSummary, this._meetingSessionSummary = {}, this._meetingSessionState = _c(Ra, this._callObjectMode), this._isScreenSharing = !1, this._receiveSettings = {}, this._inputSettings = void 0, this._sendSettings = {}, this._localAudioLevel = 0, this._isLocalAudioLevelObserverRunning = !1, this._remoteParticipantsAudioLevel = {}, this._isRemoteParticipantsAudioLevelObserverRunning = !1, this._maxAppMessageSize = $o, this._callMachineInitialized = !1, this._bundleLoadTime = void 0, this._preloadCache;
            }
        },
        {
            key: "updateKeepDeviceAwake",
            value: function(e) {
                is() && this.nativeUtils().setKeepDeviceAwake(e, this.callClientId);
            }
        },
        {
            key: "updateDeviceAudioMode",
            value: function(e) {
                if (is() && !this.disableReactNativeAutoDeviceManagement("audio")) {
                    var t = e ? this._nativeInCallAudioMode : "idle";
                    this.nativeUtils().setAudioMode(t);
                }
            }
        },
        {
            key: "updateShowAndroidOngoingMeetingNotification",
            value: function(e) {
                if (is() && this.nativeUtils().setShowOngoingMeetingNotification) {
                    var t, n, r, i;
                    if (this.properties.reactNativeConfig && this.properties.reactNativeConfig.androidInCallNotification) {
                        var o = this.properties.reactNativeConfig.androidInCallNotification;
                        t = o.title, n = o.subtitle, r = o.iconName, i = o.disableForCustomOverride;
                    }
                    i && (e = !1), this.nativeUtils().setShowOngoingMeetingNotification(e, t, n, r, this.callClientId);
                }
            }
        },
        {
            key: "updateNoOpRecordingEnsuringBackgroundContinuity",
            value: function(e) {
                is() && this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity && this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity(e);
            }
        },
        {
            key: "toggleParticipantAudioBasedOnNativeAudioFocus",
            value: function() {
                var e;
                if (is()) {
                    var t = null === (e = this._callMachine()) || void 0 === e || null === (e = e.store) || void 0 === e ? void 0 : e.getState();
                    for(var n in null == t ? void 0 : t.streams){
                        var r = t.streams[n];
                        r && r.pendingTrack && "audio" === r.pendingTrack.kind && (r.pendingTrack.enabled = this._hasNativeAudioFocus);
                    }
                }
            }
        },
        {
            key: "disableReactNativeAutoDeviceManagement",
            value: function(e) {
                return this.properties.reactNativeConfig && this.properties.reactNativeConfig.disableAutoDeviceManagement && this.properties.reactNativeConfig.disableAutoDeviceManagement[e];
            }
        },
        {
            key: "absoluteUrl",
            value: function(e) {
                if (void 0 !== e) {
                    var t = document.createElement("a");
                    return t.href = e, t.href;
                }
            }
        },
        {
            key: "sayHello",
            value: function() {
                var e = "hello, world.";
                return console.log(e), e;
            }
        },
        {
            key: "_logUseAfterDestroy",
            value: function() {
                var e = Object.values(La)[0];
                if (this.needsLoad()) {
                    if (e && !e.needsLoad()) {
                        var t = {
                            action: Go,
                            level: "error",
                            code: this.strictMode ? 9995 : 9997
                        };
                        e.sendMessageToCallMachine(t);
                    } else if (!this.strictMode) {
                        console.error("You are are attempting to use a call instance that was previously destroyed, which is unsupported. Please remove `strictMode: false` from your constructor properties to enable strict mode to track down and fix this unsupported usage.");
                    }
                } else {
                    var n = {
                        action: Go,
                        level: "error",
                        code: this.strictMode ? 9995 : 9997
                    };
                    this._messageChannel.sendMessageToCallMachine(n, null, this.callClientId, this._iframe);
                }
            }
        },
        {
            key: "_logDuplicateInstanceAttempt",
            value: function() {
                for(var e = 0, t = Object.values(La); e < t.length; e++){
                    var n = t[e];
                    n._callMachineInitialized ? (n.sendMessageToCallMachine({
                        action: Go,
                        level: "warn",
                        code: this.allowMultipleCallInstances ? 9993 : 9992
                    }), n._delayDuplicateInstanceLog = !1) : n._delayDuplicateInstanceLog = !0;
                }
            }
        },
        {
            key: "_maybeSendToSentry",
            value: function(e) {
                var t, n, i, o;
                if (null !== (t = e.error) && void 0 !== t && t.type) {
                    if (![
                        Pi,
                        Ti,
                        Ci
                    ].includes(e.error.type)) return;
                    if (e.error.type === Ci && e.error.msg.includes("deleted")) return;
                }
                var s = null !== (n = this.properties) && void 0 !== n && n.url ? new URL(this.properties.url) : void 0, a = "production";
                s && s.host.includes(".staging.daily") && (a = "staging");
                var c, l, u, d, p, h = (function(e) {
                    const t = [
                        Ln(),
                        In(),
                        qr(),
                        Jr(),
                        Kr(),
                        ei(),
                        $n(),
                        Zr()
                    ];
                    return !1 !== e.autoSessionTracking && t.push(Qr()), t;
                })({}).filter(function(e) {
                    return ![
                        "BrowserApiErrors",
                        "Breadcrumbs",
                        "GlobalHandlers"
                    ].includes(e.name);
                }), f = new mr({
                    dsn: "https://f10f1c81e5d44a4098416c0867a8b740@o77906.ingest.sentry.io/168844",
                    transport: Ir,
                    stackParser: Br,
                    integrations: h,
                    environment: a
                }), v = new ut;
                if (v.setClient(f), f.init(), this.session_id && v.setExtra("sessionId", this.session_id), this.properties) {
                    var g = Aa({}, this.properties);
                    g.userName = g.userName ? "[Filtered]" : void 0, g.userData = g.userData ? "[Filtered]" : void 0, g.token = g.token ? "[Filtered]" : void 0, v.setExtra("properties", g);
                }
                if (s) {
                    var m = s.searchParams.get("domain");
                    if (!m) {
                        var y = s.host.match(/(.*?)\./);
                        m = y && y[1] || "";
                    }
                    m && v.setTag("domain", m);
                }
                e.error && (v.setTag("fatalErrorType", e.error.type), v.setExtra("errorDetails", e.error.details), (null === (c = e.error.details) || void 0 === c ? void 0 : c.uri) && v.setTag("serverAddress", e.error.details.uri), (null === (l = e.error.details) || void 0 === l ? void 0 : l.workerGroup) && v.setTag("workerGroup", e.error.details.workerGroup), (null === (u = e.error.details) || void 0 === u ? void 0 : u.geoGroup) && v.setTag("geoGroup", e.error.details.geoGroup), (null === (d = e.error.details) || void 0 === d ? void 0 : d.on) && v.setTag("connectionAttempt", e.error.details.on), null !== (p = e.error.details) && void 0 !== p && p.bundleUrl && (v.setTag("bundleUrl", e.error.details.bundleUrl), v.setTag("bundleError", e.error.details.sourceError.type)));
                v.setTags({
                    callMode: this._callObjectMode ? is() ? "reactNative" : null !== (i = this.properties) && void 0 !== i && null !== (i = i.dailyConfig) && void 0 !== i && null !== (i = i.callMode) && void 0 !== i && i.includes("prebuilt") ? this.properties.dailyConfig.callMode : "custom" : "prebuilt-frame",
                    version: r.version()
                });
                var b = (null === (o = e.error) || void 0 === o ? void 0 : o.msg) || e.errorMsg;
                v.captureException(new Error(b));
            }
        },
        {
            key: "_callMachine",
            value: function() {
                var e;
                return null === (e = window._daily) || void 0 === e || null === (e = e.instances) || void 0 === e || null === (e = e[this.callClientId]) || void 0 === e ? void 0 : e.callMachine;
            }
        },
        {
            key: "_maybeUpdateInputSettings",
            value: function(e) {
                if (!S(this._inputSettings, e)) {
                    var t = this._getInputSettings();
                    this._inputSettings = e;
                    var n = this._getInputSettings();
                    S(t, n) || this.emitDailyJSEvent({
                        action: Uo,
                        inputSettings: n
                    });
                }
            }
        }
    ], [
        {
            key: "supportedBrowser",
            value: function() {
                if (is()) return {
                    supported: !0,
                    mobile: !0,
                    name: "React Native",
                    version: null,
                    supportsScreenShare: !0,
                    supportsSfu: !0,
                    supportsVideoProcessing: !1,
                    supportsAudioProcessing: !1
                };
                var e = D.getParser(rs());
                return {
                    supported: !!fs(),
                    mobile: "mobile" === e.getPlatformType(),
                    name: e.getBrowserName(),
                    version: e.getBrowserVersion(),
                    supportsFullscreen: !!as(),
                    supportsScreenShare: !!ss(),
                    supportsSfu: !!fs(),
                    supportsVideoProcessing: ps(),
                    supportsAudioProcessing: hs()
                };
            }
        },
        {
            key: "version",
            value: function() {
                return "0.80.0";
            }
        },
        {
            key: "createCallObject",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                return e.layout = "none", new r(null, e);
            }
        },
        {
            key: "wrap",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                if (nc(), !e || !e.contentWindow || "string" != typeof e.src) throw new Error("DailyIframe::Wrap needs an iframe-like first argument");
                return t.layout || (t.customLayout ? t.layout = "custom-v1" : t.layout = "browser"), new r(e, t);
            }
        },
        {
            key: "createFrame",
            value: function(e, t) {
                var n, i;
                nc(), e && t ? (n = e, i = t) : e && e.append ? (n = e, i = {}) : (n = document.body, i = e || {});
                var o = i.iframeStyle;
                o || (o = n === document.body ? {
                    position: "fixed",
                    border: "1px solid black",
                    backgroundColor: "white",
                    width: "375px",
                    height: "450px",
                    right: "1em",
                    bottom: "1em"
                } : {
                    border: 0,
                    width: "100%",
                    height: "100%"
                });
                var s = document.createElement("iframe");
                window.navigator && window.navigator.userAgent.match(/Chrome\/61\./) ? s.allow = "microphone, camera" : s.allow = "microphone; camera; autoplay; display-capture; screen-wake-lock", s.style.visibility = "hidden", n.appendChild(s), s.style.visibility = null, Object.keys(o).forEach(function(e) {
                    return s.style[e] = o[e];
                }), i.layout || (i.customLayout ? i.layout = "custom-v1" : i.layout = "browser");
                try {
                    return new r(s, i);
                } catch (e) {
                    throw n.removeChild(s), e;
                }
            }
        },
        {
            key: "createTransparentFrame",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                nc();
                var t = document.createElement("iframe");
                return t.allow = "microphone; camera; autoplay", t.style.cssText = "\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border: 0;\n      pointer-events: none;\n    ", document.body.appendChild(t), e.layout || (e.layout = "custom-v1"), r.wrap(t, e);
            }
        },
        {
            key: "getCallInstance",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                return e ? La[e] : Object.values(La)[0];
            }
        }
    ]);
    "TURBOPACK unreachable";
    var i, c, d, h, v, g, m, y, _, w, k, M, C, E, T, O, P, A, j, I, x, L, R, U, V, J, $, q, z, W, H, G, Q, K, Y, X, Z, ee;
}();
function Ga(e, t) {
    var n = {};
    for(var r in e)if (e[r] instanceof MediaStreamTrack) console.warn("MediaStreamTrack found in props or cache.", r), n[r] = Qo;
    else if ("dailyConfig" === r) {
        if (e[r].modifyLocalSdpHook) {
            var i = window._daily.instances[t].customCallbacks || {};
            i.modifyLocalSdpHook = e[r].modifyLocalSdpHook, window._daily.instances[t].customCallbacks = i, delete e[r].modifyLocalSdpHook;
        }
        if (e[r].modifyRemoteSdpHook) {
            var o = window._daily.instances[t].customCallbacks || {};
            o.modifyRemoteSdpHook = e[r].modifyRemoteSdpHook, window._daily.instances[t].customCallbacks = o, delete e[r].modifyRemoteSdpHook;
        }
        n[r] = e[r];
    } else n[r] = e[r];
    return n;
}
function Qa(e) {
    var t = arguments.length > 2 ? arguments[2] : void 0;
    if (e !== oi) {
        var n = "".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " only supported after join.");
        throw t && (n += " ".concat(t)), console.error(n), new Error(n);
    }
}
function Ka(e, t) {
    return [
        ii,
        oi
    ].includes(e) || t;
}
function Ya(e, t) {
    var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "This daily-js method", r = arguments.length > 3 ? arguments[3] : void 0;
    if (Ka(e, t)) {
        var i = "".concat(n, " not supported after joining a meeting.");
        throw r && (i += " ".concat(r)), console.error(i), new Error(i);
    }
}
function Xa(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", n = arguments.length > 2 ? arguments[2] : void 0;
    if (!e) {
        var r = "".concat(t, arguments.length > 3 && void 0 !== arguments[3] && arguments[3] ? " requires preAuth() or startCamera() to initialize call state." : " requires preAuth(), startCamera(), or join() to initialize call state.");
        throw n && (r += " ".concat(n)), console.error(r), new Error(r);
    }
}
function Za(e) {
    if (e) {
        var t = "A pre-call quality test is in progress. Please try ".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " again once testing has completed. Use stopTestCallQuality() to end it early.");
        throw console.error(t), new Error(t);
    }
}
function ec(e) {
    if (!e) {
        var t = "".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " is only supported on custom callObject instances");
        throw console.error(t), new Error(t);
    }
}
function tc(e) {
    if (e) {
        var t = "".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " is only supported as part of Daily's Prebuilt");
        throw console.error(t), new Error(t);
    }
}
function nc() {
    if (is()) throw new Error("This daily-js method is not currently supported in React Native");
}
function rc() {
    if (!is()) throw new Error("This daily-js method is only supported in React Native");
}
function ic(e) {
    if (void 0 === e) return !0;
    var t;
    if ("string" == typeof e) t = e;
    else try {
        t = JSON.stringify(e), S(JSON.parse(t), e) || console.warn("The userData provided will be modified when serialized.");
    } catch (e) {
        throw Error("userData must be serializable to JSON: ".concat(e));
    }
    if (t.length > 4096) throw Error("userData is too large (".concat(t.length, " characters). Maximum size suppported is ").concat(4096, "."));
    return !0;
}
function oc(e, t) {
    for(var n = t.allowAllParticipantsKey, r = function(e) {
        var t = [
            "local"
        ];
        return n || t.push("*"), e && !t.includes(e);
    }, i = function(e) {
        return !!(void 0 === e.layer || Number.isInteger(e.layer) && e.layer >= 0 || "inherit" === e.layer);
    }, o = function(e) {
        return !!e && !(e.video && !i(e.video)) && !(e.screenVideo && !i(e.screenVideo));
    }, s = 0, a = Object.entries(e); s < a.length; s++){
        var c = f(a[s], 2), l = c[0], u = c[1];
        if (!r(l) || !o(u)) return !1;
    }
    return !0;
}
function sc(e) {
    if ("object" !== n(e)) return !1;
    for(var t = 0, r = Object.entries(e); t < r.length; t++){
        var i = f(r[t], 2), o = i[0], s = i[1];
        switch(o){
            case "video":
                if ("object" !== n(s)) return !1;
                for(var a = 0, c = Object.entries(s); a < c.length; a++){
                    var l = f(c[a], 2), u = l[0], d = l[1];
                    switch(u){
                        case "processor":
                            if (!lc(d)) return !1;
                            break;
                        case "settings":
                            if (!uc(d)) return !1;
                            break;
                        default:
                            return !1;
                    }
                }
                break;
            case "audio":
                if ("object" !== n(s)) return !1;
                for(var p = 0, h = Object.entries(s); p < h.length; p++){
                    var v = f(h[p], 2), g = v[0], m = v[1];
                    switch(g){
                        case "processor":
                            if (!cc(m)) return !1;
                            break;
                        case "settings":
                            if (!uc(m)) return !1;
                            break;
                        default:
                            return !1;
                    }
                }
                break;
            default:
                return !1;
        }
    }
    return !0;
}
function ac(e, t, n) {
    var r, i = [];
    e.video && e.video.processor && (ps(null !== (r = null == t ? void 0 : t.useLegacyVideoProcessor) && void 0 !== r && r) || (e.video.settings ? delete e.video.processor : delete e.video, i.push("video")));
    e.audio && e.audio.processor && (hs() || (e.audio.settings ? delete e.audio.processor : delete e.audio, i.push("audio"))), i.length > 0 && console.error("Ignoring settings for browser- or platform-unsupported input processor(s): ".concat(i.join(", "))), e.audio && e.audio.settings && (e.audio.settings.customTrack ? (n.audioTrack = e.audio.settings.customTrack, e.audio.settings = {
        customTrack: Qo
    }) : delete n.audioTrack), e.video && e.video.settings && (e.video.settings.customTrack ? (n.videoTrack = e.video.settings.customTrack, e.video.settings = {
        customTrack: Qo
    }) : delete n.videoTrack);
}
function cc(e) {
    if (is()) return console.warn("Video processing is not yet supported in React Native"), !1;
    var t = [
        "type"
    ];
    return !!e && "object" === n(e) && (Object.keys(e).filter(function(e) {
        return !t.includes(e);
    }).forEach(function(t) {
        console.warn("invalid key inputSettings -> audio -> processor : ".concat(t)), delete e[t];
    }), !!function(e) {
        if ("string" != typeof e) return !1;
        if (!Object.values(Yo).includes(e)) return console.error("inputSettings audio processor type invalid"), !1;
        return !0;
    }(e.type));
}
function lc(e) {
    if (is()) return console.warn("Video processing is not yet supported in React Native"), !1;
    var t = [
        "type",
        "config"
    ];
    if (!e) return !1;
    if ("object" !== n(e)) return !1;
    if (!function(e) {
        if ("string" != typeof e) return !1;
        if (!Object.values(Ko).includes(e)) return console.error("inputSettings video processor type invalid"), !1;
        return !0;
    }(e.type)) return !1;
    if (e.config) {
        if ("object" !== n(e.config)) return !1;
        if (!function(e, t) {
            var n = Object.keys(t);
            if (0 === n.length) return !0;
            var r = "invalid object in inputSettings -> video -> processor -> config";
            switch(e){
                case Ko.BGBLUR:
                    return n.length > 1 || "strength" !== n[0] ? (console.error(r), !1) : !("number" != typeof t.strength || t.strength <= 0 || t.strength > 1 || isNaN(t.strength)) || (console.error("".concat(r, "; expected: {0 < strength <= 1}, got: ").concat(t.strength)), !1);
                case Ko.BGIMAGE:
                    return !(void 0 !== t.source && !function(e) {
                        if ("default" === e.source) return e.type = "default", !0;
                        if (e.source instanceof ArrayBuffer) return !0;
                        if (U(e.source)) return e.type = "url", !!function(e) {
                            var t = new URL(e), n = t.pathname;
                            if ("data:" === t.protocol) try {
                                var r = n.substring(n.indexOf(":") + 1, n.indexOf(";")).split("/")[1];
                                return Zo.includes(r);
                            } catch (e) {
                                return console.error("failed to deduce blob content type", e), !1;
                            }
                            var i = n.split(".").at(-1).toLowerCase().trim();
                            return Zo.includes(i);
                        }(e.source) || (console.error("invalid image type; supported types: [".concat(Zo.join(", "), "]")), !1);
                        return t = e.source, n = Number(t), isNaN(n) || !Number.isInteger(n) || n <= 0 || n > 10 ? (console.error("invalid image selection; must be an int, > 0, <= ".concat(10)), !1) : (e.type = "daily-preselect", !0);
                        "TURBOPACK unreachable";
                        var t, n;
                    }(t));
                default:
                    return !0;
            }
        }(e.type, e.config)) return !1;
    }
    return Object.keys(e).filter(function(e) {
        return !t.includes(e);
    }).forEach(function(t) {
        console.warn("invalid key inputSettings -> video -> processor : ".concat(t)), delete e[t];
    }), !0;
}
function uc(e) {
    return "object" === n(e) && (!e.customTrack || e.customTrack instanceof MediaStreamTrack);
}
function dc() {
    var e = Object.values(Ko).join(" | "), t = Object.values(Yo).join(" | ");
    return "inputSettings must be of the form: { video?: { processor?: { type: [ ".concat(e, " ], config?: {} } }, audio?: { processor: {type: [ ").concat(t, " ] } } }");
}
function pc(e) {
    var t = e.allowAllParticipantsKey;
    return "receiveSettings must be of the form { [<remote participant id> | ".concat(yi).concat(t ? ' | "'.concat("*", '"') : "", "]: ") + '{ [video: [{ layer: [<non-negative integer> | "inherit"] } | "inherit"]], [screenVideo: [{ layer: [<non-negative integer> | "inherit"] } | "inherit"]] }}}';
}
function hc() {
    return "customIntegrations should be an object of type ".concat(JSON.stringify(qa), ".");
}
function fc(e) {
    if (e && "object" !== n(e) || Array.isArray(e)) return console.error("customTrayButtons should be an Object of the type ".concat(JSON.stringify($a), ".")), !1;
    if (e) for(var t = 0, r = Object.entries(e); t < r.length; t++)for(var i = f(r[t], 1)[0], o = 0, s = Object.entries(e[i]); o < s.length; o++){
        var a = f(s[o], 2), c = a[0], l = a[1], u = $a.id[c];
        if (!u) return console.error("customTrayButton does not support key ".concat(c)), !1;
        switch(c){
            case "iconPath":
            case "iconPathDarkMode":
                if (!U(l)) return console.error("customTrayButton ".concat(c, " should be a url.")), !1;
                break;
            case "visualState":
                if (![
                    "default",
                    "sidebar-open",
                    "active"
                ].includes(l)) return console.error("customTrayButton ".concat(c, " should be ").concat(u, ". Got: ").concat(l)), !1;
                break;
            default:
                if (n(l) !== u) return console.error("customTrayButton ".concat(c, " should be a ").concat(u, ".")), !1;
        }
    }
    return !0;
}
function vc(e) {
    if (!e || e && "object" !== n(e) || Array.isArray(e)) return console.error(hc()), !1;
    for(var t = function(e) {
        return "".concat(e, " should be ").concat(qa.id[e]);
    }, r = function(e, t) {
        return console.error("customIntegration ".concat(e, ": ").concat(t));
    }, i = 0, o = Object.entries(e); i < o.length; i++){
        var s = f(o[i], 1)[0];
        if (!("label" in e[s])) return r(s, "label is required"), !1;
        if (!("location" in e[s])) return r(s, "location is required"), !1;
        if (!("src" in e[s]) && !("srcdoc" in e[s])) return r(s, "src or srcdoc is required"), !1;
        for(var a = 0, c = Object.entries(e[s]); a < c.length; a++){
            var l = f(c[a], 2), u = l[0], d = l[1];
            switch(u){
                case "allow":
                case "csp":
                case "name":
                case "referrerPolicy":
                case "sandbox":
                    if ("string" != typeof d) return r(s, t(u)), !1;
                    break;
                case "iconURL":
                    if (!U(d)) return r(s, "".concat(u, " should be a url")), !1;
                    break;
                case "src":
                    if ("srcdoc" in e[s]) return r(s, "cannot have both src and srcdoc"), !1;
                    if (!U(d)) return r(s, 'src "'.concat(d, '" is not a valid URL')), !1;
                    break;
                case "srcdoc":
                    if ("src" in e[s]) return r(s, "cannot have both src and srcdoc"), !1;
                    if ("string" != typeof d) return r(s, t(u)), !1;
                    break;
                case "location":
                    if (![
                        "main",
                        "sidebar"
                    ].includes(d)) return r(s, t(u)), !1;
                    break;
                case "controlledBy":
                    if ("*" !== d && "owners" !== d && (!Array.isArray(d) || d.some(function(e) {
                        return "string" != typeof e;
                    }))) return r(s, t(u)), !1;
                    break;
                case "shared":
                    if ((!Array.isArray(d) || d.some(function(e) {
                        return "string" != typeof e;
                    })) && "owners" !== d && "boolean" != typeof d) return r(s, t(u)), !1;
                    break;
                default:
                    if (!qa.id[u]) return console.error("customIntegration does not support key ".concat(u)), !1;
            }
        }
    }
    return !0;
}
function gc(e, t) {
    if (void 0 === t) return !1;
    switch(n(t)){
        case "string":
            return n(e) === t;
        case "object":
            if ("object" !== n(e)) return !1;
            for(var r in e)if (!gc(e[r], t[r])) return !1;
            return !0;
        default:
            return !1;
    }
}
function mc(e, t) {
    var n = e.sessionId, r = e.toEndPoint, i = e.callerId, o = e.useSipRefer;
    if (!n || !r) throw new Error("".concat(t, "() requires a sessionId and toEndPoint"));
    if ("string" != typeof n || "string" != typeof r) throw new Error("Invalid paramater: sessionId and toEndPoint must be of type string");
    if (o && !r.startsWith("sip:")) throw new Error('"toEndPoint" must be a "sip" address');
    if (!r.startsWith("sip:") && !r.startsWith("+")) throw new Error("toEndPoint: ".concat(r, ' must starts with either "sip:" or "+"'));
    if (i && "string" != typeof i) throw new Error("callerId must be of type string");
    if (i && !r.startsWith("+")) throw new Error("callerId is only valid when transferring to a PSTN number");
}
function yc(e) {
    if ("object" !== n(e)) throw new Error('RemoteMediaPlayerSettings: must be "object" type');
    if (e.state && !Object.values(Xo).includes(e.state)) throw new Error("Invalid value for RemoteMediaPlayerSettings.state, valid values are: " + JSON.stringify(Xo));
    if (e.volume) {
        if ("number" != typeof e.volume) throw new Error('RemoteMediaPlayerSettings.volume: must be "number" type');
        if (e.volume < 0 || e.volume > 2) throw new Error("RemoteMediaPlayerSettings.volume: must be between 0.0 - 2.0");
    }
}
function bc(e, t, n) {
    return !("number" != typeof e || e < t || e > n);
}
function _c(e, t) {
    return e && !t && delete e.data, e;
}
;
}}),
"[project]/node_modules/@vapi-ai/web/dist/api.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/* eslint-disable */ /* tslint:disable */ // @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Api = exports.HttpClient = exports.ContentType = void 0;
var ContentType;
(function(ContentType) {
    ContentType["Json"] = "application/json";
    ContentType["JsonApi"] = "application/vnd.api+json";
    ContentType["FormData"] = "multipart/form-data";
    ContentType["UrlEncoded"] = "application/x-www-form-urlencoded";
    ContentType["Text"] = "text/plain";
})(ContentType || (exports.ContentType = ContentType = {}));
class HttpClient {
    baseUrl = "https://api.vapi.ai";
    securityData = null;
    securityWorker;
    abortControllers = new Map();
    customFetch = (...fetchParams)=>fetch(...fetchParams);
    baseApiParams = {
        credentials: "same-origin",
        headers: {},
        redirect: "follow",
        referrerPolicy: "no-referrer"
    };
    constructor(apiConfig = {}){
        Object.assign(this, apiConfig);
    }
    setSecurityData = (data)=>{
        this.securityData = data;
    };
    encodeQueryParam(key, value) {
        const encodedKey = encodeURIComponent(key);
        return `${encodedKey}=${encodeURIComponent(typeof value === "number" ? value : `${value}`)}`;
    }
    addQueryParam(query, key) {
        return this.encodeQueryParam(key, query[key]);
    }
    addArrayQueryParam(query, key) {
        const value = query[key];
        return value.map((v)=>this.encodeQueryParam(key, v)).join("&");
    }
    toQueryString(rawQuery) {
        const query = rawQuery || {};
        const keys = Object.keys(query).filter((key)=>"undefined" !== typeof query[key]);
        return keys.map((key)=>Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)).join("&");
    }
    addQueryParams(rawQuery) {
        const queryString = this.toQueryString(rawQuery);
        return queryString ? `?${queryString}` : "";
    }
    contentFormatters = {
        [ContentType.Json]: (input)=>input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
        [ContentType.JsonApi]: (input)=>input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
        [ContentType.Text]: (input)=>input !== null && typeof input !== "string" ? JSON.stringify(input) : input,
        [ContentType.FormData]: (input)=>Object.keys(input || {}).reduce((formData, key)=>{
                const property = input[key];
                formData.append(key, property instanceof Blob ? property : typeof property === "object" && property !== null ? JSON.stringify(property) : `${property}`);
                return formData;
            }, new FormData()),
        [ContentType.UrlEncoded]: (input)=>this.toQueryString(input)
    };
    mergeRequestParams(params1, params2) {
        return {
            ...this.baseApiParams,
            ...params1,
            ...params2 || {},
            headers: {
                ...this.baseApiParams.headers || {},
                ...params1.headers || {},
                ...params2 && params2.headers || {}
            }
        };
    }
    createAbortSignal = (cancelToken)=>{
        if (this.abortControllers.has(cancelToken)) {
            const abortController = this.abortControllers.get(cancelToken);
            if (abortController) {
                return abortController.signal;
            }
            return void 0;
        }
        const abortController = new AbortController();
        this.abortControllers.set(cancelToken, abortController);
        return abortController.signal;
    };
    abortRequest = (cancelToken)=>{
        const abortController = this.abortControllers.get(cancelToken);
        if (abortController) {
            abortController.abort();
            this.abortControllers.delete(cancelToken);
        }
    };
    request = async ({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params })=>{
        const secureParams = (typeof secure === "boolean" ? secure : this.baseApiParams.secure) && this.securityWorker && await this.securityWorker(this.securityData) || {};
        const requestParams = this.mergeRequestParams(params, secureParams);
        const queryString = query && this.toQueryString(query);
        const payloadFormatter = this.contentFormatters[type || ContentType.Json];
        const responseFormat = format || requestParams.format;
        return this.customFetch(`${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`, {
            ...requestParams,
            headers: {
                ...requestParams.headers || {},
                ...type && type !== ContentType.FormData ? {
                    "Content-Type": type
                } : {}
            },
            signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
            body: typeof body === "undefined" || body === null ? null : payloadFormatter(body)
        }).then(async (response)=>{
            const r = response.clone();
            r.data = null;
            r.error = null;
            const data = !responseFormat ? r : await response[responseFormat]().then((data)=>{
                if (r.ok) {
                    r.data = data;
                } else {
                    r.error = data;
                }
                return r;
            }).catch((e)=>{
                r.error = e;
                return r;
            });
            if (cancelToken) {
                this.abortControllers.delete(cancelToken);
            }
            if (!response.ok) throw data;
            return data;
        });
    };
}
exports.HttpClient = HttpClient;
/**
 * @title Vapi API
 * @version 1.0
 * @baseUrl https://api.vapi.ai
 * @contact
 *
 * Voice AI for developers.
 */ class Api extends HttpClient {
    call = {
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerCreate
         * @summary Create Call
         * @request POST:/call
         * @secure
         */ callControllerCreate: (data, params = {})=>this.request({
                path: `/call`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerFindAll
         * @summary List Calls
         * @request GET:/call
         * @secure
         */ callControllerFindAll: (query, params = {})=>this.request({
                path: `/call`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerFindOne
         * @summary Get Call
         * @request GET:/call/{id}
         * @secure
         */ callControllerFindOne: (id, params = {})=>this.request({
                path: `/call/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerUpdate
         * @summary Update Call
         * @request PATCH:/call/{id}
         * @secure
         */ callControllerUpdate: (id, data, params = {})=>this.request({
                path: `/call/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerDeleteCallData
         * @summary Delete Call Data
         * @request DELETE:/call/{id}
         * @secure
         */ callControllerDeleteCallData: (id, params = {})=>this.request({
                path: `/call/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerCreatePhoneCall
         * @summary Create Phone Call
         * @request POST:/call/phone
         * @deprecated
         * @secure
         */ callControllerCreatePhoneCall: (data, params = {})=>this.request({
                path: `/call/phone`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerCreateWebCall
         * @summary Create Web Call
         * @request POST:/call/web
         * @secure
         */ callControllerCreateWebCall: (data, params = {})=>this.request({
                path: `/call/web`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            })
    };
    v2 = {
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerExportCalls
         * @summary Export Calls to CSV
         * @request GET:/v2/call/export
         * @secure
         */ callControllerExportCalls: (query, params = {})=>this.request({
                path: `/v2/call/export`,
                method: "GET",
                query: query,
                secure: true,
                ...params
            }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerFindAllPaginated
         * @summary List Calls
         * @request GET:/v2/call
         * @secure
         */ callControllerFindAllPaginated: (query, params = {})=>this.request({
                path: `/v2/call`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerFindAllMetadataPaginated
         * @summary List Call Metadata
         * @request GET:/v2/call/metadata
         * @secure
         */ callControllerFindAllMetadataPaginated: (query, params = {})=>this.request({
                path: `/v2/call/metadata`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerFindAllPaginated
         * @summary List Assistants with pagination
         * @request GET:/v2/assistant
         * @secure
         */ assistantControllerFindAllPaginated: (query, params = {})=>this.request({
                path: `/v2/assistant`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerFindAllPaginated
         * @summary List Phone Numbers
         * @request GET:/v2/phone-number
         * @secure
         */ phoneNumberControllerFindAllPaginated: (query, params = {})=>this.request({
                path: `/v2/phone-number`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            })
    };
    chat = {
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerListChats
         * @summary List Chats
         * @request GET:/chat
         * @secure
         */ chatControllerListChats: (query, params = {})=>this.request({
                path: `/chat`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * @description Creates a new chat. Requires at least one of: assistantId/assistant, sessionId, or previousChatId. Note: sessionId and previousChatId are mutually exclusive.
         *
         * @tags Chats
         * @name ChatControllerCreateChat
         * @summary Create Chat
         * @request POST:/chat
         * @secure
         */ chatControllerCreateChat: (data, params = {})=>this.request({
                path: `/chat`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerGetChat
         * @summary Get Chat
         * @request GET:/chat/{id}
         * @secure
         */ chatControllerGetChat: (id, params = {})=>this.request({
                path: `/chat/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerDeleteChat
         * @summary Delete Chat
         * @request DELETE:/chat/{id}
         * @secure
         */ chatControllerDeleteChat: (id, params = {})=>this.request({
                path: `/chat/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerCreateOpenAiChat
         * @summary Create Chat (OpenAI Compatible)
         * @request POST:/chat/responses
         * @secure
         */ chatControllerCreateOpenAiChat: (data, params = {})=>this.request({
                path: `/chat/responses`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerCreateWebChat
         * @summary Create WebChat
         * @request POST:/chat/web
         * @secure
         */ chatControllerCreateWebChat: (data, params = {})=>this.request({
                path: `/chat/web`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerCreateOpenAiWebChat
         * @summary Create WebChat (OpenAI Compatible)
         * @request POST:/chat/web/responses
         * @secure
         */ chatControllerCreateOpenAiWebChat: (data, params = {})=>this.request({
                path: `/chat/web/responses`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            })
    };
    campaign = {
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerCreate
         * @summary Create Campaign
         * @request POST:/campaign
         * @secure
         */ campaignControllerCreate: (data, params = {})=>this.request({
                path: `/campaign`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerFindAll
         * @summary List Campaigns
         * @request GET:/campaign
         * @secure
         */ campaignControllerFindAll: (query, params = {})=>this.request({
                path: `/campaign`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerFindAllPaginated
         * @summary List Campaigns with pagination
         * @request GET:/campaign/paginated
         * @secure
         */ campaignControllerFindAllPaginated: (query, params = {})=>this.request({
                path: `/campaign/paginated`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerFindOne
         * @summary Get Campaign
         * @request GET:/campaign/{id}
         * @secure
         */ campaignControllerFindOne: (id, params = {})=>this.request({
                path: `/campaign/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerUpdate
         * @summary Update Campaign
         * @request PATCH:/campaign/{id}
         * @secure
         */ campaignControllerUpdate: (id, data, params = {})=>this.request({
                path: `/campaign/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerRemove
         * @summary Delete Campaign
         * @request DELETE:/campaign/{id}
         * @secure
         */ campaignControllerRemove: (id, params = {})=>this.request({
                path: `/campaign/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    session = {
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerCreate
         * @summary Create Session
         * @request POST:/session
         * @secure
         */ sessionControllerCreate: (data, params = {})=>this.request({
                path: `/session`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerFindAllPaginated
         * @summary List Sessions
         * @request GET:/session
         * @secure
         */ sessionControllerFindAllPaginated: (query, params = {})=>this.request({
                path: `/session`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerFindOne
         * @summary Get Session
         * @request GET:/session/{id}
         * @secure
         */ sessionControllerFindOne: (id, params = {})=>this.request({
                path: `/session/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerUpdate
         * @summary Update Session
         * @request PATCH:/session/{id}
         * @secure
         */ sessionControllerUpdate: (id, data, params = {})=>this.request({
                path: `/session/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerRemove
         * @summary Delete Session
         * @request DELETE:/session/{id}
         * @secure
         */ sessionControllerRemove: (id, params = {})=>this.request({
                path: `/session/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    support = {
        /**
         * No description
         *
         * @tags Support
         * @name SupportControllerCreateTicket
         * @summary Create Support Ticket
         * @request POST:/support/ticket
         * @secure
         */ supportControllerCreateTicket: (data, params = {})=>this.request({
                path: `/support/ticket`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            })
    };
    assistant = {
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerCreate
         * @summary Create Assistant
         * @request POST:/assistant
         * @secure
         */ assistantControllerCreate: (data, params = {})=>this.request({
                path: `/assistant`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerFindAll
         * @summary List Assistants
         * @request GET:/assistant
         * @secure
         */ assistantControllerFindAll: (query, params = {})=>this.request({
                path: `/assistant`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerFindOne
         * @summary Get Assistant
         * @request GET:/assistant/{id}
         * @secure
         */ assistantControllerFindOne: (id, params = {})=>this.request({
                path: `/assistant/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerUpdate
         * @summary Update Assistant
         * @request PATCH:/assistant/{id}
         * @secure
         */ assistantControllerUpdate: (id, data, params = {})=>this.request({
                path: `/assistant/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerReplace
         * @summary Replace Assistant
         * @request PUT:/assistant/{id}
         * @secure
         */ assistantControllerReplace: (id, data, params = {})=>this.request({
                path: `/assistant/${id}`,
                method: "PUT",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerRemove
         * @summary Delete Assistant
         * @request DELETE:/assistant/{id}
         * @secure
         */ assistantControllerRemove: (id, params = {})=>this.request({
                path: `/assistant/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerFindVersions
         * @summary List Assistant Versions
         * @request GET:/assistant/{id}/version
         * @secure
         */ assistantControllerFindVersions: (id, query, params = {})=>this.request({
                path: `/assistant/${id}/version`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            })
    };
    phoneNumber = {
        /**
         * @description Use POST /phone-number instead.
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerImportTwilio
         * @summary Import Twilio Number
         * @request POST:/phone-number/import/twilio
         * @deprecated
         * @secure
         */ phoneNumberControllerImportTwilio: (data, params = {})=>this.request({
                path: `/phone-number/import/twilio`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * @description Use POST /phone-number instead.
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerImportVonage
         * @summary Import Vonage Number
         * @request POST:/phone-number/import/vonage
         * @deprecated
         * @secure
         */ phoneNumberControllerImportVonage: (data, params = {})=>this.request({
                path: `/phone-number/import/vonage`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerCreate
         * @summary Create Phone Number
         * @request POST:/phone-number
         * @secure
         */ phoneNumberControllerCreate: (data, params = {})=>this.request({
                path: `/phone-number`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerFindAll
         * @summary List Phone Numbers
         * @request GET:/phone-number
         * @secure
         */ phoneNumberControllerFindAll: (query, params = {})=>this.request({
                path: `/phone-number`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerFindOne
         * @summary Get Phone Number
         * @request GET:/phone-number/{id}
         * @secure
         */ phoneNumberControllerFindOne: (id, params = {})=>this.request({
                path: `/phone-number/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerUpdate
         * @summary Update Phone Number
         * @request PATCH:/phone-number/{id}
         * @secure
         */ phoneNumberControllerUpdate: (id, data, params = {})=>this.request({
                path: `/phone-number/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerRemove
         * @summary Delete Phone Number
         * @request DELETE:/phone-number/{id}
         * @secure
         */ phoneNumberControllerRemove: (id, params = {})=>this.request({
                path: `/phone-number/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    tool = {
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerCreate
         * @summary Create Tool
         * @request POST:/tool
         * @secure
         */ toolControllerCreate: (data, params = {})=>this.request({
                path: `/tool`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerFindAll
         * @summary List Tools
         * @request GET:/tool
         * @secure
         */ toolControllerFindAll: (query, params = {})=>this.request({
                path: `/tool`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerFindOne
         * @summary Get Tool
         * @request GET:/tool/{id}
         * @secure
         */ toolControllerFindOne: (id, params = {})=>this.request({
                path: `/tool/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerUpdate
         * @summary Update Tool
         * @request PATCH:/tool/{id}
         * @secure
         */ toolControllerUpdate: (id, data, params = {})=>this.request({
                path: `/tool/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerRemove
         * @summary Delete Tool
         * @request DELETE:/tool/{id}
         * @secure
         */ toolControllerRemove: (id, params = {})=>this.request({
                path: `/tool/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    file = {
        /**
         * @description Use POST /file instead.
         *
         * @tags Files
         * @name FileControllerCreateDeprecated
         * @summary Upload File
         * @request POST:/file/upload
         * @deprecated
         * @secure
         */ fileControllerCreateDeprecated: (data, params = {})=>this.request({
                path: `/file/upload`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.FormData,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerCreate
         * @summary Upload File
         * @request POST:/file
         * @secure
         */ fileControllerCreate: (data, params = {})=>this.request({
                path: `/file`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.FormData,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerFindAll
         * @summary List Files
         * @request GET:/file
         * @secure
         */ fileControllerFindAll: (params = {})=>this.request({
                path: `/file`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerFindOne
         * @summary Get File
         * @request GET:/file/{id}
         * @secure
         */ fileControllerFindOne: (id, params = {})=>this.request({
                path: `/file/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerUpdate
         * @summary Update File
         * @request PATCH:/file/{id}
         * @secure
         */ fileControllerUpdate: (id, data, params = {})=>this.request({
                path: `/file/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerRemove
         * @summary Delete File
         * @request DELETE:/file/{id}
         * @secure
         */ fileControllerRemove: (id, params = {})=>this.request({
                path: `/file/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    knowledgeBase = {
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerCreate
         * @summary Create Knowledge Base
         * @request POST:/knowledge-base
         * @secure
         */ knowledgeBaseControllerCreate: (data, params = {})=>this.request({
                path: `/knowledge-base`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerFindAll
         * @summary List Knowledge Bases
         * @request GET:/knowledge-base
         * @secure
         */ knowledgeBaseControllerFindAll: (query, params = {})=>this.request({
                path: `/knowledge-base`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerFindOne
         * @summary Get Knowledge Base
         * @request GET:/knowledge-base/{id}
         * @secure
         */ knowledgeBaseControllerFindOne: (id, params = {})=>this.request({
                path: `/knowledge-base/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerUpdate
         * @summary Update Knowledge Base
         * @request PATCH:/knowledge-base/{id}
         * @secure
         */ knowledgeBaseControllerUpdate: (id, data, params = {})=>this.request({
                path: `/knowledge-base/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerRemove
         * @summary Delete Knowledge Base
         * @request DELETE:/knowledge-base/{id}
         * @secure
         */ knowledgeBaseControllerRemove: (id, params = {})=>this.request({
                path: `/knowledge-base/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    workflow = {
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerFindAll
         * @summary Get Workflows
         * @request GET:/workflow
         * @secure
         */ workflowControllerFindAll: (params = {})=>this.request({
                path: `/workflow`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerCreate
         * @summary Create Workflow
         * @request POST:/workflow
         * @secure
         */ workflowControllerCreate: (data, params = {})=>this.request({
                path: `/workflow`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerFindOne
         * @summary Get Workflow
         * @request GET:/workflow/{id}
         * @secure
         */ workflowControllerFindOne: (id, params = {})=>this.request({
                path: `/workflow/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerDelete
         * @summary Delete Workflow
         * @request DELETE:/workflow/{id}
         * @secure
         */ workflowControllerDelete: (id, params = {})=>this.request({
                path: `/workflow/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerUpdate
         * @summary Update Workflow
         * @request PATCH:/workflow/{id}
         * @secure
         */ workflowControllerUpdate: (id, data, params = {})=>this.request({
                path: `/workflow/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerGenerateFromTranscripts
         * @summary Generate Workflow JSON from Transcript Files
         * @request POST:/workflow/generate
         * @secure
         */ workflowControllerGenerateFromTranscripts: (data, params = {})=>this.request({
                path: `/workflow/generate`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            })
    };
    squad = {
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerCreate
         * @summary Create Squad
         * @request POST:/squad
         * @secure
         */ squadControllerCreate: (data, params = {})=>this.request({
                path: `/squad`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerFindAll
         * @summary List Squads
         * @request GET:/squad
         * @secure
         */ squadControllerFindAll: (query, params = {})=>this.request({
                path: `/squad`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerFindOne
         * @summary Get Squad
         * @request GET:/squad/{id}
         * @secure
         */ squadControllerFindOne: (id, params = {})=>this.request({
                path: `/squad/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerUpdate
         * @summary Update Squad
         * @request PATCH:/squad/{id}
         * @secure
         */ squadControllerUpdate: (id, data, params = {})=>this.request({
                path: `/squad/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerRemove
         * @summary Delete Squad
         * @request DELETE:/squad/{id}
         * @secure
         */ squadControllerRemove: (id, params = {})=>this.request({
                path: `/squad/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    testSuite = {
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerFindAllPaginated
         * @summary List Test Suites
         * @request GET:/test-suite
         * @secure
         */ testSuiteControllerFindAllPaginated: (query, params = {})=>this.request({
                path: `/test-suite`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerCreate
         * @summary Create Test Suite
         * @request POST:/test-suite
         * @secure
         */ testSuiteControllerCreate: (data, params = {})=>this.request({
                path: `/test-suite`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerFindOne
         * @summary Get Test Suite
         * @request GET:/test-suite/{id}
         * @secure
         */ testSuiteControllerFindOne: (id, params = {})=>this.request({
                path: `/test-suite/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerUpdate
         * @summary Update Test Suite
         * @request PATCH:/test-suite/{id}
         * @secure
         */ testSuiteControllerUpdate: (id, data, params = {})=>this.request({
                path: `/test-suite/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerRemove
         * @summary Delete Test Suite
         * @request DELETE:/test-suite/{id}
         * @secure
         */ testSuiteControllerRemove: (id, params = {})=>this.request({
                path: `/test-suite/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerFindAllPaginated
         * @summary List Tests
         * @request GET:/test-suite/{testSuiteId}/test
         * @secure
         */ testSuiteTestControllerFindAllPaginated: (testSuiteId, query, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/test`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerCreate
         * @summary Create Test
         * @request POST:/test-suite/{testSuiteId}/test
         * @secure
         */ testSuiteTestControllerCreate: (testSuiteId, data, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/test`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerFindOne
         * @summary Get Test
         * @request GET:/test-suite/{testSuiteId}/test/{id}
         * @secure
         */ testSuiteTestControllerFindOne: (testSuiteId, id, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/test/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerUpdate
         * @summary Update Test
         * @request PATCH:/test-suite/{testSuiteId}/test/{id}
         * @secure
         */ testSuiteTestControllerUpdate: (testSuiteId, id, data, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/test/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerRemove
         * @summary Delete Test
         * @request DELETE:/test-suite/{testSuiteId}/test/{id}
         * @secure
         */ testSuiteTestControllerRemove: (testSuiteId, id, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/test/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerFindAllPaginated
         * @summary List Test Suite Runs
         * @request GET:/test-suite/{testSuiteId}/run
         * @secure
         */ testSuiteRunControllerFindAllPaginated: (testSuiteId, query, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/run`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerCreate
         * @summary Create Test Suite Run
         * @request POST:/test-suite/{testSuiteId}/run
         * @secure
         */ testSuiteRunControllerCreate: (testSuiteId, data, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/run`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerFindOne
         * @summary Get Test Suite Run
         * @request GET:/test-suite/{testSuiteId}/run/{id}
         * @secure
         */ testSuiteRunControllerFindOne: (testSuiteId, id, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/run/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerUpdate
         * @summary Update Test Suite Run
         * @request PATCH:/test-suite/{testSuiteId}/run/{id}
         * @secure
         */ testSuiteRunControllerUpdate: (testSuiteId, id, data, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/run/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerRemove
         * @summary Delete Test Suite Run
         * @request DELETE:/test-suite/{testSuiteId}/run/{id}
         * @secure
         */ testSuiteRunControllerRemove: (testSuiteId, id, params = {})=>this.request({
                path: `/test-suite/${testSuiteId}/run/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    analytics = {
        /**
         * No description
         *
         * @tags Analytics
         * @name AnalyticsControllerQuery
         * @summary Create Analytics Queries
         * @request POST:/analytics
         * @secure
         */ analyticsControllerQuery: (data, params = {})=>this.request({
                path: `/analytics`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            })
    };
    log = {
        /**
         * No description
         *
         * @tags Logs
         * @name LoggingControllerCallLogsQuery
         * @summary Get Call Logs
         * @request GET:/log
         * @secure
         */ loggingControllerCallLogsQuery: (query, params = {})=>this.request({
                path: `/log`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Logs
         * @name LoggingControllerCallLogsDeleteQuery
         * @summary Delete Call Logs
         * @request DELETE:/log
         * @secure
         */ loggingControllerCallLogsDeleteQuery: (query, params = {})=>this.request({
                path: `/log`,
                method: "DELETE",
                query: query,
                secure: true,
                ...params
            })
    };
    logs = {
        /**
         * No description
         *
         * @tags Logs
         * @name LoggingControllerLogsQuery
         * @summary Get Logs
         * @request GET:/logs
         * @deprecated
         * @secure
         */ loggingControllerLogsQuery: (query, params = {})=>this.request({
                path: `/logs`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Logs
         * @name LoggingControllerLogsDeleteQuery
         * @summary Delete Logs
         * @request DELETE:/logs
         * @deprecated
         * @secure
         */ loggingControllerLogsDeleteQuery: (query, params = {})=>this.request({
                path: `/logs`,
                method: "DELETE",
                query: query,
                secure: true,
                ...params
            })
    };
    org = {
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerCreate
         * @summary Create Org
         * @request POST:/org
         * @secure
         */ orgControllerCreate: (data, params = {})=>this.request({
                path: `/org`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerFindAll
         * @summary List Orgs
         * @request GET:/org
         * @secure
         */ orgControllerFindAll: (params = {})=>this.request({
                path: `/org`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerFindOne
         * @summary Get Org
         * @request GET:/org/{id}
         * @secure
         */ orgControllerFindOne: (id, params = {})=>this.request({
                path: `/org/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerUpdate
         * @summary Update Org
         * @request PATCH:/org/{id}
         * @secure
         */ orgControllerUpdate: (id, data, params = {})=>this.request({
                path: `/org/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerDeleteOrg
         * @summary Delete Org
         * @request DELETE:/org/{id}
         * @secure
         */ orgControllerDeleteOrg: (id, params = {})=>this.request({
                path: `/org/${id}`,
                method: "DELETE",
                secure: true,
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerFindAllUsers
         * @summary List Users
         * @request GET:/org/{id}/user
         * @secure
         */ orgControllerFindAllUsers: (id, params = {})=>this.request({
                path: `/org/${id}/user`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerOrgLeave
         * @summary Leave Org
         * @request DELETE:/org/{id}/leave
         * @secure
         */ orgControllerOrgLeave: (id, params = {})=>this.request({
                path: `/org/${id}/leave`,
                method: "DELETE",
                secure: true,
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerOrgRemoveUser
         * @summary Remove Org Member
         * @request DELETE:/org/{id}/member/{memberId}/leave
         * @secure
         */ orgControllerOrgRemoveUser: (id, memberId, params = {})=>this.request({
                path: `/org/${id}/member/${memberId}/leave`,
                method: "DELETE",
                secure: true,
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerUsersInvite
         * @summary Invite User
         * @request POST:/org/{id}/invite
         * @secure
         */ orgControllerUsersInvite: (id, data, params = {})=>this.request({
                path: `/org/${id}/invite`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerUserUpdate
         * @summary Update User Role
         * @request PATCH:/org/{id}/role
         * @secure
         */ orgControllerUserUpdate: (id, data, params = {})=>this.request({
                path: `/org/${id}/role`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                ...params
            }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerOrgToken
         * @summary Generate User Org JWT
         * @request GET:/org/{id}/auth
         * @secure
         */ orgControllerOrgToken: (id, params = {})=>this.request({
                path: `/org/${id}/auth`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            })
    };
    token = {
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerCreate
         * @summary Create Token
         * @request POST:/token
         * @secure
         */ tokenControllerCreate: (data, params = {})=>this.request({
                path: `/token`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerFindAll
         * @summary List Tokens
         * @request GET:/token
         * @secure
         */ tokenControllerFindAll: (query, params = {})=>this.request({
                path: `/token`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerFindOne
         * @summary Get Token
         * @request GET:/token/{id}
         * @secure
         */ tokenControllerFindOne: (id, params = {})=>this.request({
                path: `/token/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerUpdate
         * @summary Update Token
         * @request PATCH:/token/{id}
         * @secure
         */ tokenControllerUpdate: (id, data, params = {})=>this.request({
                path: `/token/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerRemove
         * @summary Delete Token
         * @request DELETE:/token/{id}
         * @secure
         */ tokenControllerRemove: (id, params = {})=>this.request({
                path: `/token/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    credential = {
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerCreate
         * @summary Create Credential
         * @request POST:/credential
         * @secure
         */ credentialControllerCreate: (data, params = {})=>this.request({
                path: `/credential`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerFindAll
         * @summary List Credentials
         * @request GET:/credential
         * @secure
         */ credentialControllerFindAll: (query, params = {})=>this.request({
                path: `/credential`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerFindOne
         * @summary Get Credential
         * @request GET:/credential/{id}
         * @secure
         */ credentialControllerFindOne: (id, params = {})=>this.request({
                path: `/credential/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerUpdate
         * @summary Update Credential
         * @request PATCH:/credential/{id}
         * @secure
         */ credentialControllerUpdate: (id, data, params = {})=>this.request({
                path: `/credential/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerRemove
         * @summary Delete Credential
         * @request DELETE:/credential/{id}
         * @secure
         */ credentialControllerRemove: (id, params = {})=>this.request({
                path: `/credential/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerGenerateSession
         * @summary Generate a credential session
         * @request POST:/credential/session
         * @secure
         */ credentialControllerGenerateSession: (data, params = {})=>this.request({
                path: `/credential/session`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerHandleWebhook
         * @summary Handle credential webhook
         * @request POST:/credential/webhook
         */ credentialControllerHandleWebhook: (data, params = {})=>this.request({
                path: `/credential/webhook`,
                method: "POST",
                body: data,
                type: ContentType.Json,
                ...params
            }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerCredentialActionTrigger
         * @summary Trigger a credential action
         * @request POST:/credential/trigger
         * @secure
         */ credentialControllerCredentialActionTrigger: (data, params = {})=>this.request({
                path: `/credential/trigger`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                ...params
            })
    };
    template = {
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerCreate
         * @summary Create Template
         * @request POST:/template
         * @secure
         */ templateControllerCreate: (data, params = {})=>this.request({
                path: `/template`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerFindAll
         * @summary List Templates
         * @request GET:/template
         * @secure
         */ templateControllerFindAll: (query, params = {})=>this.request({
                path: `/template`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerFindAllPinned
         * @summary List Templates
         * @request GET:/template/pinned
         * @secure
         */ templateControllerFindAllPinned: (params = {})=>this.request({
                path: `/template/pinned`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerFindOne
         * @summary Get Template
         * @request GET:/template/{id}
         * @secure
         */ templateControllerFindOne: (id, params = {})=>this.request({
                path: `/template/${id}`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerUpdate
         * @summary Update Template
         * @request PATCH:/template/{id}
         * @secure
         */ templateControllerUpdate: (id, data, params = {})=>this.request({
                path: `/template/${id}`,
                method: "PATCH",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerRemove
         * @summary Delete Template
         * @request DELETE:/template/{id}
         * @secure
         */ templateControllerRemove: (id, params = {})=>this.request({
                path: `/template/${id}`,
                method: "DELETE",
                secure: true,
                format: "json",
                ...params
            })
    };
    voiceLibrary = {
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceGetByProvider
         * @summary Get voices in Voice Library by Provider
         * @request GET:/voice-library/{provider}
         * @secure
         */ voiceLibraryControllerVoiceGetByProvider: (provider, query, params = {})=>this.request({
                path: `/voice-library/${provider}`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceGetAccentsByProvider
         * @summary Get accents in Voice Library by Provider
         * @request GET:/voice-library/{provider}/accents
         * @secure
         */ voiceLibraryControllerVoiceGetAccentsByProvider: (provider, params = {})=>this.request({
                path: `/voice-library/${provider}/accents`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceLibrarySyncByProvider
         * @summary Sync Private voices in Voice Library by Provider
         * @request POST:/voice-library/sync/{provider}
         * @secure
         */ voiceLibraryControllerVoiceLibrarySyncByProvider: (provider, params = {})=>this.request({
                path: `/voice-library/sync/${provider}`,
                method: "POST",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceLibrarySyncDefaultVoices
         * @summary Sync Default voices in Voice Library by Providers
         * @request POST:/voice-library/sync
         * @secure
         */ voiceLibraryControllerVoiceLibrarySyncDefaultVoices: (data, params = {})=>this.request({
                path: `/voice-library/sync`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceLibraryCreateSesameVoice
         * @summary Create a new voice in the Voice Library using Sesame
         * @request POST:/voice-library/create-sesame-voice
         * @secure
         */ voiceLibraryControllerVoiceLibraryCreateSesameVoice: (data, params = {})=>this.request({
                path: `/voice-library/create-sesame-voice`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                ...params
            })
    };
    provider = {
        /**
         * No description
         *
         * @tags Providers
         * @name ProviderControllerGetWorkflows
         * @request GET:/{provider}/workflows
         * @secure
         */ providerControllerGetWorkflows: (provider, query, params = {})=>this.request({
                path: `/${provider}/workflows`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Providers
         * @name ProviderControllerGetWorkflowTriggerHook
         * @request GET:/{provider}/workflows/{workflowId}/hooks
         * @secure
         */ providerControllerGetWorkflowTriggerHook: (provider, workflowId, params = {})=>this.request({
                path: `/${provider}/workflows/${workflowId}/hooks`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Providers
         * @name ProviderControllerGetLocations
         * @request GET:/{provider}/locations
         * @secure
         */ providerControllerGetLocations: (provider, params = {})=>this.request({
                path: `/${provider}/locations`,
                method: "GET",
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerSearchVoices
         * @summary Search Voice from Provider Voice Library.
         * @request GET:/{provider}/voices/search
         * @deprecated
         * @secure
         */ voiceProviderControllerSearchVoices: (provider, query, params = {})=>this.request({
                path: `/${provider}/voices/search`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerSearchVoice
         * @summary Search Voice from Provider Voice Library.
         * @request GET:/{provider}/voice/search
         * @secure
         */ voiceProviderControllerSearchVoice: (provider, query, params = {})=>this.request({
                path: `/${provider}/voice/search`,
                method: "GET",
                query: query,
                secure: true,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerAddVoices
         * @summary Add Shared Voice to your Provider Account.
         * @request POST:/{provider}/voices/add
         * @deprecated
         * @secure
         */ voiceProviderControllerAddVoices: (provider, data, params = {})=>this.request({
                path: `/${provider}/voices/add`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            }),
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerAddVoice
         * @summary Add Shared Voice to your Provider Account.
         * @request POST:/{provider}/voice/add
         * @secure
         */ voiceProviderControllerAddVoice: (provider, data, params = {})=>this.request({
                path: `/${provider}/voice/add`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.Json,
                format: "json",
                ...params
            })
    };
    v11Labs = {
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerCloneVoices
         * @summary Clone a voice to the provider account and add to Vapi Voice Library.
         * @request POST:/11labs/voice/clone
         * @secure
         */ voiceProviderControllerCloneVoices: (data, params = {})=>this.request({
                path: `/11labs/voice/clone`,
                method: "POST",
                body: data,
                secure: true,
                type: ContentType.FormData,
                ...params
            })
    };
}
exports.Api = Api;
}}),
"[project]/node_modules/@vapi-ai/web/dist/client.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.client = void 0;
const api_1 = __turbopack_context__.r("[project]/node_modules/@vapi-ai/web/dist/api.js [app-ssr] (ecmascript)");
const api = new api_1.Api({
    baseUrl: "https://api.vapi.ai",
    baseApiParams: {
        secure: true
    },
    securityWorker: async (securityData)=>{
        if (securityData) {
            return {
                headers: {
                    Authorization: `Bearer ${securityData}`
                }
            };
        }
    }
});
exports.client = api;
}}),
"[project]/node_modules/@vapi-ai/web/dist/vapi.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const daily_js_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@daily-co/daily-js/dist/daily-esm.js [app-ssr] (ecmascript)"));
const events_1 = __importDefault(__turbopack_context__.r("[externals]/events [external] (events, cjs)"));
const client_1 = __turbopack_context__.r("[project]/node_modules/@vapi-ai/web/dist/client.js [app-ssr] (ecmascript)");
async function startAudioPlayer(player, track) {
    player.muted = false;
    player.autoplay = true;
    if (track != null) {
        player.srcObject = new MediaStream([
            track
        ]);
        await player.play();
    }
}
async function buildAudioPlayer(track, participantId) {
    const player = document.createElement('audio');
    player.dataset.participantId = participantId;
    document.body.appendChild(player);
    await startAudioPlayer(player, track);
    return player;
}
function destroyAudioPlayer(participantId) {
    const player = document.querySelector(`audio[data-participant-id="${participantId}"]`);
    player?.remove();
}
function subscribeToTracks(e, call, isVideoRecordingEnabled, isVideoEnabled) {
    if (e.participant.local) return;
    call.updateParticipant(e.participant.session_id, {
        setSubscribedTracks: {
            audio: true,
            video: isVideoRecordingEnabled || isVideoEnabled
        }
    });
}
class VapiEventEmitter extends events_1.default {
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    once(event, listener) {
        super.once(event, listener);
        return this;
    }
    emit(event, ...args) {
        return super.emit(event, ...args);
    }
    removeListener(event, listener) {
        super.removeListener(event, listener);
        return this;
    }
    removeAllListeners(event) {
        super.removeAllListeners(event);
        return this;
    }
}
class Vapi extends VapiEventEmitter {
    started = false;
    call = null;
    speakingTimeout = null;
    dailyCallConfig = {};
    dailyCallObject = {};
    hasEmittedCallEndedStatus = false;
    constructor(apiToken, apiBaseUrl, dailyCallConfig, dailyCallObject){
        super();
        client_1.client.baseUrl = apiBaseUrl ?? 'https://api.vapi.ai';
        client_1.client.setSecurityData(apiToken);
        this.dailyCallConfig = dailyCallConfig ?? {};
        this.dailyCallObject = dailyCallObject ?? {};
    }
    cleanup() {
        this.started = false;
        this.hasEmittedCallEndedStatus = false;
        this.call?.destroy();
        this.call = null;
        this.speakingTimeout = null;
    }
    isMobileDevice() {
        if (typeof navigator === 'undefined') {
            return false;
        }
        const userAgent = navigator.userAgent;
        return /android|iphone|ipad|ipod|iemobile|blackberry|bada/i.test(userAgent.toLowerCase());
    }
    async sleep(ms) {
        return new Promise((resolve)=>setTimeout(resolve, ms));
    }
    async start(assistant, assistantOverrides, squad, workflow, workflowOverrides) {
        const startTime = Date.now();
        // Input validation with detailed error messages
        if (!assistant && !squad && !workflow) {
            const error = new Error('Assistant or Squad or Workflow must be provided.');
            this.emit('error', {
                type: 'validation-error',
                stage: 'input-validation',
                message: error.message,
                timestamp: new Date().toISOString()
            });
            throw error;
        }
        if (this.started) {
            this.emit('call-start-progress', {
                stage: 'validation',
                status: 'failed',
                timestamp: new Date().toISOString(),
                metadata: {
                    reason: 'already-started'
                }
            });
            return null;
        }
        this.emit('call-start-progress', {
            stage: 'initialization',
            status: 'started',
            timestamp: new Date().toISOString(),
            metadata: {
                hasAssistant: !!assistant,
                hasSquad: !!squad,
                hasWorkflow: !!workflow
            }
        });
        this.started = true;
        try {
            // Stage 1: Create web call
            this.emit('call-start-progress', {
                stage: 'web-call-creation',
                status: 'started',
                timestamp: new Date().toISOString()
            });
            const webCallStartTime = Date.now();
            const webCall = (await client_1.client.call.callControllerCreateWebCall({
                assistant: typeof assistant === 'string' ? undefined : assistant,
                assistantId: typeof assistant === 'string' ? assistant : undefined,
                assistantOverrides,
                squad: typeof squad === 'string' ? undefined : squad,
                squadId: typeof squad === 'string' ? squad : undefined,
                workflow: typeof workflow === 'string' ? undefined : workflow,
                workflowId: typeof workflow === 'string' ? workflow : undefined,
                workflowOverrides
            })).data;
            const webCallDuration = Date.now() - webCallStartTime;
            this.emit('call-start-progress', {
                stage: 'web-call-creation',
                status: 'completed',
                duration: webCallDuration,
                timestamp: new Date().toISOString(),
                metadata: {
                    callId: webCall?.id || 'unknown',
                    videoRecordingEnabled: webCall?.artifactPlan?.videoRecordingEnabled ?? false,
                    voiceProvider: webCall?.assistant?.voice?.provider || 'unknown'
                }
            });
            if (this.call) {
                this.emit('call-start-progress', {
                    stage: 'daily-call-object-creation',
                    status: 'started',
                    timestamp: new Date().toISOString(),
                    metadata: {
                        action: 'cleanup-existing'
                    }
                });
                this.cleanup();
            }
            const isVideoRecordingEnabled = webCall?.artifactPlan?.videoRecordingEnabled ?? false;
            const isVideoEnabled = webCall?.assistant?.voice?.provider === 'tavus';
            // Stage 2: Create Daily call object
            this.emit('call-start-progress', {
                stage: 'daily-call-object-creation',
                status: 'started',
                timestamp: new Date().toISOString(),
                metadata: {
                    audioSource: this.dailyCallObject.audioSource ?? true,
                    videoSource: this.dailyCallObject.videoSource ?? isVideoRecordingEnabled,
                    isVideoRecordingEnabled,
                    isVideoEnabled
                }
            });
            const dailyCallStartTime = Date.now();
            try {
                this.call = daily_js_1.default.createCallObject({
                    audioSource: this.dailyCallObject.audioSource ?? true,
                    videoSource: this.dailyCallObject.videoSource ?? isVideoRecordingEnabled,
                    dailyConfig: this.dailyCallConfig
                });
                const dailyCallDuration = Date.now() - dailyCallStartTime;
                this.emit('call-start-progress', {
                    stage: 'daily-call-object-creation',
                    status: 'completed',
                    duration: dailyCallDuration,
                    timestamp: new Date().toISOString()
                });
            } catch (error) {
                const dailyCallDuration = Date.now() - dailyCallStartTime;
                this.emit('call-start-progress', {
                    stage: 'daily-call-object-creation',
                    status: 'failed',
                    duration: dailyCallDuration,
                    timestamp: new Date().toISOString(),
                    metadata: {
                        error: error?.toString()
                    }
                });
                this.emit('error', {
                    type: 'daily-call-object-creation-error',
                    stage: 'daily-call-object-creation',
                    error,
                    timestamp: new Date().toISOString()
                });
                throw error;
            }
            this.call.iframe()?.style.setProperty('display', 'none');
            this.call.on('left-meeting', ()=>{
                this.emit('call-end');
                if (!this.hasEmittedCallEndedStatus) {
                    this.emit('message', {
                        type: 'status-update',
                        status: 'ended',
                        'endedReason': 'customer-ended-call'
                    });
                    this.hasEmittedCallEndedStatus = true;
                }
                if (isVideoRecordingEnabled) {
                    this.call?.stopRecording();
                }
                this.cleanup();
            });
            this.call.on('error', (error)=>{
                this.emit('error', error);
                if (isVideoRecordingEnabled) {
                    this.call?.stopRecording();
                }
            });
            this.call.on('camera-error', (error)=>{
                this.emit('camera-error', error);
            });
            this.call.on('network-quality-change', (event)=>{
                this.emit('network-quality-change', event);
            });
            this.call.on('network-connection', (event)=>{
                this.emit('network-connection', event);
            });
            this.call.on('track-started', async (e)=>{
                if (!e || !e.participant) {
                    return;
                }
                if (e.participant?.local) {
                    return;
                }
                if (e.participant?.user_name !== 'Vapi Speaker') {
                    return;
                }
                if (e.track.kind === 'video') {
                    this.emit('video', e.track);
                }
                if (e.track.kind === 'audio') {
                    await buildAudioPlayer(e.track, e.participant.session_id);
                }
                this.call?.sendAppMessage('playable');
            });
            this.call.on('participant-joined', (e)=>{
                if (!e || !this.call) return;
                subscribeToTracks(e, this.call, isVideoRecordingEnabled, isVideoEnabled);
            });
            this.call.on('participant-updated', (e)=>{
                if (!e) {
                    return;
                }
                this.emit('daily-participant-updated', e.participant);
            });
            this.call.on('participant-left', (e)=>{
                if (!e) {
                    return;
                }
                destroyAudioPlayer(e.participant.session_id);
            });
            // Stage 3: Mobile device handling and permissions
            const isMobile = this.isMobileDevice();
            this.emit('call-start-progress', {
                stage: 'mobile-permissions',
                status: 'started',
                timestamp: new Date().toISOString(),
                metadata: {
                    isMobile
                }
            });
            if (isMobile) {
                const mobileWaitStartTime = Date.now();
                await this.sleep(1000);
                const mobileWaitDuration = Date.now() - mobileWaitStartTime;
                this.emit('call-start-progress', {
                    stage: 'mobile-permissions',
                    status: 'completed',
                    duration: mobileWaitDuration,
                    timestamp: new Date().toISOString(),
                    metadata: {
                        action: 'permissions-wait'
                    }
                });
            } else {
                this.emit('call-start-progress', {
                    stage: 'mobile-permissions',
                    status: 'completed',
                    timestamp: new Date().toISOString(),
                    metadata: {
                        action: 'skipped-not-mobile'
                    }
                });
            }
            // Stage 4: Join the call
            this.emit('call-start-progress', {
                stage: 'daily-call-join',
                status: 'started',
                timestamp: new Date().toISOString()
            });
            const joinStartTime = Date.now();
            try {
                await this.call.join({
                    // @ts-expect-error This exists
                    url: webCall.webCallUrl,
                    subscribeToTracksAutomatically: false
                });
                const joinDuration = Date.now() - joinStartTime;
                this.emit('call-start-progress', {
                    stage: 'daily-call-join',
                    status: 'completed',
                    duration: joinDuration,
                    timestamp: new Date().toISOString()
                });
            } catch (error) {
                const joinDuration = Date.now() - joinStartTime;
                this.emit('call-start-progress', {
                    stage: 'daily-call-join',
                    status: 'failed',
                    duration: joinDuration,
                    timestamp: new Date().toISOString(),
                    metadata: {
                        error: error?.toString()
                    }
                });
                this.emit('error', {
                    type: 'daily-call-join-error',
                    stage: 'daily-call-join',
                    error,
                    duration: joinDuration,
                    timestamp: new Date().toISOString()
                });
                throw error;
            }
            // Stage 5: Video recording setup (if enabled)
            if (isVideoRecordingEnabled) {
                this.emit('call-start-progress', {
                    stage: 'video-recording-setup',
                    status: 'started',
                    timestamp: new Date().toISOString()
                });
                const recordingRequestedTime = new Date().getTime();
                const recordingStartTime = Date.now();
                try {
                    this.call.startRecording({
                        width: 1280,
                        height: 720,
                        backgroundColor: '#FF1F2D3D',
                        layout: {
                            preset: 'default'
                        }
                    });
                    const recordingSetupDuration = Date.now() - recordingStartTime;
                    this.emit('call-start-progress', {
                        stage: 'video-recording-setup',
                        status: 'completed',
                        duration: recordingSetupDuration,
                        timestamp: new Date().toISOString()
                    });
                    this.call.on('recording-started', ()=>{
                        const totalRecordingDelay = (new Date().getTime() - recordingRequestedTime) / 1000;
                        this.emit('call-start-progress', {
                            stage: 'video-recording-started',
                            status: 'completed',
                            timestamp: new Date().toISOString(),
                            metadata: {
                                delaySeconds: totalRecordingDelay
                            }
                        });
                        this.send({
                            type: 'control',
                            control: 'say-first-message',
                            videoRecordingStartDelaySeconds: totalRecordingDelay
                        });
                    });
                } catch (error) {
                    const recordingSetupDuration = Date.now() - recordingStartTime;
                    this.emit('call-start-progress', {
                        stage: 'video-recording-setup',
                        status: 'failed',
                        duration: recordingSetupDuration,
                        timestamp: new Date().toISOString(),
                        metadata: {
                            error: error?.toString()
                        }
                    });
                    this.emit('error', {
                        type: 'video-recording-setup-error',
                        stage: 'video-recording-setup',
                        error,
                        timestamp: new Date().toISOString()
                    });
                // Don't throw here, video recording is optional
                }
            } else {
                this.emit('call-start-progress', {
                    stage: 'video-recording-setup',
                    status: 'completed',
                    timestamp: new Date().toISOString(),
                    metadata: {
                        action: 'skipped-not-enabled'
                    }
                });
            }
            // Stage 6: Audio level observer setup
            this.emit('call-start-progress', {
                stage: 'audio-observer-setup',
                status: 'started',
                timestamp: new Date().toISOString()
            });
            const audioObserverStartTime = Date.now();
            try {
                this.call.startRemoteParticipantsAudioLevelObserver(100);
                const audioObserverDuration = Date.now() - audioObserverStartTime;
                this.emit('call-start-progress', {
                    stage: 'audio-observer-setup',
                    status: 'completed',
                    duration: audioObserverDuration,
                    timestamp: new Date().toISOString()
                });
            } catch (error) {
                const audioObserverDuration = Date.now() - audioObserverStartTime;
                this.emit('call-start-progress', {
                    stage: 'audio-observer-setup',
                    status: 'failed',
                    duration: audioObserverDuration,
                    timestamp: new Date().toISOString(),
                    metadata: {
                        error: error?.toString()
                    }
                });
                this.emit('error', {
                    type: 'audio-observer-setup-error',
                    stage: 'audio-observer-setup',
                    error,
                    timestamp: new Date().toISOString()
                });
            // Don't throw here, this is non-critical
            }
            this.call.on('remote-participants-audio-level', (e)=>{
                if (e) this.handleRemoteParticipantsAudioLevel(e);
            });
            this.call.on('app-message', (e)=>this.onAppMessage(e));
            this.call.on('nonfatal-error', (e)=>{
                // https://docs.daily.co/reference/daily-js/events/meeting-events#type-audio-processor-error
                if (e?.type === 'audio-processor-error') {
                    this.call?.updateInputSettings({
                        audio: {
                            processor: {
                                type: 'none'
                            }
                        }
                    }).then(()=>{
                        this.call?.setLocalAudio(true);
                    });
                }
            });
            // Stage 7: Audio processing setup
            this.emit('call-start-progress', {
                stage: 'audio-processing-setup',
                status: 'started',
                timestamp: new Date().toISOString()
            });
            const audioProcessingStartTime = Date.now();
            try {
                this.call.updateInputSettings({
                    audio: {
                        processor: {
                            type: 'noise-cancellation'
                        }
                    }
                });
                const audioProcessingDuration = Date.now() - audioProcessingStartTime;
                this.emit('call-start-progress', {
                    stage: 'audio-processing-setup',
                    status: 'completed',
                    duration: audioProcessingDuration,
                    timestamp: new Date().toISOString()
                });
            } catch (error) {
                const audioProcessingDuration = Date.now() - audioProcessingStartTime;
                this.emit('call-start-progress', {
                    stage: 'audio-processing-setup',
                    status: 'failed',
                    duration: audioProcessingDuration,
                    timestamp: new Date().toISOString(),
                    metadata: {
                        error: error?.toString()
                    }
                });
                this.emit('error', {
                    type: 'audio-processing-setup-error',
                    stage: 'audio-processing-setup',
                    error,
                    timestamp: new Date().toISOString()
                });
            // Don't throw here, this is non-critical
            }
            const totalDuration = Date.now() - startTime;
            this.emit('call-start-success', {
                totalDuration,
                callId: webCall?.id || 'unknown',
                timestamp: new Date().toISOString()
            });
            return webCall;
        } catch (e) {
            const totalDuration = Date.now() - startTime;
            this.emit('call-start-failed', {
                stage: 'unknown',
                totalDuration,
                error: e?.toString() || 'Unknown error occurred',
                errorStack: e instanceof Error ? e.stack : 'No stack trace available',
                timestamp: new Date().toISOString(),
                context: {
                    hasAssistant: !!assistant,
                    hasSquad: !!squad,
                    hasWorkflow: !!workflow,
                    isMobile: this.isMobileDevice()
                }
            });
            // Also emit the generic error event for backward compatibility
            this.emit('error', {
                type: 'start-method-error',
                stage: 'unknown',
                error: e,
                totalDuration,
                timestamp: new Date().toISOString(),
                context: {
                    hasAssistant: !!assistant,
                    hasSquad: !!squad,
                    hasWorkflow: !!workflow,
                    isMobile: this.isMobileDevice()
                }
            });
            this.cleanup();
            return null;
        }
    }
    onAppMessage(e) {
        if (!e) {
            return;
        }
        try {
            if (e.data === 'listening') {
                return this.emit('call-start');
            } else {
                try {
                    const parsedMessage = JSON.parse(e.data);
                    this.emit('message', parsedMessage);
                    if (parsedMessage && 'type' in parsedMessage && 'status' in parsedMessage && parsedMessage.type === 'status-update' && parsedMessage.status === 'ended') {
                        this.hasEmittedCallEndedStatus = true;
                    }
                } catch (parseError) {
                    console.log('Error parsing message data: ', parseError);
                }
            }
        } catch (e) {
            console.error(e);
        }
    }
    handleRemoteParticipantsAudioLevel(e) {
        const speechLevel = Object.values(e.participantsAudioLevel).reduce((a, b)=>a + b, 0);
        this.emit('volume-level', Math.min(1, speechLevel / 0.15));
        const isSpeaking = speechLevel > 0.01;
        if (!isSpeaking) {
            return;
        }
        if (this.speakingTimeout) {
            clearTimeout(this.speakingTimeout);
            this.speakingTimeout = null;
        } else {
            this.emit('speech-start');
        }
        this.speakingTimeout = setTimeout(()=>{
            this.emit('speech-end');
            this.speakingTimeout = null;
        }, 1000);
    }
    stop() {
        this.started = false;
        this.call?.destroy();
        this.call = null;
    }
    send(message) {
        this.call?.sendAppMessage(JSON.stringify(message));
    }
    setMuted(mute) {
        if (!this.call) {
            throw new Error('Call object is not available.');
        }
        this.call.setLocalAudio(!mute);
    }
    isMuted() {
        if (!this.call) {
            return false;
        }
        return this.call.localAudio() === false;
    }
    say(message, endCallAfterSpoken, interruptionsEnabled, interruptAssistantEnabled) {
        this.send({
            type: 'say',
            message,
            endCallAfterSpoken,
            interruptionsEnabled: interruptionsEnabled ?? false,
            interruptAssistantEnabled: interruptAssistantEnabled ?? false
        });
    }
    setInputDevicesAsync(options) {
        this.call?.setInputDevicesAsync(options);
    }
    async increaseMicLevel(gain) {
        if (!this.call) {
            throw new Error('Call object is not available.');
        }
        try {
            const stream = await navigator.mediaDevices.getUserMedia({
                audio: true
            });
            const audioContext = new AudioContext();
            const source = audioContext.createMediaStreamSource(stream);
            const gainNode = audioContext.createGain();
            gainNode.gain.value = gain;
            source.connect(gainNode);
            const destination = audioContext.createMediaStreamDestination();
            gainNode.connect(destination);
            const [boostedTrack] = destination.stream.getAudioTracks();
            await this.call.setInputDevicesAsync({
                audioSource: boostedTrack
            });
        } catch (error) {
            console.error("Error adjusting microphone level:", error);
        }
    }
    setOutputDeviceAsync(options) {
        this.call?.setOutputDeviceAsync(options);
    }
    getDailyCallObject() {
        return this.call;
    }
    startScreenSharing(displayMediaOptions, screenVideoSendSettings) {
        this.call?.startScreenShare({
            displayMediaOptions,
            screenVideoSendSettings
        });
    }
    stopScreenSharing() {
        this.call?.stopScreenShare();
    }
}
exports.default = Vapi;
}}),
"[project]/node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
// This file must be bundled in the app's client layer, it shouldn't be directly
// imported by the server.
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    callServer: null,
    createServerReference: null,
    findSourceMapURL: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    callServer: function() {
        return _appcallserver.callServer;
    },
    createServerReference: function() {
        return createServerReference;
    },
    findSourceMapURL: function() {
        return _appfindsourcemapurl.findSourceMapURL;
    }
});
const _appcallserver = __turbopack_context__.r("[project]/node_modules/next/dist/client/app-call-server.js [app-ssr] (ecmascript)");
const _appfindsourcemapurl = __turbopack_context__.r("[project]/node_modules/next/dist/client/app-find-source-map-url.js [app-ssr] (ecmascript)");
const createServerReference = (("TURBOPACK compile-time truthy", 1) ? __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-server-dom-turbopack-client-edge.js [app-ssr] (ecmascript)") : ("TURBOPACK unreachable", undefined)).createServerReference; //# sourceMappingURL=action-client-wrapper.js.map
}}),

};

//# sourceMappingURL=node_modules_e2cab708._.js.map